name: CI

on:
  push:
  pull_request:
  release:
    types:
      - published
  schedule:
    - cron: '34 7 * * 1-5'

env:
  MINIMUM_PYTHON_VERSION: '3.10'

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  precommit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ env.MINIMUM_PYTHON_VERSION }}
      - name: Run static code inspections
        run: uv run pre-commit run --all-files

  build:
    runs-on: ubuntu-latest
    permissions:
      # These permissions are needed to interact with GitHub's OIDC Token endpoint.
      id-token: write
      contents: read
    strategy:
      fail-fast: false # Try to work around ECS errors
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13", "3.14"]
    steps:
      - uses: actions/checkout@v4
      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1
      - name: Pull the grand-challenge container images
        run: |
          sudo apt-get update
          sudo apt-get install -y retry
          retry -t 5 -- /bin/bash -c 'aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/diag-nijmegen/grand-challenge/web'
          retry -t 5 -- docker pull public.ecr.aws/diag-nijmegen/grand-challenge/web:latest
          retry -t 5 -- /bin/bash -c 'aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/diag-nijmegen/grand-challenge/http'
          retry -t 5 -- docker pull public.ecr.aws/diag-nijmegen/grand-challenge/http:latest
      - name: Add gc.localhost to /etc/hosts
        run: sudo echo "127.0.0.1 gc.localhost\n127.0.0.1 minio.localhost" | sudo tee -a /etc/hosts
      - name: Run uv
        run: |
          uv run pytest --cov-branch --cov-report term-missing --cov=tests/ --cov=gcapi/

  deploy:
    if: github.event_name == 'release'
    needs: [precommit, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ env.MINIMUM_PYTHON_VERSION }}
      - name: Upload to pypi
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          uv build
          uv publish
