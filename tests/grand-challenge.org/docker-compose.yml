version: '2.3'

services:

  postgres:
    image: postgres:10.7
    command: "postgres -c 'config_file=/etc/postgresql/postgresql.conf'"
    environment: &postgresenv
      POSTGRES_PASSWORD: secretpassword
      POSTGRES_USER: comic
      POSTGRES_DB: comic
    ports:
      - "5432:5432" # Only required for running django locally
    volumes:
      # Use a non-durable postgres configuration
      # https://www.postgresql.org/docs/current/non-durability.html
      # USE ONLY FOR DEVELOPMENT!
      - type: bind
        source: ./dockerfiles/db/postgres.test.conf
        target: /etc/postgresql/postgresql.conf
    tmpfs:
      - /var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "comic"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  minio-private:
    # This is for private data, should not be exposed to the public
    image: minio/minio:RELEASE.2019-08-14T20-37-41Z
    environment:
      MINIO_ACCESS_KEY: minioprivate
      MINIO_SECRET_KEY: minioprivate12345
    expose:
      - 9000
    command: "--compat server /data"
    volumes:
      - type: volume
        source: minio-private-data
        target: /data
    restart: always

  minio-protected:
    # This is for protected data, should only be exposed via an internal link
    # in nginx
    image: minio/minio:RELEASE.2019-08-14T20-37-41Z
    environment:
      MINIO_ACCESS_KEY: minioprotected
      MINIO_SECRET_KEY: minioprotected12345
    expose:
      - 9000
    command: "--compat server /data"
    volumes:
      - type: volume
        source: minio-protected-data
        target: /data
    restart: always

  web:
    image: grandchallenge/web-test:latest
    environment:
      <<: *postgresenv
      <<: &private_storage_credentials
        PRIVATE_S3_STORAGE_ACCESS_KEY: minioprivate
        PRIVATE_S3_STORAGE_SECRET_KEY: minioprivate12345
      <<: &protected_storage_credentials
        PROTECTED_S3_STORAGE_ACCESS_KEY: minioprotected
        PROTECTED_S3_STORAGE_SECRET_KEY: minioprotected12345
      <<: &protected_storage_connections
        PROTECTED_S3_STORAGE_BUCKET_NAME: grand-challenge-protected
        PROTECTED_S3_STORAGE_ENDPOINT_URL: http://minio-protected:9000
      GOOGLE_ANALYTICS_ID: UA-XXXXX-Y
    # Use werkzeug debugger in dev, this should never be used in production!
    # https://django-extensions.readthedocs.io/en/latest/runserver_plus.html
    command: >-
      bash -c "
      python manage.py migrate
      && python manage.py check_permissions
      && python manage.py init_gc_demo
      && python manage.py runserver_plus 0.0.0.0:8000 --nopin
      "
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      memcached:
        condition: service_started
    volumes:
      - type: volume
        source: media
        target: /dbox/Dropbox/media/
      # Bind the app directory for live reloading in development
      - type: bind
        source: ./app
        target: /app/
      # The docker socket is only needed for testing
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
    group_add:
      - 999 # The docker group is only needed for testing
    healthcheck:
      test: ["CMD-SHELL", "curl http://web:8000/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  http:
    image: grandchallenge/http:latest
    environment:
      SERVER_NAME: gc.localhost
      SENDFILE_STATUS: 'off'
      WORKSTATION_PROXY_HOSTNAME: 'workstation-proxy'
      WORKSTATION_PROXY_HTTP_PORT: '8000'
      WORKSTATION_PROXY_WEBSOCKET_PORT: '8001'
      <<: *protected_storage_connections
    command: >-
        bash -c "envsubst '$$SERVER_NAME $$SENDFILE_STATUS $$PROTECTED_S3_STORAGE_BUCKET_NAME $$PROTECTED_S3_STORAGE_ENDPOINT_URL $$WORKSTATION_PROXY_HOSTNAME $$WORKSTATION_PROXY_HTTP_PORT $$WORKSTATION_PROXY_WEBSOCKET_PORT' < /tmp/nginx.conf.template > /etc/nginx/nginx.conf
        && openssl req -x509 -newkey rsa:4096 -keyout /etc/ssl/private/$$SERVER_NAME.key -out /etc/ssl/certs/$$SERVER_NAME.crt -days 365 -nodes -subj '/CN=$$SERVER_NAME'
        && nginx -g 'daemon off;'"
    restart: always
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      web:
        condition: service_healthy
      workstation-proxy:
        condition: service_started
    volumes:
      - type: volume
        source: media
        target: /dbox/Dropbox/media/
        read_only: true

  memcached:
    image: memcached:1.5
    restart: always

  redis:
    image: redis:4.0
    command: redis-server --appendonly yes
    restart: always
    ports:
      - "6379:6379" # Only required for running django locally

  celery_worker:
    image: grandchallenge/web-test:latest
    environment:
      <<: *postgresenv
      <<: *private_storage_credentials
      <<: *protected_storage_credentials
      <<: *protected_storage_connections
    restart: always
    command: "celery -A config worker -l info -c 1"
    scale: 1
    hostname: "celery-worker"
    depends_on:
      web:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      # Bind the app directory for live reloading in development
      - type: bind
        source: ./app
        target: /app/

  celery_worker_evaluation:
    image: grandchallenge/web-test:latest
    environment:
      <<: *postgresenv
      <<: *private_storage_credentials
      <<: *protected_storage_credentials
      <<: *protected_storage_connections
    restart: always
    command: "celery -A config worker -l info -Q evaluation,images,workstations -c 1"
    scale: 1
    hostname: "celery-worker-evaluation"
    depends_on:
      web:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      # The docker socket is only needed for testing
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
      # Bind the app directory for live reloading in development
      - type: bind
        source: ./app
        target: /app/
    group_add:
      - 999

  celery_worker_gpu:
    image: grandchallenge/web-test:latest
    environment:
      <<: *postgresenv
      <<: *private_storage_credentials
      <<: *protected_storage_credentials
      <<: *protected_storage_connections
    restart: always
    command: "celery -A config worker -l info -Q gpu -c 1"
    scale: 1
    hostname: "celery-worker-gpu"
    depends_on:
      web:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      # The docker socket is only needed for testing
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
      # Bind the app directory for live reloading in development
      - type: bind
        source: ./app
        target: /app/

  celery_beat:
    image: grandchallenge/web-test:latest
    environment:
      <<: *postgresenv
    restart: always
    command: >-
        bash -c "
        rm -f /tmp/celerybeat.pid
        && celery -A config beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler --pidfile=\"/tmp/celerybeat.pid\"
        "
    depends_on:
      web:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  workstation-proxy:
    image: traefik:1.7
    ports:
      - "8081:8081"
    command:
      - "--defaultEntryPoints=http,websocket"
      - "--entrypoints=Name:traefik Address::8081"
      - "--entrypoints=Name:ping Address::8082"
      - "--entrypoints=Name:http Address::8000"
      - "--entrypoints=Name:websocket Address::8001"
      - "--api"
      - "--api.dashboard=true"
      - "--api.entryPoint=traefik"
      - "--ping"
      - "--ping.entryPoint=traefik"
      - "--docker"
      - "--docker.domain=docker.localhost"
      - "--docker.endpoint=unix:///var/run/docker.sock"
      - "--docker.exposedbydefault=false"
      - "--docker.watch=true"
      - "--docker.network=workstations"
    volumes:
      # So that Traefik can listen to the Docker events
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
    networks:
      - default
      - workstations

  flower:
    image: mher/flower
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_started
    restart: always

volumes:
  media:
  minio-private-data:
  minio-protected-data:

networks:
  default:
  workstations:
