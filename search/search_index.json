{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Grand Challenge API Client","text":"<p>Python client for the grand-challenge.org REST API</p> <p> </p>"},{"location":"#features","title":"Features","text":"<p>This client library is a handy way to interact with the REST API for grand-challenge.org from python, and provides some convenience methods.</p> <p>You can use the libarary to automate things like:</p> <ul> <li>Uploading values as Display Sets in a Reader Study</li> <li>Uploading values as Archive Items in an Archive</li> <li>Uploading values for an algorithm to predict on</li> <li>Downloading results from an algorithm prediction</li> </ul> <p> Getting Started</p>"},{"location":"getting-started/","title":"Getting started with gcapi","text":""},{"location":"getting-started/#install-gcapi","title":"Install gcapi","text":"<p>First, let's install the newest version of gcapi with pip.</p> <pre><code>$ pip install gcapi\n</code></pre>"},{"location":"getting-started/#retrieve-a-personal-api-token","title":"Retrieve a personal API token","text":"<p>In order to start using gcapi you need to get a personal Grand-Challenge API token. An API token is a unique identifier that is used to authenticate you on the API.</p> <p>A full token looks like this: <pre><code>\"df41b403eac8ca19c80f04c3f129809f5e9635f65fbead1aa3cafccc7e865c5a\"\n</code></pre></p> <p>You can generate the token yourself on Grand Challenge. After logging in, navigate to Your Profile \u279e Manage API Tokens and click on Create a Token. Once you click Save, the token will be generated for you and displayed in a blue ribbon at the top of the page.</p> <p>You will only be able to see this token once, so store it safely in a password manager for later use. Please treat your API token like a password and remove the key if necessary.</p>"},{"location":"getting-started/#initiate-your-client","title":"Initiate your client","text":"<p>Import the necessary library:</p> <pre><code>import gcapi\n</code></pre> <p>Then add your personal Grand-Challenge API token and initiate the client:</p> <pre><code>token = 'df41b4...'\nclient = gcapi.Client(token=token)\n</code></pre> <p>You can then use the client to interact with Grand Challenge.</p> <p>Any request made to Grand Challenge will have the token added for authentication.</p>"},{"location":"getting-started/#on-object-identifiers","title":"On object identifiers","text":"<p>To interact with an algorithm, reader study, archive or any other object on Grand Challenge, you must have the proper identifier of that object. Identifiers come in the shape of a primary key, a slug, or an API URL.</p>"},{"location":"getting-started/#primary-keys","title":"Primary keys","text":"<p>Primary keys ('pk') are very common in databases and are used to identify specific rows in a table.</p> <p>Typically, these can be a UUID (e.g. <code>\"4a46b539-119b-4889-90bf-18818ffa3dd8\"</code>) but in some rare cases a simple integer (e.g. <code>42</code>).</p>"},{"location":"getting-started/#slugs","title":"Slugs","text":"<p>Slugs are human-readable identifiers and are typically built from the name of your archive, algorithm, or reader study on Grand Challenge. They can be found in the URL of the respective pages on Grand Challenge.</p> <p>For instance, if you would like to identify the algorithm at <code>https://grand-challenge.org/algorithms/corads-ai/</code>, the slug of the algorithm would be <code>\"corads-ai\"</code>.</p>"},{"location":"getting-started/#api-urls","title":"API URLs","text":"<p>When retrieving objects from Grand Challenge that, in turn, reference other objects these references are commonly made via the use of an API URL.</p> <p>For instance, a reader-study <code>Answer</code> will reference the display set it belongs to with: <code>\"https://grand-challenge.org/api/v1/reader-studies/display-sets/41b79371-7bdc-45df-8e00-add3982f16b9/\"</code></p>"},{"location":"getting-started/#access-rights","title":"Access rights","text":"<p>To interact with an algorithm, reader study, archive or other objects on Grand Challenge, you must have the proper access rights. If you do not have the proper access rights the Grand Challenge API will often report back it simply cannot find the object in question.</p> <p>Unless you are the editor of the object, you will first need to request access to the desired algorithm/reader study/archive.</p> <p>Requesting access can be done by navigating to the respective object page on Grand Challenge, find and press the Request access button.</p> <p>Note</p> <p>Responding to an access request is generally a manual step for the object owners and might take a couple of days! Please be patient.</p>"},{"location":"license/","title":"License","text":"<pre><code>                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n</code></pre> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <pre><code>  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n</code></pre> <p>Copyright 2019 Radboud University Medical Center</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at</p> <pre><code>   http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.</p>"},{"location":"api/algorithm_images/","title":"<code>Client.algorithm_images</code>","text":""},{"location":"api/algorithm_images/#gcapi.client.AlgorithmImagesAPI.detail","title":"detail","text":"<pre><code>detail(\n    pk: Optional[str] = None,\n    api_url: Optional[str] = None,\n    **params: Any\n) -&gt; gcapi.models.AlgorithmImage\n</code></pre> <p>Retrieve a specific resource by primary key, URL, or search parameters.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Primary key of the resource to retrieve.</p> </li> <li> <code>api_url</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Direct API URL of the resource to retrieve.</p> </li> <li> <code>**params</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Search parameters to find a unique resource, such as <code>slug=\"your-slug\"</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>AlgorithmImage</code>           \u2013            <p>The requested resource instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If more than one or none of pk, api_url, or params are specified.</p> </li> <li> <code>ObjectNotFound</code>             \u2013            <p>If no resource is found matching the criteria.</p> </li> <li> <code>MultipleObjectsReturned</code>             \u2013            <p>If multiple resources match the search parameters.</p> </li> </ul>"},{"location":"api/algorithm_images/#gcapi.client.AlgorithmImagesAPI.iterate_all","title":"iterate_all","text":"<pre><code>iterate_all(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; Iterator[gcapi.models.AlgorithmImage]\n</code></pre> <p>Iterate through all resources from the API endpoint across all pages.</p> <p>This method automatically handles pagination and yields individual resources from all pages until all resources have been retrieved.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API requests.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>AlgorithmImage</code>           \u2013            <p>Individual resources from the API endpoint.</p> </li> </ul>"},{"location":"api/algorithm_images/#gcapi.client.AlgorithmImagesAPI.list","title":"list","text":"<pre><code>list(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; list[gcapi.models.AlgorithmImage]\n</code></pre> <p>Retrieve a raw list of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[AlgorithmImage]</code>           \u2013            <p>Raw JSON response from the API containing the list of resources.</p> </li> </ul>"},{"location":"api/algorithm_images/#gcapi.client.AlgorithmImagesAPI.page","title":"page","text":"<pre><code>page(\n    offset: int = 0,\n    limit: int = 100,\n    params: Optional[dict[str, Any]] = None,\n) -&gt; PageResult[gcapi.models.AlgorithmImage]\n</code></pre> <p>Retrieve a paginated set of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>offset</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The starting index for pagination (zero-based).</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>100</code> )           \u2013            <p>The maximum number of results to return in this page.</p> </li> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Additional query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PageResult[AlgorithmImage]</code>           \u2013            <p>A paginated result containing the requested resources and metadata.</p> </li> </ul>"},{"location":"api/algorithm_jobs/","title":"<code>Client.algorithm_jobs</code>","text":""},{"location":"api/algorithm_jobs/#gcapi.client.AlgorithmJobsAPI.by_input_image","title":"by_input_image","text":"<pre><code>by_input_image(\n    pk: str,\n) -&gt; Iterator[gcapi.models.HyperlinkedJob]\n</code></pre> <p>Get algorithm jobs filtered by input image.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>str</code>)           \u2013            <p>Primary key of the input image to filter jobs by.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>HyperlinkedJob</code>           \u2013            <p>Algorithm job instances that use the specified input image.</p> </li> </ul>"},{"location":"api/algorithm_jobs/#gcapi.client.AlgorithmJobsAPI.create","title":"create","text":"<pre><code>create(**kwargs: Any) -&gt; gcapi.models.JobPost\n</code></pre> <p>Create a new resource via the API.</p> <p>Parameters:</p> <ul> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Field values for the new resource.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>JobPost</code>           \u2013            <p>The created resource instance.</p> </li> </ul>"},{"location":"api/algorithm_jobs/#gcapi.client.AlgorithmJobsAPI.delete","title":"delete","text":"<pre><code>delete(pk: str) -&gt; Any\n</code></pre> <p>Delete a resource from the API.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>str</code>)           \u2013            <p>Primary key of the resource to delete.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>           \u2013            <p>Response from the delete operation.</p> </li> </ul>"},{"location":"api/algorithm_jobs/#gcapi.client.AlgorithmJobsAPI.detail","title":"detail","text":"<pre><code>detail(\n    pk: Optional[str] = None,\n    api_url: Optional[str] = None,\n    **params: Any\n) -&gt; gcapi.models.HyperlinkedJob\n</code></pre> <p>Retrieve a specific resource by primary key, URL, or search parameters.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Primary key of the resource to retrieve.</p> </li> <li> <code>api_url</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Direct API URL of the resource to retrieve.</p> </li> <li> <code>**params</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Search parameters to find a unique resource, such as <code>slug=\"your-slug\"</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>HyperlinkedJob</code>           \u2013            <p>The requested resource instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If more than one or none of pk, api_url, or params are specified.</p> </li> <li> <code>ObjectNotFound</code>             \u2013            <p>If no resource is found matching the criteria.</p> </li> <li> <code>MultipleObjectsReturned</code>             \u2013            <p>If multiple resources match the search parameters.</p> </li> </ul>"},{"location":"api/algorithm_jobs/#gcapi.client.AlgorithmJobsAPI.iterate_all","title":"iterate_all","text":"<pre><code>iterate_all(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; Iterator[gcapi.models.HyperlinkedJob]\n</code></pre> <p>Iterate through all resources from the API endpoint across all pages.</p> <p>This method automatically handles pagination and yields individual resources from all pages until all resources have been retrieved.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API requests.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>HyperlinkedJob</code>           \u2013            <p>Individual resources from the API endpoint.</p> </li> </ul>"},{"location":"api/algorithm_jobs/#gcapi.client.AlgorithmJobsAPI.list","title":"list","text":"<pre><code>list(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; list[gcapi.models.HyperlinkedJob]\n</code></pre> <p>Retrieve a raw list of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[HyperlinkedJob]</code>           \u2013            <p>Raw JSON response from the API containing the list of resources.</p> </li> </ul>"},{"location":"api/algorithm_jobs/#gcapi.client.AlgorithmJobsAPI.page","title":"page","text":"<pre><code>page(\n    offset: int = 0,\n    limit: int = 100,\n    params: Optional[dict[str, Any]] = None,\n) -&gt; PageResult[gcapi.models.HyperlinkedJob]\n</code></pre> <p>Retrieve a paginated set of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>offset</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The starting index for pagination (zero-based).</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>100</code> )           \u2013            <p>The maximum number of results to return in this page.</p> </li> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Additional query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PageResult[HyperlinkedJob]</code>           \u2013            <p>A paginated result containing the requested resources and metadata.</p> </li> </ul>"},{"location":"api/algorithm_jobs/#gcapi.client.AlgorithmJobsAPI.partial_update","title":"partial_update","text":"<pre><code>partial_update(\n    pk: str, **kwargs: Any\n) -&gt; gcapi.models.JobPost\n</code></pre> <p>Partially update an existing resource with only specified fields.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>str</code>)           \u2013            <p>Primary key of the resource to update.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Partial field values for the resource update.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>JobPost</code>           \u2013            <p>The updated resource instance.</p> </li> </ul>"},{"location":"api/algorithm_jobs/#gcapi.client.AlgorithmJobsAPI.update","title":"update","text":"<pre><code>update(pk: str, **kwargs: Any) -&gt; gcapi.models.JobPost\n</code></pre> <p>Update an existing resource with a complete replacement.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>str</code>)           \u2013            <p>Primary key of the resource to update.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Complete field values for the resource update.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>JobPost</code>           \u2013            <p>The updated resource instance.</p> </li> </ul>"},{"location":"api/algorithms/","title":"<code>Client.algorithms</code>","text":""},{"location":"api/algorithms/#gcapi.client.AlgorithmsAPI.detail","title":"detail","text":"<pre><code>detail(\n    pk: Optional[str] = None,\n    api_url: Optional[str] = None,\n    **params: Any\n) -&gt; gcapi.models.Algorithm\n</code></pre> <p>Retrieve a specific resource by primary key, URL, or search parameters.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Primary key of the resource to retrieve.</p> </li> <li> <code>api_url</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Direct API URL of the resource to retrieve.</p> </li> <li> <code>**params</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Search parameters to find a unique resource, such as <code>slug=\"your-slug\"</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Algorithm</code>           \u2013            <p>The requested resource instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If more than one or none of pk, api_url, or params are specified.</p> </li> <li> <code>ObjectNotFound</code>             \u2013            <p>If no resource is found matching the criteria.</p> </li> <li> <code>MultipleObjectsReturned</code>             \u2013            <p>If multiple resources match the search parameters.</p> </li> </ul>"},{"location":"api/algorithms/#gcapi.client.AlgorithmsAPI.iterate_all","title":"iterate_all","text":"<pre><code>iterate_all(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; Iterator[gcapi.models.Algorithm]\n</code></pre> <p>Iterate through all resources from the API endpoint across all pages.</p> <p>This method automatically handles pagination and yields individual resources from all pages until all resources have been retrieved.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API requests.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>Algorithm</code>           \u2013            <p>Individual resources from the API endpoint.</p> </li> </ul>"},{"location":"api/algorithms/#gcapi.client.AlgorithmsAPI.list","title":"list","text":"<pre><code>list(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; list[gcapi.models.Algorithm]\n</code></pre> <p>Retrieve a raw list of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Algorithm]</code>           \u2013            <p>Raw JSON response from the API containing the list of resources.</p> </li> </ul>"},{"location":"api/algorithms/#gcapi.client.AlgorithmsAPI.page","title":"page","text":"<pre><code>page(\n    offset: int = 0,\n    limit: int = 100,\n    params: Optional[dict[str, Any]] = None,\n) -&gt; PageResult[gcapi.models.Algorithm]\n</code></pre> <p>Retrieve a paginated set of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>offset</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The starting index for pagination (zero-based).</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>100</code> )           \u2013            <p>The maximum number of results to return in this page.</p> </li> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Additional query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PageResult[Algorithm]</code>           \u2013            <p>A paginated result containing the requested resources and metadata.</p> </li> </ul>"},{"location":"api/archive_items/","title":"<code>Client.archive_items</code>","text":""},{"location":"api/archive_items/#gcapi.client.ArchiveItemsAPI.create","title":"create","text":"<pre><code>create(**kwargs: Any) -&gt; gcapi.models.ArchiveItemPost\n</code></pre> <p>Create a new resource via the API.</p> <p>Parameters:</p> <ul> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Field values for the new resource.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ArchiveItemPost</code>           \u2013            <p>The created resource instance.</p> </li> </ul>"},{"location":"api/archive_items/#gcapi.client.ArchiveItemsAPI.delete","title":"delete","text":"<pre><code>delete(pk: str) -&gt; Any\n</code></pre> <p>Delete a resource from the API.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>str</code>)           \u2013            <p>Primary key of the resource to delete.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>           \u2013            <p>Response from the delete operation.</p> </li> </ul>"},{"location":"api/archive_items/#gcapi.client.ArchiveItemsAPI.detail","title":"detail","text":"<pre><code>detail(\n    pk: Optional[str] = None,\n    api_url: Optional[str] = None,\n    **params: Any\n) -&gt; gcapi.models.ArchiveItem\n</code></pre> <p>Retrieve a specific resource by primary key, URL, or search parameters.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Primary key of the resource to retrieve.</p> </li> <li> <code>api_url</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Direct API URL of the resource to retrieve.</p> </li> <li> <code>**params</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Search parameters to find a unique resource, such as <code>slug=\"your-slug\"</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ArchiveItem</code>           \u2013            <p>The requested resource instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If more than one or none of pk, api_url, or params are specified.</p> </li> <li> <code>ObjectNotFound</code>             \u2013            <p>If no resource is found matching the criteria.</p> </li> <li> <code>MultipleObjectsReturned</code>             \u2013            <p>If multiple resources match the search parameters.</p> </li> </ul>"},{"location":"api/archive_items/#gcapi.client.ArchiveItemsAPI.iterate_all","title":"iterate_all","text":"<pre><code>iterate_all(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; Iterator[gcapi.models.ArchiveItem]\n</code></pre> <p>Iterate through all resources from the API endpoint across all pages.</p> <p>This method automatically handles pagination and yields individual resources from all pages until all resources have been retrieved.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API requests.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>ArchiveItem</code>           \u2013            <p>Individual resources from the API endpoint.</p> </li> </ul>"},{"location":"api/archive_items/#gcapi.client.ArchiveItemsAPI.list","title":"list","text":"<pre><code>list(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; list[gcapi.models.ArchiveItem]\n</code></pre> <p>Retrieve a raw list of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[ArchiveItem]</code>           \u2013            <p>Raw JSON response from the API containing the list of resources.</p> </li> </ul>"},{"location":"api/archive_items/#gcapi.client.ArchiveItemsAPI.page","title":"page","text":"<pre><code>page(\n    offset: int = 0,\n    limit: int = 100,\n    params: Optional[dict[str, Any]] = None,\n) -&gt; PageResult[gcapi.models.ArchiveItem]\n</code></pre> <p>Retrieve a paginated set of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>offset</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The starting index for pagination (zero-based).</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>100</code> )           \u2013            <p>The maximum number of results to return in this page.</p> </li> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Additional query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PageResult[ArchiveItem]</code>           \u2013            <p>A paginated result containing the requested resources and metadata.</p> </li> </ul>"},{"location":"api/archive_items/#gcapi.client.ArchiveItemsAPI.partial_update","title":"partial_update","text":"<pre><code>partial_update(\n    pk: str, **kwargs: Any\n) -&gt; gcapi.models.ArchiveItemPost\n</code></pre> <p>Partially update an existing resource with only specified fields.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>str</code>)           \u2013            <p>Primary key of the resource to update.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Partial field values for the resource update.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ArchiveItemPost</code>           \u2013            <p>The updated resource instance.</p> </li> </ul>"},{"location":"api/archive_items/#gcapi.client.ArchiveItemsAPI.update","title":"update","text":"<pre><code>update(\n    pk: str, **kwargs: Any\n) -&gt; gcapi.models.ArchiveItemPost\n</code></pre> <p>Update an existing resource with a complete replacement.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>str</code>)           \u2013            <p>Primary key of the resource to update.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Complete field values for the resource update.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ArchiveItemPost</code>           \u2013            <p>The updated resource instance.</p> </li> </ul>"},{"location":"api/archives/","title":"<code>Client.archives</code>","text":""},{"location":"api/archives/#gcapi.client.ArchivesAPI.detail","title":"detail","text":"<pre><code>detail(\n    pk: Optional[str] = None,\n    api_url: Optional[str] = None,\n    **params: Any\n) -&gt; gcapi.models.Archive\n</code></pre> <p>Retrieve a specific resource by primary key, URL, or search parameters.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Primary key of the resource to retrieve.</p> </li> <li> <code>api_url</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Direct API URL of the resource to retrieve.</p> </li> <li> <code>**params</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Search parameters to find a unique resource, such as <code>slug=\"your-slug\"</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Archive</code>           \u2013            <p>The requested resource instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If more than one or none of pk, api_url, or params are specified.</p> </li> <li> <code>ObjectNotFound</code>             \u2013            <p>If no resource is found matching the criteria.</p> </li> <li> <code>MultipleObjectsReturned</code>             \u2013            <p>If multiple resources match the search parameters.</p> </li> </ul>"},{"location":"api/archives/#gcapi.client.ArchivesAPI.iterate_all","title":"iterate_all","text":"<pre><code>iterate_all(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; Iterator[gcapi.models.Archive]\n</code></pre> <p>Iterate through all resources from the API endpoint across all pages.</p> <p>This method automatically handles pagination and yields individual resources from all pages until all resources have been retrieved.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API requests.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>Archive</code>           \u2013            <p>Individual resources from the API endpoint.</p> </li> </ul>"},{"location":"api/archives/#gcapi.client.ArchivesAPI.list","title":"list","text":"<pre><code>list(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; list[gcapi.models.Archive]\n</code></pre> <p>Retrieve a raw list of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Archive]</code>           \u2013            <p>Raw JSON response from the API containing the list of resources.</p> </li> </ul>"},{"location":"api/archives/#gcapi.client.ArchivesAPI.page","title":"page","text":"<pre><code>page(\n    offset: int = 0,\n    limit: int = 100,\n    params: Optional[dict[str, Any]] = None,\n) -&gt; PageResult[gcapi.models.Archive]\n</code></pre> <p>Retrieve a paginated set of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>offset</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The starting index for pagination (zero-based).</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>100</code> )           \u2013            <p>The maximum number of results to return in this page.</p> </li> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Additional query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PageResult[Archive]</code>           \u2013            <p>A paginated result containing the requested resources and metadata.</p> </li> </ul>"},{"location":"api/client_methods/","title":"Client","text":"<p>The Grand Challenge API client.</p>"},{"location":"api/client_methods/#gcapi.client.Client.__call__","title":"__call__","text":"<pre><code>__call__(\n    method=\"GET\",\n    url=\"\",\n    path=\"\",\n    params=None,\n    json=None,\n    extra_headers=None,\n    files=None,\n    data=None,\n    follow_redirects=False,\n) -&gt; Any\n</code></pre> <p>Make an HTTP request to the API.</p> <p>Parameters:</p> <ul> <li> <code>method</code>               (<code>str</code>, default:                   <code>'GET'</code> )           \u2013            <p>HTTP method to use, by default \"GET\".</p> </li> <li> <code>url</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Full URL to request. If provided, path is ignored.</p> </li> <li> <code>path</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Path relative to base_url. Ignored if url is provided.</p> </li> <li> <code>params</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the request.</p> </li> <li> <code>json</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>JSON data to send in the request body.</p> </li> <li> <code>extra_headers</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>Additional headers to include in the request.</p> </li> <li> <code>files</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>Files to upload with the request.</p> </li> <li> <code>data</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>Form data to send in the request body.</p> </li> <li> <code>follow_redirects</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to follow HTTP redirects, by default False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code> (              <code>Any</code> )          \u2013            <p>JSON response data if Content-Type is application/json,</p> </li> <li> <code>Any</code>           \u2013            <p>otherwise the raw response object.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>HTTPStatusError</code>             \u2013            <p>If the HTTP request fails with a non-2xx status code.</p> </li> </ul>"},{"location":"api/client_methods/#gcapi.client.Client.__init__","title":"__init__","text":"<pre><code>__init__(\n    token: str = \"\",\n    base_url: str = \"https://grand-challenge.org/api/v1/\",\n    verify: bool = True,\n    timeout: float = 60.0,\n    retry_strategy: Optional[\n        Callable[[], BaseRetryStrategy]\n    ] = None,\n)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>token</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Authorization token for API access. If not provided, will be read from GRAND_CHALLENGE_AUTHORIZATION environment variable.</p> </li> <li> <code>base_url</code>               (<code>str</code>, default:                   <code>'https://grand-challenge.org/api/v1/'</code> )           \u2013            <p>Base URL for the API, by default \"https://grand-challenge.org/api/v1/\".</p> </li> <li> <code>verify</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to verify SSL certificates, by default True.</p> </li> <li> <code>timeout</code>               (<code>float</code>, default:                   <code>60.0</code> )           \u2013            <p>Request timeout in seconds, by default 60.0.</p> </li> <li> <code>retry_strategy</code>               (<code>callable</code>, default:                   <code>None</code> )           \u2013            <p>Factory function that returns a retry strategy instance. If None, uses SelectiveBackoffStrategy with default parameters.</p> </li> </ul>"},{"location":"api/client_methods/#gcapi.client.Client.add_cases_to_archive","title":"add_cases_to_archive","text":"<pre><code>add_cases_to_archive(\n    *,\n    archive: Union[str, Archive],\n    archive_items: list[SocketValueSetDescription]\n) -&gt; list[str]\n</code></pre> <p>This function takes an archive slug or model and a list of archive item descriptions and creates the archive item to be used on the platform.</p> Re-using existing images <p>Existing images on Grand Challenge can be re-used by either passing an API url, or a socket value (archive item):</p> <pre><code>image = client.images.detail(pk=\"ad5...\")\nai = client.archive_items.detail(pk=\"f5...\")\nsocket_value = ai.values[0]\n\narchive_items = [\n    {\n        \"slug_0\": image.api_url,\n        \"slug_1\": socket_value,\n        \"slug_2\": socket_value.image,\n    }\n]\n</code></pre> <p>One can also provide a same-socket socket value:</p> <pre><code>ai = client.archive_items.detail(pk=\"f5...\")\narchive_items = [\n    {\n        \"slug_0\": ai.values[0],\n        \"slug_1\": ai.values[1],\n        \"slug_2\": \"some_local_file\",\n    },\n]\n</code></pre> <p>Parameters:</p> <ul> <li> <code>archive</code>               (<code>Union[str, Archive]</code>)           \u2013            <p>slug for the archive (e.g. <code>\"i-am-an-archive\"</code>). You can find this readily in the URL you use to visit the archive page: <code>https://grand-challenge.org/archives/i-am-an-archive/</code></p> </li> <li> <code>archive_items</code>               (<code>list[SocketValueSetDescription]</code>)           \u2013            <p>The format for the descriptions of archive items are as follows:</p> <pre><code>[\n    {\n        \"slug_0\": [\"filepath_0\", ...],\n        \"slug_1\": \"filepath_0\",\n        \"slug_2\": pathlib.Path(\"filepath_0\"),\n        ...\n        \"slug_n\": {\"json\": \"value\"}\n\n    },\n    ...\n]\n</code></pre> <p>Where the file paths are local paths to the files making up a single image. For file-kind sockets the file path can only reference a single file. For json-kind sockets any value that is valid for the sockets can directly be passed, or a filepath to a file that contain the value can be provided.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>The pks of the newly created archive items.</p> </li> </ul>"},{"location":"api/client_methods/#gcapi.client.Client.add_cases_to_reader_study","title":"add_cases_to_reader_study","text":"<pre><code>add_cases_to_reader_study(\n    *,\n    reader_study: Union[str, ReaderStudy],\n    display_sets: list[SocketValueSetDescription]\n) -&gt; list[str]\n</code></pre> <p>This function takes an reader-study slug or model and a list of display-set descriptions. It then creates the display-sets for the reader study.</p> Re-using existing images <p>Existing images on Grand Challenge can be re-used by either passing an API url, or a socket value (display set):</p> <pre><code>    image = client.images.detail(pk=\"ad5...\")\n    ds = client.reader_studies.display_sets.detail(pk=\"f5...\")\n    socket_value = ds.values[0]\n\n    display_sets = [\n        {\n            \"slug_0\": image.api_url,\n            \"slug_1\": socket_value,\n            \"slug_2\": socket_value.image,\n        }\n    ]\n</code></pre> <p>One can also provide a same-socket socket value:</p> <pre><code>ds = client.reader_studies.display_sets.detail(pk=\"f5...\")\ndisplay_sets = [\n    {\n        \"slug_0\": ds.values[0],\n        \"slug_1\": ds.values[1],\n        \"slug_2\": \"some_local_file\",\n    },\n]\n</code></pre> <p>Parameters:</p> <ul> <li> <code>reader_study</code>               (<code>Union[str, ReaderStudy]</code>)           \u2013            <p>slug for the reader study (e.g. <code>\"i-am-a-reader-study\"</code>). You can find this readily in the URL you use to visit the reader-study page: <code>https://grand-challenge.org/reader-studies/i-am-a-reader-study/</code></p> </li> <li> <code>display_sets</code>               (<code>list[SocketValueSetDescription]</code>)           \u2013            <p>The format for the descriptions of display sets are as follows:</p> <pre><code>[\n    {\n        \"slug_0\": [\"filepath_0\", ...],\n        \"slug_1\": \"filepath_0\",\n        \"slug_2\": pathlib.Path(\"filepath_0\"),\n        ...\n        \"slug_n\": {\"json\": \"value\"}\n\n    },\n    ...\n]\n</code></pre> <p>Where the file paths are local paths to the files making up a single image. For file-kind sockets the file path can only reference a single file. For json-kind sockets any value that is valid for the sockets can directly be passed, or a filepath to a file that contain the value can be provided.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>The pks of the newly created display sets.</p> </li> </ul>"},{"location":"api/client_methods/#gcapi.client.Client.run_external_job","title":"run_external_job","text":"<pre><code>run_external_job(\n    *,\n    algorithm: Union[str, Algorithm],\n    inputs: SocketValueSetDescription\n) -&gt; gcapi.models.JobPost\n</code></pre> <p>Starts an algorithm job with the provided inputs.</p> Getting the interfaces of an algorithm <p>You can get the interfaces (i.e. all possible socket sets) of an algorithm by calling, and inspecting the .interface of the result of: <pre><code>client.algorithms.detail(slug=\"corads-ai\")\n</code></pre></p> Re-using existing images <p>Existing images on Grand Challenge can be re-used by either passing an API url, or a socket value:</p> <pre><code>image = client.images.detail(pk=\"ad5...\")\n# Alternatively, you can also use:\nai = client.archive_items.detail(pk=\"f5...\")\nsocket_value = ai.values[0]\n\narchive_items = [\n    {\n        \"slug_0\": image.api_url,\n        \"slug_1\": socket_value,\n        \"slug_2\": socket_value.image.api_url,\n    }\n]\n</code></pre> <p>One can also provide a same-socket socket value:</p> <pre><code>ai = client.archive_items.detail(pk=\"f5...\")\narchive_items = [\n    {\n        \"slug_0\": ai.values[0],\n        \"slug_1\": ai.values[1],\n        \"slug_2\": \"some_local_file\",\n    },\n]\n</code></pre> <p>Parameters:</p> <ul> <li> <code>algorithm</code>               (<code>Union[str, Algorithm]</code>)           \u2013            <p>You can find this in the url of the algorithm that you want to use. For instance, if you want to use the algorithm at: <code>https://grand-challenge.org/algorithms/corads-ai/</code> the slug for this algorithm is <code>\"corads-ai\"</code>.</p> <p>inputs (SocketValueSetDescription): For each input socket defined on the algorithm you need to provide a key-value pair, the key being the slug of the socket, the value being the value for the socket::</p> <pre><code>{\n    \"slug_0\": [\"filepath_0\", ...],\n    \"slug_1\": \"filepath_0\",\n    \"slug_2\": pathlib.Path(\"filepath_0\"),\n    ...\n    \"slug_n\": {\"json\": \"value\"},\n}\n</code></pre> <p>Where the file paths are local paths to the files making up a single image. For file-kind sockets the file path can only reference a single file. For json-kind sockets any value that is valid for the sockets can directly be passed, or a filepath to a file that contain the value can be provided.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>JobPost</code>           \u2013            <p>The created job</p> </li> </ul>"},{"location":"api/client_methods/#gcapi.client.Client.update_archive_item","title":"update_archive_item","text":"<pre><code>update_archive_item(\n    *,\n    archive_item_pk: str,\n    values: SocketValueSetDescription\n) -&gt; gcapi.models.ArchiveItemPost\n</code></pre> <p>This function updates an existing archive item with the provided values and returns the updated archive item.</p> <p>You can use this function, for example, to add metadata to an archive item.</p> <p>If you provide a value or file for an existing socket of the archive item, the old value will be overwritten by the new one, hence allowing you to update existing archive item values.</p> Example <p>First, retrieve the archive items from your archive:</p> <pre><code>archive = client.archives.detail(slug=\"...\")\nitems = list(\n    client.archive_items.iterate_all(params={\"archive\": archive.pk})\n)\n</code></pre> <p>To then add, for example, a PDF report and a lung volume value to the first archive item , provide the socket slugs together with the respective value or file path as follows:</p> <pre><code>client.update_archive_item(\n    archive_item_pk=items[0].id,\n    values={\n        \"report\": [...],\n        \"lung-volume\": 1.9,\n    },\n)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>archive_item_pk</code>               (<code>str</code>)           \u2013            <p>The primary key of the archive item to update.</p> </li> <li> <code>values</code>               (<code>SocketValueSetDescription</code>)           \u2013            <p>The values to update the archive item with.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ArchiveItemPost</code>           \u2013            <p>The updated archive item</p> </li> </ul>"},{"location":"api/client_methods/#gcapi.client.Client.update_display_set","title":"update_display_set","text":"<pre><code>update_display_set(\n    *,\n    display_set_pk: str,\n    values: SocketValueSetDescription\n) -&gt; gcapi.models.DisplaySetPost\n</code></pre> <p>This function updates an existing display set with the provided values and returns the updated display set.</p> <p>You can use this function, for example, to add metadata to a display set.</p> <p>If you provide a value or file for an existing interface of the display set, the old value will be overwritten by the new one, hence allowing you to update existing display-set values.</p> Example <p>First, retrieve the display_set from your archive:</p> <pre><code>reader_study = client.reader_studies.detail(slug=\"...\")\nitems = list(\n    client.reader_studies.display_sets.iterate_all(\n        params={\"reader_study\": reader_study.pk}\n    )\n)\n</code></pre> <p>To then add, for example, a PDF report and a lung volume value to the first display set , provide the interface slugs together with the respective value or file path as follows:</p> <pre><code>client.update_display_set(\n    display_set_pk=items[0].id,\n    values={\n        \"report\": [...],\n        \"lung-volume\": 1.9,\n    },\n)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>display_set_pk</code>               (<code>str</code>)           \u2013            <p>The primary key of the display set to update.</p> </li> <li> <code>values</code>               (<code>SocketValueSetDescription</code>)           \u2013            <p>The values to update the display set with.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DisplaySetPost</code>           \u2013            <p>The updated display set</p> </li> </ul>"},{"location":"api/images/","title":"<code>Client.images</code>","text":""},{"location":"api/images/#gcapi.client.ImagesAPI.detail","title":"detail","text":"<pre><code>detail(\n    pk: Optional[str] = None,\n    api_url: Optional[str] = None,\n    **params: Any\n) -&gt; gcapi.models.HyperlinkedImage\n</code></pre> <p>Retrieve a specific resource by primary key, URL, or search parameters.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Primary key of the resource to retrieve.</p> </li> <li> <code>api_url</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Direct API URL of the resource to retrieve.</p> </li> <li> <code>**params</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Search parameters to find a unique resource, such as <code>slug=\"your-slug\"</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>HyperlinkedImage</code>           \u2013            <p>The requested resource instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If more than one or none of pk, api_url, or params are specified.</p> </li> <li> <code>ObjectNotFound</code>             \u2013            <p>If no resource is found matching the criteria.</p> </li> <li> <code>MultipleObjectsReturned</code>             \u2013            <p>If multiple resources match the search parameters.</p> </li> </ul>"},{"location":"api/images/#gcapi.client.ImagesAPI.download","title":"download","text":"<pre><code>download(\n    *,\n    filename: Union[str, Path],\n    image_type: Optional[str] = None,\n    pk: Optional[str] = None,\n    url: Optional[str] = None,\n    files: Optional[list] = None,\n    **params: Any\n) -&gt; list[Path]\n</code></pre> <p>Download image files to local filesystem.</p> <p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>Union[str, Path]</code>)           \u2013            <p>Base filename for downloaded files. Extension is added automatically.</p> </li> <li> <code>image_type</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Restrict download to a particular image type.</p> </li> <li> <code>pk</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Primary key of the image to download.</p> </li> <li> <code>url</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>API URL of the image to download.</p> </li> <li> <code>files</code>               (<code>Optional[list]</code>, default:                   <code>None</code> )           \u2013            <p>List of file objects to download directly.</p> </li> <li> <code>**params</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional parameters for image detail lookup.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Path]</code>           \u2013            <p>List of Path objects for downloaded files.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If not exactly one of pk, url, files, or params is specified.</p> </li> </ul>"},{"location":"api/images/#gcapi.client.ImagesAPI.iterate_all","title":"iterate_all","text":"<pre><code>iterate_all(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; Iterator[gcapi.models.HyperlinkedImage]\n</code></pre> <p>Iterate through all resources from the API endpoint across all pages.</p> <p>This method automatically handles pagination and yields individual resources from all pages until all resources have been retrieved.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API requests.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>HyperlinkedImage</code>           \u2013            <p>Individual resources from the API endpoint.</p> </li> </ul>"},{"location":"api/images/#gcapi.client.ImagesAPI.list","title":"list","text":"<pre><code>list(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; list[gcapi.models.HyperlinkedImage]\n</code></pre> <p>Retrieve a raw list of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[HyperlinkedImage]</code>           \u2013            <p>Raw JSON response from the API containing the list of resources.</p> </li> </ul>"},{"location":"api/images/#gcapi.client.ImagesAPI.page","title":"page","text":"<pre><code>page(\n    offset: int = 0,\n    limit: int = 100,\n    params: Optional[dict[str, Any]] = None,\n) -&gt; PageResult[gcapi.models.HyperlinkedImage]\n</code></pre> <p>Retrieve a paginated set of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>offset</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The starting index for pagination (zero-based).</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>100</code> )           \u2013            <p>The maximum number of results to return in this page.</p> </li> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Additional query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PageResult[HyperlinkedImage]</code>           \u2013            <p>A paginated result containing the requested resources and metadata.</p> </li> </ul>"},{"location":"api/interfaces/","title":"<code>Client.interfaces</code>","text":""},{"location":"api/interfaces/#gcapi.client.ComponentInterfacesAPI.detail","title":"detail","text":"<pre><code>detail(\n    pk: Optional[str] = None,\n    api_url: Optional[str] = None,\n    **params: Any\n) -&gt; gcapi.models.ComponentInterface\n</code></pre> <p>Retrieve a specific resource by primary key, URL, or search parameters.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Primary key of the resource to retrieve.</p> </li> <li> <code>api_url</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Direct API URL of the resource to retrieve.</p> </li> <li> <code>**params</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Search parameters to find a unique resource, such as <code>slug=\"your-slug\"</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ComponentInterface</code>           \u2013            <p>The requested resource instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If more than one or none of pk, api_url, or params are specified.</p> </li> <li> <code>ObjectNotFound</code>             \u2013            <p>If no resource is found matching the criteria.</p> </li> <li> <code>MultipleObjectsReturned</code>             \u2013            <p>If multiple resources match the search parameters.</p> </li> </ul>"},{"location":"api/interfaces/#gcapi.client.ComponentInterfacesAPI.iterate_all","title":"iterate_all","text":"<pre><code>iterate_all(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; Iterator[gcapi.models.ComponentInterface]\n</code></pre> <p>Iterate through all resources from the API endpoint across all pages.</p> <p>This method automatically handles pagination and yields individual resources from all pages until all resources have been retrieved.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API requests.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>ComponentInterface</code>           \u2013            <p>Individual resources from the API endpoint.</p> </li> </ul>"},{"location":"api/interfaces/#gcapi.client.ComponentInterfacesAPI.list","title":"list","text":"<pre><code>list(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; list[gcapi.models.ComponentInterface]\n</code></pre> <p>Retrieve a raw list of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[ComponentInterface]</code>           \u2013            <p>Raw JSON response from the API containing the list of resources.</p> </li> </ul>"},{"location":"api/interfaces/#gcapi.client.ComponentInterfacesAPI.page","title":"page","text":"<pre><code>page(\n    offset: int = 0,\n    limit: int = 100,\n    params: Optional[dict[str, Any]] = None,\n) -&gt; PageResult[gcapi.models.ComponentInterface]\n</code></pre> <p>Retrieve a paginated set of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>offset</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The starting index for pagination (zero-based).</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>100</code> )           \u2013            <p>The maximum number of results to return in this page.</p> </li> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Additional query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PageResult[ComponentInterface]</code>           \u2013            <p>A paginated result containing the requested resources and metadata.</p> </li> </ul>"},{"location":"api/models/","title":"<code>gcapi.models</code>","text":""},{"location":"api/models/#pageresult","title":"<code>PageResult</code>","text":"<p>A paginated result container for API responses.</p> <p>This class provides a sequence-like interface for handling paginated API responses, containing metadata about the pagination state and the actual results.</p> <p>Attributes:</p> <ul> <li> <code>offset</code>               (<code>int</code>)           \u2013            <p>The starting index of the results.</p> </li> <li> <code>limit</code>               (<code>int</code>)           \u2013            <p>The maximum number of results in this page.</p> </li> <li> <code>total_count</code>               (<code>int</code>)           \u2013            <p>The total number of items available.</p> </li> </ul>"},{"location":"api/models/#gcapi.models.Algorithm","title":"Algorithm","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass Algorithm(BaseModel):\n    api_url: str\n    url: str\n    description: Optional[str]\n    pk: str\n    title: str\n    logo: str\n    slug: str\n    average_duration: Optional[float]\n    interfaces: list[AlgorithmInterface]\n</code></pre>"},{"location":"api/models/#gcapi.models.AlgorithmImage","title":"AlgorithmImage","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass AlgorithmImage(BaseModel):\n    pk: str\n    url: str\n    api_url: str\n    algorithm: str\n    created: str\n    import_status: str\n    image: Optional[str]\n</code></pre>"},{"location":"api/models/#gcapi.models.AlgorithmInterface","title":"AlgorithmInterface","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass AlgorithmInterface(BaseModel):\n    inputs: list[ComponentInterface]\n    outputs: list[ComponentInterface]\n</code></pre>"},{"location":"api/models/#gcapi.models.Answer","title":"Answer","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass Answer(BaseModel):\n    answer: Optional[Any]\n    api_url: str\n    created: str\n    creator: str\n    display_set: Optional[str]\n    pk: str\n    question: str\n    modified: str\n    answer_image: Optional[str]\n    last_edit_duration: Optional[str]\n    total_edit_duration: Optional[str]\n    is_ground_truth: bool\n</code></pre>"},{"location":"api/models/#gcapi.models.AnswerRequest","title":"AnswerRequest","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass AnswerRequest(BaseModel):\n    answer: Optional[Any]\n    display_set: Optional[str]\n    question: str\n    last_edit_duration: Optional[str]\n</code></pre>"},{"location":"api/models/#gcapi.models.Archive","title":"Archive","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass Archive(BaseModel):\n    pk: str\n    title: str\n    logo: str\n    description: Optional[str]\n    api_url: str\n    url: str\n</code></pre>"},{"location":"api/models/#gcapi.models.ArchiveItem","title":"ArchiveItem","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass ArchiveItem(BaseModel):\n    pk: str\n    archive: str\n    values: list[HyperlinkedComponentInterfaceValue]\n    hanging_protocol: Optional[HangingProtocol]\n    optional_hanging_protocols: list[HangingProtocol]\n    view_content: Any\n    title: str = \"\"\n</code></pre>"},{"location":"api/models/#gcapi.models.ArchiveItemPost","title":"ArchiveItemPost","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass ArchiveItemPost(BaseModel):\n    pk: str\n    archive: Optional[str]\n    values: Optional[list[ComponentInterfaceValuePost]]\n    hanging_protocol: Optional[HangingProtocol]\n    optional_hanging_protocols: list[HangingProtocol]\n    view_content: Any\n    title: str = \"\"\n</code></pre>"},{"location":"api/models/#gcapi.models.ArchiveItemPostRequest","title":"ArchiveItemPostRequest","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass ArchiveItemPostRequest(BaseModel):\n    archive: Optional[str]\n    values: Optional[list[ComponentInterfaceValuePostRequest]]\n    title: str = \"\"\n</code></pre>"},{"location":"api/models/#gcapi.models.BaseModel","title":"BaseModel","text":"Source code in <code>gcapi/model_base.py</code> <pre><code>class BaseModel:\n    def __getitem__(self, key):\n        self._warn_deprecated_access(key, \"getting\")\n        return getattr(self, key)\n\n    def __setitem__(self, key, value):\n        self._warn_deprecated_access(key, \"setting\")\n        return setattr(self, key, value)\n\n    def __delitem__(self, key):\n        self._warn_deprecated_access(key, \"deleting\")\n        return delattr(self, key)\n\n    @staticmethod\n    def _warn_deprecated_access(key, action):\n        warnings.warn(\n            message=(\n                f'Using [\"{key}\"] for {action} attributes is deprecated '\n                \"and will be removed in the next release. \"\n                f'Suggestion: Replace [\"{key}\"] with .{key}'\n            ),\n            category=DeprecationWarning,\n            stacklevel=3,\n        )\n</code></pre>"},{"location":"api/models/#gcapi.models.BlankEnum","title":"BlankEnum","text":"Source code in <code>gcapi/models.py</code> <pre><code>class BlankEnum(Enum):\n    field_ = \"\"\n</code></pre>"},{"location":"api/models/#gcapi.models.CategoricalOption","title":"CategoricalOption","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass CategoricalOption(BaseModel):\n    id: int\n    title: str\n    default: Optional[bool]\n</code></pre>"},{"location":"api/models/#gcapi.models.Challenge","title":"Challenge","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass Challenge(BaseModel):\n    title: Optional[str]\n    short_name: str\n</code></pre>"},{"location":"api/models/#gcapi.models.ChallengeRequest","title":"ChallengeRequest","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass ChallengeRequest(BaseModel):\n    title: Optional[str]\n    short_name: str\n</code></pre>"},{"location":"api/models/#gcapi.models.ColorInterpolationEnum","title":"ColorInterpolationEnum","text":"Source code in <code>gcapi/models.py</code> <pre><code>class ColorInterpolationEnum(Enum):\n    RGB = \"RGB\"\n    HLS = \"HLS\"\n    HLSpos = \"HLSpos\"\n    HLSneg = \"HLSneg\"\n    Constant = \"Constant\"\n</code></pre>"},{"location":"api/models/#gcapi.models.ColorSpaceEnum","title":"ColorSpaceEnum","text":"Source code in <code>gcapi/models.py</code> <pre><code>class ColorSpaceEnum(Enum):\n    GRAY = \"GRAY\"\n    RGB = \"RGB\"\n    RGBA = \"RGBA\"\n    YCBCR = \"YCBCR\"\n</code></pre>"},{"location":"api/models/#gcapi.models.ComponentInterface","title":"ComponentInterface","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass ComponentInterface(BaseModel):\n    title: str\n    description: Optional[str]\n    slug: str\n    kind: str\n    pk: int\n    default_value: Optional[Any]\n    super_kind: str\n    relative_path: str\n    overlay_segments: Optional[Any]\n    look_up_table: Optional[LookUpTable]\n</code></pre>"},{"location":"api/models/#gcapi.models.ComponentInterfaceValue","title":"ComponentInterfaceValue","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass ComponentInterfaceValue(BaseModel):\n    interface: ComponentInterface\n    value: Optional[Any]\n    file: Optional[str]\n    image: Optional[SimpleImage]\n    pk: int\n</code></pre>"},{"location":"api/models/#gcapi.models.ComponentInterfaceValuePost","title":"ComponentInterfaceValuePost","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass ComponentInterfaceValuePost(BaseModel):\n    interface: str\n    value: Optional[Any]\n    file: Optional[str]\n    image: Optional[str]\n    pk: int\n</code></pre>"},{"location":"api/models/#gcapi.models.ComponentInterfaceValuePostRequest","title":"ComponentInterfaceValuePostRequest","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass ComponentInterfaceValuePostRequest(BaseModel):\n    interface: str\n    value: Optional[Any]\n    file: Optional[bytes]\n    image: Optional[str]\n    upload_session: Optional[str]\n    user_upload: Optional[str]\n</code></pre>"},{"location":"api/models/#gcapi.models.DisplaySet","title":"DisplaySet","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass DisplaySet(BaseModel):\n    pk: str\n    reader_study: str\n    values: list[HyperlinkedComponentInterfaceValue]\n    order: Optional[int]\n    api_url: str\n    hanging_protocol: Optional[HangingProtocol]\n    optional_hanging_protocols: list[HangingProtocol]\n    view_content: Any\n    description: str\n    index: Optional[int]\n    title: str = \"\"\n</code></pre>"},{"location":"api/models/#gcapi.models.DisplaySetPost","title":"DisplaySetPost","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass DisplaySetPost(BaseModel):\n    pk: str\n    reader_study: Optional[str]\n    values: Optional[list[ComponentInterfaceValuePost]]\n    order: Optional[int]\n    api_url: str\n    hanging_protocol: Optional[HangingProtocol]\n    optional_hanging_protocols: list[HangingProtocol]\n    view_content: Any\n    description: str\n    index: Optional[int]\n    title: str = \"\"\n</code></pre>"},{"location":"api/models/#gcapi.models.DisplaySetPostRequest","title":"DisplaySetPostRequest","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass DisplaySetPostRequest(BaseModel):\n    reader_study: Optional[str]\n    values: Optional[list[ComponentInterfaceValuePostRequest]]\n    order: Optional[int]\n    title: str = \"\"\n</code></pre>"},{"location":"api/models/#gcapi.models.Evaluation","title":"Evaluation","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass Evaluation(BaseModel):\n    pk: str\n    method: Optional[str]\n    submission: Submission\n    created: str\n    published: Optional[bool]\n    outputs: list[ComponentInterfaceValue]\n    rank: Optional[int]\n    rank_score: Optional[float]\n    rank_per_metric: Optional[Any]\n    status: str\n    title: str\n</code></pre>"},{"location":"api/models/#gcapi.models.ExternalEvaluation","title":"ExternalEvaluation","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass ExternalEvaluation(BaseModel):\n    pk: str\n    method: Optional[str]\n    submission: Submission\n    created: str\n    published: Optional[bool]\n    outputs: list[ComponentInterfaceValue]\n    rank: Optional[int]\n    rank_score: Optional[float]\n    rank_per_metric: Optional[Any]\n    status: str\n    title: str\n    algorithm_model: Optional[dict[str, Any]]\n    algorithm_image: dict[str, Any]\n    claimed_by: Optional[int]\n    phase_pk: str\n</code></pre>"},{"location":"api/models/#gcapi.models.ExternalEvaluationUpdate","title":"ExternalEvaluationUpdate","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass ExternalEvaluationUpdate(BaseModel):\n    metrics: Optional[Any]\n    status: StatusEnum\n    error_message: Optional[str]\n</code></pre>"},{"location":"api/models/#gcapi.models.EyeChoiceEnum","title":"EyeChoiceEnum","text":"Source code in <code>gcapi/models.py</code> <pre><code>class EyeChoiceEnum(Enum):\n    OD = \"OD\"\n    OS = \"OS\"\n    U = \"U\"\n    NA = \"NA\"\n</code></pre>"},{"location":"api/models/#gcapi.models.Feedback","title":"Feedback","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass Feedback(BaseModel):\n    session: str\n    screenshot: Optional[str]\n    user_comment: str\n    context: Optional[Any]\n</code></pre>"},{"location":"api/models/#gcapi.models.FeedbackRequest","title":"FeedbackRequest","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass FeedbackRequest(BaseModel):\n    session: str\n    screenshot: Optional[bytes]\n    user_comment: str\n    context: Optional[Any]\n</code></pre>"},{"location":"api/models/#gcapi.models.FieldOfViewEnum","title":"FieldOfViewEnum","text":"Source code in <code>gcapi/models.py</code> <pre><code>class FieldOfViewEnum(Enum):\n    F1M = \"F1M\"\n    F2 = \"F2\"\n    F3M = \"F3M\"\n    F4 = \"F4\"\n    F5 = \"F5\"\n    F6 = \"F6\"\n    F7 = \"F7\"\n    U = \"U\"\n</code></pre>"},{"location":"api/models/#gcapi.models.Follow","title":"Follow","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass Follow(BaseModel):\n    pk: int\n    flag: Optional[str]\n</code></pre>"},{"location":"api/models/#gcapi.models.FollowRequest","title":"FollowRequest","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass FollowRequest(BaseModel):\n    flag: Optional[str]\n</code></pre>"},{"location":"api/models/#gcapi.models.GCAPIVersion","title":"GCAPIVersion","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass GCAPIVersion(BaseModel):\n    latest_version: str\n    lowest_supported_version: str\n</code></pre>"},{"location":"api/models/#gcapi.models.HangingProtocol","title":"HangingProtocol","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass HangingProtocol(BaseModel):\n    json: Any\n    title: str\n    pk: str\n    svg_icon: str\n</code></pre>"},{"location":"api/models/#gcapi.models.HangingProtocolRequest","title":"HangingProtocolRequest","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass HangingProtocolRequest(BaseModel):\n    json: Any\n    title: str\n</code></pre>"},{"location":"api/models/#gcapi.models.HyperlinkedComponentInterfaceValue","title":"HyperlinkedComponentInterfaceValue","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass HyperlinkedComponentInterfaceValue(BaseModel):\n    interface: ComponentInterface\n    value: Optional[Any]\n    file: Optional[str]\n    image: Optional[str]\n    pk: int\n</code></pre>"},{"location":"api/models/#gcapi.models.HyperlinkedImage","title":"HyperlinkedImage","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass HyperlinkedImage(BaseModel):\n    pk: str\n    name: str\n    files: list[ImageFile]\n    width: int\n    height: int\n    depth: Optional[int]\n    color_space: ColorSpaceEnum\n    modality: Optional[ImagingModality]\n    eye_choice: Optional[EyeChoiceEnum]\n    stereoscopic_choice: Optional[\n        Union[StereoscopicChoiceEnum, BlankEnum, NullEnum]\n    ]\n    field_of_view: Optional[Union[FieldOfViewEnum, BlankEnum, NullEnum]]\n    shape_without_color: list[int]\n    shape: list[int]\n    voxel_width_mm: Optional[float]\n    voxel_height_mm: Optional[float]\n    voxel_depth_mm: Optional[float]\n    api_url: str\n    patient_id: Optional[str]\n    patient_name: Optional[str]\n    patient_birth_date: Optional[str]\n    patient_age: Optional[str]\n    patient_sex: Optional[Union[PatientSexEnum, BlankEnum]]\n    study_date: Optional[str]\n    study_instance_uid: Optional[str]\n    series_instance_uid: Optional[str]\n    study_description: Optional[str]\n    series_description: Optional[str]\n    window_center: Optional[float]\n    window_width: Optional[float]\n    segments: Optional[Any]\n</code></pre>"},{"location":"api/models/#gcapi.models.HyperlinkedJob","title":"HyperlinkedJob","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass HyperlinkedJob(BaseModel):\n    pk: str\n    url: str\n    api_url: str\n    algorithm_image: str\n    inputs: list[HyperlinkedComponentInterfaceValue]\n    outputs: list[HyperlinkedComponentInterfaceValue]\n    status: str\n    hanging_protocol: Optional[HangingProtocol]\n    optional_hanging_protocols: list[HangingProtocol]\n    view_content: Any\n    algorithm: str\n</code></pre>"},{"location":"api/models/#gcapi.models.ImageFile","title":"ImageFile","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass ImageFile(BaseModel):\n    pk: str\n    image: Optional[str]\n    file: str\n    image_type: Optional[ImageTypeEnum]\n</code></pre>"},{"location":"api/models/#gcapi.models.ImageTypeEnum","title":"ImageTypeEnum","text":"Source code in <code>gcapi/models.py</code> <pre><code>class ImageTypeEnum(Enum):\n    MHD = \"MHD\"\n    TIFF = \"TIFF\"\n    DZI = \"DZI\"\n</code></pre>"},{"location":"api/models/#gcapi.models.ImagingModality","title":"ImagingModality","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass ImagingModality(BaseModel):\n    modality: str\n</code></pre>"},{"location":"api/models/#gcapi.models.JobPost","title":"JobPost","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass JobPost(BaseModel):\n    pk: str\n    inputs: list[ComponentInterfaceValuePost]\n    status: str\n</code></pre>"},{"location":"api/models/#gcapi.models.JobPostRequest","title":"JobPostRequest","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass JobPostRequest(BaseModel):\n    algorithm: str\n    inputs: list[ComponentInterfaceValuePostRequest]\n</code></pre>"},{"location":"api/models/#gcapi.models.LocationEnum","title":"LocationEnum","text":"Source code in <code>gcapi/models.py</code> <pre><code>class LocationEnum(Enum):\n    AF = \"AF\"\n    AX = \"AX\"\n    AL = \"AL\"\n    DZ = \"DZ\"\n    AS = \"AS\"\n    AD = \"AD\"\n    AO = \"AO\"\n    AI = \"AI\"\n    AQ = \"AQ\"\n    AG = \"AG\"\n    AR = \"AR\"\n    AM = \"AM\"\n    AW = \"AW\"\n    AU = \"AU\"\n    AT = \"AT\"\n    AZ = \"AZ\"\n    BS = \"BS\"\n    BH = \"BH\"\n    BD = \"BD\"\n    BB = \"BB\"\n    BY = \"BY\"\n    BE = \"BE\"\n    BZ = \"BZ\"\n    BJ = \"BJ\"\n    BM = \"BM\"\n    BT = \"BT\"\n    BO = \"BO\"\n    BQ = \"BQ\"\n    BA = \"BA\"\n    BW = \"BW\"\n    BV = \"BV\"\n    BR = \"BR\"\n    IO = \"IO\"\n    BN = \"BN\"\n    BG = \"BG\"\n    BF = \"BF\"\n    BI = \"BI\"\n    CV = \"CV\"\n    KH = \"KH\"\n    CM = \"CM\"\n    CA = \"CA\"\n    KY = \"KY\"\n    CF = \"CF\"\n    TD = \"TD\"\n    CL = \"CL\"\n    CN = \"CN\"\n    CX = \"CX\"\n    CC = \"CC\"\n    CO = \"CO\"\n    KM = \"KM\"\n    CG = \"CG\"\n    CD = \"CD\"\n    CK = \"CK\"\n    CR = \"CR\"\n    CI = \"CI\"\n    HR = \"HR\"\n    CU = \"CU\"\n    CW = \"CW\"\n    CY = \"CY\"\n    CZ = \"CZ\"\n    DK = \"DK\"\n    DJ = \"DJ\"\n    DM = \"DM\"\n    DO = \"DO\"\n    EC = \"EC\"\n    EG = \"EG\"\n    SV = \"SV\"\n    GQ = \"GQ\"\n    ER = \"ER\"\n    EE = \"EE\"\n    SZ = \"SZ\"\n    ET = \"ET\"\n    FK = \"FK\"\n    FO = \"FO\"\n    FJ = \"FJ\"\n    FI = \"FI\"\n    FR = \"FR\"\n    GF = \"GF\"\n    PF = \"PF\"\n    TF = \"TF\"\n    GA = \"GA\"\n    GM = \"GM\"\n    GE = \"GE\"\n    DE = \"DE\"\n    GH = \"GH\"\n    GI = \"GI\"\n    GR = \"GR\"\n    GL = \"GL\"\n    GD = \"GD\"\n    GP = \"GP\"\n    GU = \"GU\"\n    GT = \"GT\"\n    GG = \"GG\"\n    GN = \"GN\"\n    GW = \"GW\"\n    GY = \"GY\"\n    HT = \"HT\"\n    HM = \"HM\"\n    VA = \"VA\"\n    HN = \"HN\"\n    HK = \"HK\"\n    HU = \"HU\"\n    IS = \"IS\"\n    IN = \"IN\"\n    ID = \"ID\"\n    IR = \"IR\"\n    IQ = \"IQ\"\n    IE = \"IE\"\n    IM = \"IM\"\n    IL = \"IL\"\n    IT = \"IT\"\n    JM = \"JM\"\n    JP = \"JP\"\n    JE = \"JE\"\n    JO = \"JO\"\n    KZ = \"KZ\"\n    KE = \"KE\"\n    KI = \"KI\"\n    KW = \"KW\"\n    KG = \"KG\"\n    LA = \"LA\"\n    LV = \"LV\"\n    LB = \"LB\"\n    LS = \"LS\"\n    LR = \"LR\"\n    LY = \"LY\"\n    LI = \"LI\"\n    LT = \"LT\"\n    LU = \"LU\"\n    MO = \"MO\"\n    MG = \"MG\"\n    MW = \"MW\"\n    MY = \"MY\"\n    MV = \"MV\"\n    ML = \"ML\"\n    MT = \"MT\"\n    MH = \"MH\"\n    MQ = \"MQ\"\n    MR = \"MR\"\n    MU = \"MU\"\n    YT = \"YT\"\n    MX = \"MX\"\n    FM = \"FM\"\n    MD = \"MD\"\n    MC = \"MC\"\n    MN = \"MN\"\n    ME = \"ME\"\n    MS = \"MS\"\n    MA = \"MA\"\n    MZ = \"MZ\"\n    MM = \"MM\"\n    NA = \"NA\"\n    NR = \"NR\"\n    NP = \"NP\"\n    NL = \"NL\"\n    NC = \"NC\"\n    NZ = \"NZ\"\n    NI = \"NI\"\n    NE = \"NE\"\n    NG = \"NG\"\n    NU = \"NU\"\n    NF = \"NF\"\n    KP = \"KP\"\n    MK = \"MK\"\n    MP = \"MP\"\n    NO = \"NO\"\n    OM = \"OM\"\n    PK = \"PK\"\n    PW = \"PW\"\n    PS = \"PS\"\n    PA = \"PA\"\n    PG = \"PG\"\n    PY = \"PY\"\n    PE = \"PE\"\n    PH = \"PH\"\n    PN = \"PN\"\n    PL = \"PL\"\n    PT = \"PT\"\n    PR = \"PR\"\n    QA = \"QA\"\n    RE = \"RE\"\n    RO = \"RO\"\n    RU = \"RU\"\n    RW = \"RW\"\n    BL = \"BL\"\n    SH = \"SH\"\n    KN = \"KN\"\n    LC = \"LC\"\n    MF = \"MF\"\n    PM = \"PM\"\n    VC = \"VC\"\n    WS = \"WS\"\n    SM = \"SM\"\n    ST = \"ST\"\n    SA = \"SA\"\n    SN = \"SN\"\n    RS = \"RS\"\n    SC = \"SC\"\n    SL = \"SL\"\n    SG = \"SG\"\n    SX = \"SX\"\n    SK = \"SK\"\n    SI = \"SI\"\n    SB = \"SB\"\n    SO = \"SO\"\n    ZA = \"ZA\"\n    GS = \"GS\"\n    KR = \"KR\"\n    SS = \"SS\"\n    ES = \"ES\"\n    LK = \"LK\"\n    SD = \"SD\"\n    SR = \"SR\"\n    SJ = \"SJ\"\n    SE = \"SE\"\n    CH = \"CH\"\n    SY = \"SY\"\n    TW = \"TW\"\n    TJ = \"TJ\"\n    TZ = \"TZ\"\n    TH = \"TH\"\n    TL = \"TL\"\n    TG = \"TG\"\n    TK = \"TK\"\n    TO = \"TO\"\n    TT = \"TT\"\n    TN = \"TN\"\n    TR = \"TR\"\n    TM = \"TM\"\n    TC = \"TC\"\n    TV = \"TV\"\n    UG = \"UG\"\n    UA = \"UA\"\n    AE = \"AE\"\n    GB = \"GB\"\n    UM = \"UM\"\n    US = \"US\"\n    UY = \"UY\"\n    UZ = \"UZ\"\n    VU = \"VU\"\n    VE = \"VE\"\n    VN = \"VN\"\n    VG = \"VG\"\n    VI = \"VI\"\n    WF = \"WF\"\n    EH = \"EH\"\n    YE = \"YE\"\n    ZM = \"ZM\"\n    ZW = \"ZW\"\n</code></pre>"},{"location":"api/models/#gcapi.models.LookUpTable","title":"LookUpTable","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass LookUpTable(BaseModel):\n    pk: int\n    slug: str\n    title: str\n    description: Optional[str]\n    color: str\n    alpha: str\n    color_invert: Optional[str]\n    alpha_invert: Optional[str]\n    range_min: Optional[int]\n    range_max: Optional[int]\n    relative: Optional[bool]\n    color_interpolation: Optional[ColorInterpolationEnum]\n    color_interpolation_invert: Optional[ColorInterpolationEnum]\n</code></pre>"},{"location":"api/models/#gcapi.models.Notification","title":"Notification","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass Notification(BaseModel):\n    read: Optional[bool]\n</code></pre>"},{"location":"api/models/#gcapi.models.NotificationRequest","title":"NotificationRequest","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass NotificationRequest(BaseModel):\n    read: Optional[bool]\n</code></pre>"},{"location":"api/models/#gcapi.models.NullEnum","title":"NullEnum","text":"Source code in <code>gcapi/models.py</code> <pre><code>class NullEnum(Enum):\n    NoneType_None = None\n</code></pre>"},{"location":"api/models/#gcapi.models.PaginatedAlgorithmImageList","title":"PaginatedAlgorithmImageList","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PaginatedAlgorithmImageList(BaseModel):\n    count: int\n    next: Optional[str]\n    previous: Optional[str]\n    results: list[AlgorithmImage]\n</code></pre>"},{"location":"api/models/#gcapi.models.PaginatedAlgorithmList","title":"PaginatedAlgorithmList","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PaginatedAlgorithmList(BaseModel):\n    count: int\n    next: Optional[str]\n    previous: Optional[str]\n    results: list[Algorithm]\n</code></pre>"},{"location":"api/models/#gcapi.models.PaginatedAnswerList","title":"PaginatedAnswerList","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PaginatedAnswerList(BaseModel):\n    count: int\n    next: Optional[str]\n    previous: Optional[str]\n    results: list[Answer]\n</code></pre>"},{"location":"api/models/#gcapi.models.PaginatedArchiveItemList","title":"PaginatedArchiveItemList","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PaginatedArchiveItemList(BaseModel):\n    count: int\n    next: Optional[str]\n    previous: Optional[str]\n    results: list[ArchiveItem]\n</code></pre>"},{"location":"api/models/#gcapi.models.PaginatedArchiveList","title":"PaginatedArchiveList","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PaginatedArchiveList(BaseModel):\n    count: int\n    next: Optional[str]\n    previous: Optional[str]\n    results: list[Archive]\n</code></pre>"},{"location":"api/models/#gcapi.models.PaginatedComponentInterfaceList","title":"PaginatedComponentInterfaceList","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PaginatedComponentInterfaceList(BaseModel):\n    count: int\n    next: Optional[str]\n    previous: Optional[str]\n    results: list[ComponentInterface]\n</code></pre>"},{"location":"api/models/#gcapi.models.PaginatedDisplaySetList","title":"PaginatedDisplaySetList","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PaginatedDisplaySetList(BaseModel):\n    count: int\n    next: Optional[str]\n    previous: Optional[str]\n    results: list[DisplaySet]\n</code></pre>"},{"location":"api/models/#gcapi.models.PaginatedEvaluationList","title":"PaginatedEvaluationList","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PaginatedEvaluationList(BaseModel):\n    count: int\n    next: Optional[str]\n    previous: Optional[str]\n    results: list[Evaluation]\n</code></pre>"},{"location":"api/models/#gcapi.models.PaginatedFeedbackList","title":"PaginatedFeedbackList","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PaginatedFeedbackList(BaseModel):\n    count: int\n    next: Optional[str]\n    previous: Optional[str]\n    results: list[Feedback]\n</code></pre>"},{"location":"api/models/#gcapi.models.PaginatedFollowList","title":"PaginatedFollowList","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PaginatedFollowList(BaseModel):\n    count: int\n    next: Optional[str]\n    previous: Optional[str]\n    results: list[Follow]\n</code></pre>"},{"location":"api/models/#gcapi.models.PaginatedHyperlinkedImageList","title":"PaginatedHyperlinkedImageList","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PaginatedHyperlinkedImageList(BaseModel):\n    count: int\n    next: Optional[str]\n    previous: Optional[str]\n    results: list[HyperlinkedImage]\n</code></pre>"},{"location":"api/models/#gcapi.models.PaginatedHyperlinkedJobList","title":"PaginatedHyperlinkedJobList","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PaginatedHyperlinkedJobList(BaseModel):\n    count: int\n    next: Optional[str]\n    previous: Optional[str]\n    results: list[HyperlinkedJob]\n</code></pre>"},{"location":"api/models/#gcapi.models.PaginatedNotificationList","title":"PaginatedNotificationList","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PaginatedNotificationList(BaseModel):\n    count: int\n    next: Optional[str]\n    previous: Optional[str]\n    results: list[Notification]\n</code></pre>"},{"location":"api/models/#gcapi.models.PaginatedPublicChallengeList","title":"PaginatedPublicChallengeList","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PaginatedPublicChallengeList(BaseModel):\n    count: int\n    next: Optional[str]\n    previous: Optional[str]\n    results: list[PublicChallenge]\n</code></pre>"},{"location":"api/models/#gcapi.models.PaginatedQuestionList","title":"PaginatedQuestionList","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PaginatedQuestionList(BaseModel):\n    count: int\n    next: Optional[str]\n    previous: Optional[str]\n    results: list[Question]\n</code></pre>"},{"location":"api/models/#gcapi.models.PaginatedRawImageUploadSessionList","title":"PaginatedRawImageUploadSessionList","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PaginatedRawImageUploadSessionList(BaseModel):\n    count: int\n    next: Optional[str]\n    previous: Optional[str]\n    results: list[RawImageUploadSession]\n</code></pre>"},{"location":"api/models/#gcapi.models.PaginatedReaderStudyList","title":"PaginatedReaderStudyList","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PaginatedReaderStudyList(BaseModel):\n    count: int\n    next: Optional[str]\n    previous: Optional[str]\n    results: list[ReaderStudy]\n</code></pre>"},{"location":"api/models/#gcapi.models.PaginatedSessionList","title":"PaginatedSessionList","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PaginatedSessionList(BaseModel):\n    count: int\n    next: Optional[str]\n    previous: Optional[str]\n    results: list[Session]\n</code></pre>"},{"location":"api/models/#gcapi.models.PaginatedUserUploadList","title":"PaginatedUserUploadList","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PaginatedUserUploadList(BaseModel):\n    count: int\n    next: Optional[str]\n    previous: Optional[str]\n    results: list[UserUpload]\n</code></pre>"},{"location":"api/models/#gcapi.models.PaginatedWorkstationConfigList","title":"PaginatedWorkstationConfigList","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PaginatedWorkstationConfigList(BaseModel):\n    count: int\n    next: Optional[str]\n    previous: Optional[str]\n    results: list[WorkstationConfig]\n</code></pre>"},{"location":"api/models/#gcapi.models.PaginatedWorkstationList","title":"PaginatedWorkstationList","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PaginatedWorkstationList(BaseModel):\n    count: int\n    next: Optional[str]\n    previous: Optional[str]\n    results: list[Workstation]\n</code></pre>"},{"location":"api/models/#gcapi.models.Part","title":"Part","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass Part(BaseModel):\n    ETag: str\n    PartNumber: int\n    LastModified: str\n    Size: int\n</code></pre>"},{"location":"api/models/#gcapi.models.PartRequest","title":"PartRequest","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PartRequest(BaseModel):\n    ETag: str\n    PartNumber: int\n    LastModified: str\n    Size: int\n</code></pre>"},{"location":"api/models/#gcapi.models.PatchedAnswerRequest","title":"PatchedAnswerRequest","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PatchedAnswerRequest(BaseModel):\n    answer: Optional[Any]\n    display_set: Optional[str]\n    question: Optional[str]\n    last_edit_duration: Optional[str]\n</code></pre>"},{"location":"api/models/#gcapi.models.PatchedArchiveItemPostRequest","title":"PatchedArchiveItemPostRequest","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PatchedArchiveItemPostRequest(BaseModel):\n    archive: Optional[str]\n    values: Optional[list[ComponentInterfaceValuePostRequest]]\n    title: str = \"\"\n</code></pre>"},{"location":"api/models/#gcapi.models.PatchedDisplaySetPostRequest","title":"PatchedDisplaySetPostRequest","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PatchedDisplaySetPostRequest(BaseModel):\n    reader_study: Optional[str]\n    values: Optional[list[ComponentInterfaceValuePostRequest]]\n    order: Optional[int]\n    title: str = \"\"\n</code></pre>"},{"location":"api/models/#gcapi.models.PatchedExternalEvaluationRequest","title":"PatchedExternalEvaluationRequest","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PatchedExternalEvaluationRequest(BaseModel):\n    method: Optional[str]\n    submission: Optional[SubmissionRequest]\n    published: Optional[bool]\n    rank: Optional[int]\n    rank_score: Optional[float]\n    rank_per_metric: Optional[Any]\n    claimed_by: Optional[int]\n    phase_pk: Optional[str]\n</code></pre>"},{"location":"api/models/#gcapi.models.PatchedExternalEvaluationUpdateRequest","title":"PatchedExternalEvaluationUpdateRequest","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PatchedExternalEvaluationUpdateRequest(BaseModel):\n    metrics: Optional[Any]\n    status: Optional[StatusEnum]\n    error_message: Optional[str]\n</code></pre>"},{"location":"api/models/#gcapi.models.PatchedFollowRequest","title":"PatchedFollowRequest","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PatchedFollowRequest(BaseModel):\n    flag: Optional[str]\n</code></pre>"},{"location":"api/models/#gcapi.models.PatchedNotificationRequest","title":"PatchedNotificationRequest","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PatchedNotificationRequest(BaseModel):\n    read: Optional[bool]\n</code></pre>"},{"location":"api/models/#gcapi.models.PatchedUserUploadCompleteRequest","title":"PatchedUserUploadCompleteRequest","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PatchedUserUploadCompleteRequest(BaseModel):\n    parts: Optional[list[PartRequest]]\n</code></pre>"},{"location":"api/models/#gcapi.models.PatchedUserUploadPresignedURLsRequest","title":"PatchedUserUploadPresignedURLsRequest","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PatchedUserUploadPresignedURLsRequest(BaseModel):\n    part_numbers: Optional[list[int]]\n</code></pre>"},{"location":"api/models/#gcapi.models.PatientSexEnum","title":"PatientSexEnum","text":"Source code in <code>gcapi/models.py</code> <pre><code>class PatientSexEnum(Enum):\n    M = \"M\"\n    F = \"F\"\n    O = \"O\"\n</code></pre>"},{"location":"api/models/#gcapi.models.Phase","title":"Phase","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass Phase(BaseModel):\n    challenge: Challenge\n    title: str\n    slug: str\n</code></pre>"},{"location":"api/models/#gcapi.models.PhaseRequest","title":"PhaseRequest","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PhaseRequest(BaseModel):\n    challenge: ChallengeRequest\n    title: str\n</code></pre>"},{"location":"api/models/#gcapi.models.PublicChallenge","title":"PublicChallenge","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass PublicChallenge(BaseModel):\n    api_url: str\n    url: str\n    slug: str\n    title: Optional[str]\n    description: Optional[str]\n    public: bool\n    status: str\n    logo: Optional[str]\n    submission_types: list[str]\n    start_date: Optional[str]\n    end_date: Optional[str]\n    publications: list[str]\n    created: str\n    modified: str\n    incentives: list[str]\n</code></pre>"},{"location":"api/models/#gcapi.models.Question","title":"Question","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass Question(BaseModel):\n    answer_type: str\n    api_url: str\n    form_direction: str\n    help_text: Optional[str]\n    image_port: str\n    default_annotation_color: Optional[str]\n    pk: str\n    question_text: str\n    reader_study: str\n    required: Optional[bool]\n    options: list[CategoricalOption]\n    interface: Optional[ComponentInterface]\n    overlay_segments: Optional[Any]\n    look_up_table: Optional[LookUpTable]\n    widget: str\n    answer_min_value: Optional[int]\n    answer_max_value: Optional[int]\n    answer_step_size: Optional[Decimal]\n    answer_min_length: Optional[int]\n    answer_max_length: Optional[int]\n    answer_match_pattern: Optional[str]\n    empty_answer_confirmation: Optional[bool]\n    empty_answer_confirmation_label: Optional[str]\n    interactive_algorithms: list[str]\n</code></pre>"},{"location":"api/models/#gcapi.models.RawImageUploadSession","title":"RawImageUploadSession","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass RawImageUploadSession(BaseModel):\n    pk: str\n    creator: Optional[int]\n    status: str\n    error_message: Optional[str]\n    image_set: list[str]\n    api_url: str\n    user_uploads: Optional[list[str]]\n    uploads: list[str]\n</code></pre>"},{"location":"api/models/#gcapi.models.RawImageUploadSessionRequest","title":"RawImageUploadSessionRequest","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass RawImageUploadSessionRequest(BaseModel):\n    creator: Optional[int]\n    error_message: Optional[str]\n    user_uploads: Optional[list[str]]\n    archive: Optional[str]\n    answer: Optional[str]\n    interface: Optional[str]\n    archive_item: Optional[str]\n    display_set: Optional[str]\n    uploads: list[str]\n</code></pre>"},{"location":"api/models/#gcapi.models.ReaderStudy","title":"ReaderStudy","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass ReaderStudy(BaseModel):\n    api_url: str\n    url: str\n    slug: str\n    logo: str\n    description: Optional[str]\n    help_text: str\n    pk: str\n    questions: list[Question]\n    title: str\n    is_educational: Optional[bool]\n    instant_verification: Optional[bool]\n    has_ground_truth: bool\n    allow_answer_modification: Optional[bool]\n    allow_case_navigation: Optional[bool]\n    allow_show_all_annotations: Optional[bool]\n    roll_over_answers_for_n_cases: Optional[int]\n</code></pre>"},{"location":"api/models/#gcapi.models.Session","title":"Session","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass Session(BaseModel):\n    pk: str\n    status: str\n</code></pre>"},{"location":"api/models/#gcapi.models.SimpleImage","title":"SimpleImage","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass SimpleImage(BaseModel):\n    pk: str\n    name: str\n</code></pre>"},{"location":"api/models/#gcapi.models.StatusEnum","title":"StatusEnum","text":"Source code in <code>gcapi/models.py</code> <pre><code>class StatusEnum(Enum):\n    Succeeded = \"Succeeded\"\n    Failed = \"Failed\"\n</code></pre>"},{"location":"api/models/#gcapi.models.StereoscopicChoiceEnum","title":"StereoscopicChoiceEnum","text":"Source code in <code>gcapi/models.py</code> <pre><code>class StereoscopicChoiceEnum(Enum):\n    L = \"L\"\n    R = \"R\"\n    U = \"U\"\n</code></pre>"},{"location":"api/models/#gcapi.models.Submission","title":"Submission","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass Submission(BaseModel):\n    pk: str\n    phase: Phase\n    created: str\n    creator: User\n    comment: Optional[str]\n    predictions_file: Optional[str]\n    supplementary_file: Optional[str]\n    supplementary_url: Optional[str]\n    algorithm_image: str\n</code></pre>"},{"location":"api/models/#gcapi.models.SubmissionRequest","title":"SubmissionRequest","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass SubmissionRequest(BaseModel):\n    phase: PhaseRequest\n    creator: UserRequest\n    comment: Optional[str]\n    predictions_file: Optional[bytes]\n    supplementary_file: Optional[bytes]\n    supplementary_url: Optional[str]\n</code></pre>"},{"location":"api/models/#gcapi.models.Timezone","title":"Timezone","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass Timezone(BaseModel):\n    timezone: TimezoneEnum\n</code></pre>"},{"location":"api/models/#gcapi.models.TimezoneEnum","title":"TimezoneEnum","text":"Source code in <code>gcapi/models.py</code> <pre><code>class TimezoneEnum(Enum):\n    Africa_Abidjan = \"Africa/Abidjan\"\n    Africa_Accra = \"Africa/Accra\"\n    Africa_Addis_Ababa = \"Africa/Addis_Ababa\"\n    Africa_Algiers = \"Africa/Algiers\"\n    Africa_Asmara = \"Africa/Asmara\"\n    Africa_Asmera = \"Africa/Asmera\"\n    Africa_Bamako = \"Africa/Bamako\"\n    Africa_Bangui = \"Africa/Bangui\"\n    Africa_Banjul = \"Africa/Banjul\"\n    Africa_Bissau = \"Africa/Bissau\"\n    Africa_Blantyre = \"Africa/Blantyre\"\n    Africa_Brazzaville = \"Africa/Brazzaville\"\n    Africa_Bujumbura = \"Africa/Bujumbura\"\n    Africa_Cairo = \"Africa/Cairo\"\n    Africa_Casablanca = \"Africa/Casablanca\"\n    Africa_Ceuta = \"Africa/Ceuta\"\n    Africa_Conakry = \"Africa/Conakry\"\n    Africa_Dakar = \"Africa/Dakar\"\n    Africa_Dar_es_Salaam = \"Africa/Dar_es_Salaam\"\n    Africa_Djibouti = \"Africa/Djibouti\"\n    Africa_Douala = \"Africa/Douala\"\n    Africa_El_Aaiun = \"Africa/El_Aaiun\"\n    Africa_Freetown = \"Africa/Freetown\"\n    Africa_Gaborone = \"Africa/Gaborone\"\n    Africa_Harare = \"Africa/Harare\"\n    Africa_Johannesburg = \"Africa/Johannesburg\"\n    Africa_Juba = \"Africa/Juba\"\n    Africa_Kampala = \"Africa/Kampala\"\n    Africa_Khartoum = \"Africa/Khartoum\"\n    Africa_Kigali = \"Africa/Kigali\"\n    Africa_Kinshasa = \"Africa/Kinshasa\"\n    Africa_Lagos = \"Africa/Lagos\"\n    Africa_Libreville = \"Africa/Libreville\"\n    Africa_Lome = \"Africa/Lome\"\n    Africa_Luanda = \"Africa/Luanda\"\n    Africa_Lubumbashi = \"Africa/Lubumbashi\"\n    Africa_Lusaka = \"Africa/Lusaka\"\n    Africa_Malabo = \"Africa/Malabo\"\n    Africa_Maputo = \"Africa/Maputo\"\n    Africa_Maseru = \"Africa/Maseru\"\n    Africa_Mbabane = \"Africa/Mbabane\"\n    Africa_Mogadishu = \"Africa/Mogadishu\"\n    Africa_Monrovia = \"Africa/Monrovia\"\n    Africa_Nairobi = \"Africa/Nairobi\"\n    Africa_Ndjamena = \"Africa/Ndjamena\"\n    Africa_Niamey = \"Africa/Niamey\"\n    Africa_Nouakchott = \"Africa/Nouakchott\"\n    Africa_Ouagadougou = \"Africa/Ouagadougou\"\n    Africa_Porto_Novo = \"Africa/Porto-Novo\"\n    Africa_Sao_Tome = \"Africa/Sao_Tome\"\n    Africa_Timbuktu = \"Africa/Timbuktu\"\n    Africa_Tripoli = \"Africa/Tripoli\"\n    Africa_Tunis = \"Africa/Tunis\"\n    Africa_Windhoek = \"Africa/Windhoek\"\n    America_Adak = \"America/Adak\"\n    America_Anchorage = \"America/Anchorage\"\n    America_Anguilla = \"America/Anguilla\"\n    America_Antigua = \"America/Antigua\"\n    America_Araguaina = \"America/Araguaina\"\n    America_Argentina_Buenos_Aires = \"America/Argentina/Buenos_Aires\"\n    America_Argentina_Catamarca = \"America/Argentina/Catamarca\"\n    America_Argentina_ComodRivadavia = \"America/Argentina/ComodRivadavia\"\n    America_Argentina_Cordoba = \"America/Argentina/Cordoba\"\n    America_Argentina_Jujuy = \"America/Argentina/Jujuy\"\n    America_Argentina_La_Rioja = \"America/Argentina/La_Rioja\"\n    America_Argentina_Mendoza = \"America/Argentina/Mendoza\"\n    America_Argentina_Rio_Gallegos = \"America/Argentina/Rio_Gallegos\"\n    America_Argentina_Salta = \"America/Argentina/Salta\"\n    America_Argentina_San_Juan = \"America/Argentina/San_Juan\"\n    America_Argentina_San_Luis = \"America/Argentina/San_Luis\"\n    America_Argentina_Tucuman = \"America/Argentina/Tucuman\"\n    America_Argentina_Ushuaia = \"America/Argentina/Ushuaia\"\n    America_Aruba = \"America/Aruba\"\n    America_Asuncion = \"America/Asuncion\"\n    America_Atikokan = \"America/Atikokan\"\n    America_Atka = \"America/Atka\"\n    America_Bahia = \"America/Bahia\"\n    America_Bahia_Banderas = \"America/Bahia_Banderas\"\n    America_Barbados = \"America/Barbados\"\n    America_Belem = \"America/Belem\"\n    America_Belize = \"America/Belize\"\n    America_Blanc_Sablon = \"America/Blanc-Sablon\"\n    America_Boa_Vista = \"America/Boa_Vista\"\n    America_Bogota = \"America/Bogota\"\n    America_Boise = \"America/Boise\"\n    America_Buenos_Aires = \"America/Buenos_Aires\"\n    America_Cambridge_Bay = \"America/Cambridge_Bay\"\n    America_Campo_Grande = \"America/Campo_Grande\"\n    America_Cancun = \"America/Cancun\"\n    America_Caracas = \"America/Caracas\"\n    America_Catamarca = \"America/Catamarca\"\n    America_Cayenne = \"America/Cayenne\"\n    America_Cayman = \"America/Cayman\"\n    America_Chicago = \"America/Chicago\"\n    America_Chihuahua = \"America/Chihuahua\"\n    America_Ciudad_Juarez = \"America/Ciudad_Juarez\"\n    America_Coral_Harbour = \"America/Coral_Harbour\"\n    America_Cordoba = \"America/Cordoba\"\n    America_Costa_Rica = \"America/Costa_Rica\"\n    America_Coyhaique = \"America/Coyhaique\"\n    America_Creston = \"America/Creston\"\n    America_Cuiaba = \"America/Cuiaba\"\n    America_Curacao = \"America/Curacao\"\n    America_Danmarkshavn = \"America/Danmarkshavn\"\n    America_Dawson = \"America/Dawson\"\n    America_Dawson_Creek = \"America/Dawson_Creek\"\n    America_Denver = \"America/Denver\"\n    America_Detroit = \"America/Detroit\"\n    America_Dominica = \"America/Dominica\"\n    America_Edmonton = \"America/Edmonton\"\n    America_Eirunepe = \"America/Eirunepe\"\n    America_El_Salvador = \"America/El_Salvador\"\n    America_Ensenada = \"America/Ensenada\"\n    America_Fort_Nelson = \"America/Fort_Nelson\"\n    America_Fort_Wayne = \"America/Fort_Wayne\"\n    America_Fortaleza = \"America/Fortaleza\"\n    America_Glace_Bay = \"America/Glace_Bay\"\n    America_Godthab = \"America/Godthab\"\n    America_Goose_Bay = \"America/Goose_Bay\"\n    America_Grand_Turk = \"America/Grand_Turk\"\n    America_Grenada = \"America/Grenada\"\n    America_Guadeloupe = \"America/Guadeloupe\"\n    America_Guatemala = \"America/Guatemala\"\n    America_Guayaquil = \"America/Guayaquil\"\n    America_Guyana = \"America/Guyana\"\n    America_Halifax = \"America/Halifax\"\n    America_Havana = \"America/Havana\"\n    America_Hermosillo = \"America/Hermosillo\"\n    America_Indiana_Indianapolis = \"America/Indiana/Indianapolis\"\n    America_Indiana_Knox = \"America/Indiana/Knox\"\n    America_Indiana_Marengo = \"America/Indiana/Marengo\"\n    America_Indiana_Petersburg = \"America/Indiana/Petersburg\"\n    America_Indiana_Tell_City = \"America/Indiana/Tell_City\"\n    America_Indiana_Vevay = \"America/Indiana/Vevay\"\n    America_Indiana_Vincennes = \"America/Indiana/Vincennes\"\n    America_Indiana_Winamac = \"America/Indiana/Winamac\"\n    America_Indianapolis = \"America/Indianapolis\"\n    America_Inuvik = \"America/Inuvik\"\n    America_Iqaluit = \"America/Iqaluit\"\n    America_Jamaica = \"America/Jamaica\"\n    America_Jujuy = \"America/Jujuy\"\n    America_Juneau = \"America/Juneau\"\n    America_Kentucky_Louisville = \"America/Kentucky/Louisville\"\n    America_Kentucky_Monticello = \"America/Kentucky/Monticello\"\n    America_Knox_IN = \"America/Knox_IN\"\n    America_Kralendijk = \"America/Kralendijk\"\n    America_La_Paz = \"America/La_Paz\"\n    America_Lima = \"America/Lima\"\n    America_Los_Angeles = \"America/Los_Angeles\"\n    America_Louisville = \"America/Louisville\"\n    America_Lower_Princes = \"America/Lower_Princes\"\n    America_Maceio = \"America/Maceio\"\n    America_Managua = \"America/Managua\"\n    America_Manaus = \"America/Manaus\"\n    America_Marigot = \"America/Marigot\"\n    America_Martinique = \"America/Martinique\"\n    America_Matamoros = \"America/Matamoros\"\n    America_Mazatlan = \"America/Mazatlan\"\n    America_Mendoza = \"America/Mendoza\"\n    America_Menominee = \"America/Menominee\"\n    America_Merida = \"America/Merida\"\n    America_Metlakatla = \"America/Metlakatla\"\n    America_Mexico_City = \"America/Mexico_City\"\n    America_Miquelon = \"America/Miquelon\"\n    America_Moncton = \"America/Moncton\"\n    America_Monterrey = \"America/Monterrey\"\n    America_Montevideo = \"America/Montevideo\"\n    America_Montreal = \"America/Montreal\"\n    America_Montserrat = \"America/Montserrat\"\n    America_Nassau = \"America/Nassau\"\n    America_New_York = \"America/New_York\"\n    America_Nipigon = \"America/Nipigon\"\n    America_Nome = \"America/Nome\"\n    America_Noronha = \"America/Noronha\"\n    America_North_Dakota_Beulah = \"America/North_Dakota/Beulah\"\n    America_North_Dakota_Center = \"America/North_Dakota/Center\"\n    America_North_Dakota_New_Salem = \"America/North_Dakota/New_Salem\"\n    America_Nuuk = \"America/Nuuk\"\n    America_Ojinaga = \"America/Ojinaga\"\n    America_Panama = \"America/Panama\"\n    America_Pangnirtung = \"America/Pangnirtung\"\n    America_Paramaribo = \"America/Paramaribo\"\n    America_Phoenix = \"America/Phoenix\"\n    America_Port_au_Prince = \"America/Port-au-Prince\"\n    America_Port_of_Spain = \"America/Port_of_Spain\"\n    America_Porto_Acre = \"America/Porto_Acre\"\n    America_Porto_Velho = \"America/Porto_Velho\"\n    America_Puerto_Rico = \"America/Puerto_Rico\"\n    America_Punta_Arenas = \"America/Punta_Arenas\"\n    America_Rainy_River = \"America/Rainy_River\"\n    America_Rankin_Inlet = \"America/Rankin_Inlet\"\n    America_Recife = \"America/Recife\"\n    America_Regina = \"America/Regina\"\n    America_Resolute = \"America/Resolute\"\n    America_Rio_Branco = \"America/Rio_Branco\"\n    America_Rosario = \"America/Rosario\"\n    America_Santa_Isabel = \"America/Santa_Isabel\"\n    America_Santarem = \"America/Santarem\"\n    America_Santiago = \"America/Santiago\"\n    America_Santo_Domingo = \"America/Santo_Domingo\"\n    America_Sao_Paulo = \"America/Sao_Paulo\"\n    America_Scoresbysund = \"America/Scoresbysund\"\n    America_Shiprock = \"America/Shiprock\"\n    America_Sitka = \"America/Sitka\"\n    America_St_Barthelemy = \"America/St_Barthelemy\"\n    America_St_Johns = \"America/St_Johns\"\n    America_St_Kitts = \"America/St_Kitts\"\n    America_St_Lucia = \"America/St_Lucia\"\n    America_St_Thomas = \"America/St_Thomas\"\n    America_St_Vincent = \"America/St_Vincent\"\n    America_Swift_Current = \"America/Swift_Current\"\n    America_Tegucigalpa = \"America/Tegucigalpa\"\n    America_Thule = \"America/Thule\"\n    America_Thunder_Bay = \"America/Thunder_Bay\"\n    America_Tijuana = \"America/Tijuana\"\n    America_Toronto = \"America/Toronto\"\n    America_Tortola = \"America/Tortola\"\n    America_Vancouver = \"America/Vancouver\"\n    America_Virgin = \"America/Virgin\"\n    America_Whitehorse = \"America/Whitehorse\"\n    America_Winnipeg = \"America/Winnipeg\"\n    America_Yakutat = \"America/Yakutat\"\n    America_Yellowknife = \"America/Yellowknife\"\n    Antarctica_Casey = \"Antarctica/Casey\"\n    Antarctica_Davis = \"Antarctica/Davis\"\n    Antarctica_DumontDUrville = \"Antarctica/DumontDUrville\"\n    Antarctica_Macquarie = \"Antarctica/Macquarie\"\n    Antarctica_Mawson = \"Antarctica/Mawson\"\n    Antarctica_McMurdo = \"Antarctica/McMurdo\"\n    Antarctica_Palmer = \"Antarctica/Palmer\"\n    Antarctica_Rothera = \"Antarctica/Rothera\"\n    Antarctica_South_Pole = \"Antarctica/South_Pole\"\n    Antarctica_Syowa = \"Antarctica/Syowa\"\n    Antarctica_Troll = \"Antarctica/Troll\"\n    Antarctica_Vostok = \"Antarctica/Vostok\"\n    Arctic_Longyearbyen = \"Arctic/Longyearbyen\"\n    Asia_Aden = \"Asia/Aden\"\n    Asia_Almaty = \"Asia/Almaty\"\n    Asia_Amman = \"Asia/Amman\"\n    Asia_Anadyr = \"Asia/Anadyr\"\n    Asia_Aqtau = \"Asia/Aqtau\"\n    Asia_Aqtobe = \"Asia/Aqtobe\"\n    Asia_Ashgabat = \"Asia/Ashgabat\"\n    Asia_Ashkhabad = \"Asia/Ashkhabad\"\n    Asia_Atyrau = \"Asia/Atyrau\"\n    Asia_Baghdad = \"Asia/Baghdad\"\n    Asia_Bahrain = \"Asia/Bahrain\"\n    Asia_Baku = \"Asia/Baku\"\n    Asia_Bangkok = \"Asia/Bangkok\"\n    Asia_Barnaul = \"Asia/Barnaul\"\n    Asia_Beirut = \"Asia/Beirut\"\n    Asia_Bishkek = \"Asia/Bishkek\"\n    Asia_Brunei = \"Asia/Brunei\"\n    Asia_Calcutta = \"Asia/Calcutta\"\n    Asia_Chita = \"Asia/Chita\"\n    Asia_Choibalsan = \"Asia/Choibalsan\"\n    Asia_Chongqing = \"Asia/Chongqing\"\n    Asia_Chungking = \"Asia/Chungking\"\n    Asia_Colombo = \"Asia/Colombo\"\n    Asia_Dacca = \"Asia/Dacca\"\n    Asia_Damascus = \"Asia/Damascus\"\n    Asia_Dhaka = \"Asia/Dhaka\"\n    Asia_Dili = \"Asia/Dili\"\n    Asia_Dubai = \"Asia/Dubai\"\n    Asia_Dushanbe = \"Asia/Dushanbe\"\n    Asia_Famagusta = \"Asia/Famagusta\"\n    Asia_Gaza = \"Asia/Gaza\"\n    Asia_Harbin = \"Asia/Harbin\"\n    Asia_Hebron = \"Asia/Hebron\"\n    Asia_Ho_Chi_Minh = \"Asia/Ho_Chi_Minh\"\n    Asia_Hong_Kong = \"Asia/Hong_Kong\"\n    Asia_Hovd = \"Asia/Hovd\"\n    Asia_Irkutsk = \"Asia/Irkutsk\"\n    Asia_Istanbul = \"Asia/Istanbul\"\n    Asia_Jakarta = \"Asia/Jakarta\"\n    Asia_Jayapura = \"Asia/Jayapura\"\n    Asia_Jerusalem = \"Asia/Jerusalem\"\n    Asia_Kabul = \"Asia/Kabul\"\n    Asia_Kamchatka = \"Asia/Kamchatka\"\n    Asia_Karachi = \"Asia/Karachi\"\n    Asia_Kashgar = \"Asia/Kashgar\"\n    Asia_Kathmandu = \"Asia/Kathmandu\"\n    Asia_Katmandu = \"Asia/Katmandu\"\n    Asia_Khandyga = \"Asia/Khandyga\"\n    Asia_Kolkata = \"Asia/Kolkata\"\n    Asia_Krasnoyarsk = \"Asia/Krasnoyarsk\"\n    Asia_Kuala_Lumpur = \"Asia/Kuala_Lumpur\"\n    Asia_Kuching = \"Asia/Kuching\"\n    Asia_Kuwait = \"Asia/Kuwait\"\n    Asia_Macao = \"Asia/Macao\"\n    Asia_Macau = \"Asia/Macau\"\n    Asia_Magadan = \"Asia/Magadan\"\n    Asia_Makassar = \"Asia/Makassar\"\n    Asia_Manila = \"Asia/Manila\"\n    Asia_Muscat = \"Asia/Muscat\"\n    Asia_Nicosia = \"Asia/Nicosia\"\n    Asia_Novokuznetsk = \"Asia/Novokuznetsk\"\n    Asia_Novosibirsk = \"Asia/Novosibirsk\"\n    Asia_Omsk = \"Asia/Omsk\"\n    Asia_Oral = \"Asia/Oral\"\n    Asia_Phnom_Penh = \"Asia/Phnom_Penh\"\n    Asia_Pontianak = \"Asia/Pontianak\"\n    Asia_Pyongyang = \"Asia/Pyongyang\"\n    Asia_Qatar = \"Asia/Qatar\"\n    Asia_Qostanay = \"Asia/Qostanay\"\n    Asia_Qyzylorda = \"Asia/Qyzylorda\"\n    Asia_Rangoon = \"Asia/Rangoon\"\n    Asia_Riyadh = \"Asia/Riyadh\"\n    Asia_Saigon = \"Asia/Saigon\"\n    Asia_Sakhalin = \"Asia/Sakhalin\"\n    Asia_Samarkand = \"Asia/Samarkand\"\n    Asia_Seoul = \"Asia/Seoul\"\n    Asia_Shanghai = \"Asia/Shanghai\"\n    Asia_Singapore = \"Asia/Singapore\"\n    Asia_Srednekolymsk = \"Asia/Srednekolymsk\"\n    Asia_Taipei = \"Asia/Taipei\"\n    Asia_Tashkent = \"Asia/Tashkent\"\n    Asia_Tbilisi = \"Asia/Tbilisi\"\n    Asia_Tehran = \"Asia/Tehran\"\n    Asia_Tel_Aviv = \"Asia/Tel_Aviv\"\n    Asia_Thimbu = \"Asia/Thimbu\"\n    Asia_Thimphu = \"Asia/Thimphu\"\n    Asia_Tokyo = \"Asia/Tokyo\"\n    Asia_Tomsk = \"Asia/Tomsk\"\n    Asia_Ujung_Pandang = \"Asia/Ujung_Pandang\"\n    Asia_Ulaanbaatar = \"Asia/Ulaanbaatar\"\n    Asia_Ulan_Bator = \"Asia/Ulan_Bator\"\n    Asia_Urumqi = \"Asia/Urumqi\"\n    Asia_Ust_Nera = \"Asia/Ust-Nera\"\n    Asia_Vientiane = \"Asia/Vientiane\"\n    Asia_Vladivostok = \"Asia/Vladivostok\"\n    Asia_Yakutsk = \"Asia/Yakutsk\"\n    Asia_Yangon = \"Asia/Yangon\"\n    Asia_Yekaterinburg = \"Asia/Yekaterinburg\"\n    Asia_Yerevan = \"Asia/Yerevan\"\n    Atlantic_Azores = \"Atlantic/Azores\"\n    Atlantic_Bermuda = \"Atlantic/Bermuda\"\n    Atlantic_Canary = \"Atlantic/Canary\"\n    Atlantic_Cape_Verde = \"Atlantic/Cape_Verde\"\n    Atlantic_Faeroe = \"Atlantic/Faeroe\"\n    Atlantic_Faroe = \"Atlantic/Faroe\"\n    Atlantic_Jan_Mayen = \"Atlantic/Jan_Mayen\"\n    Atlantic_Madeira = \"Atlantic/Madeira\"\n    Atlantic_Reykjavik = \"Atlantic/Reykjavik\"\n    Atlantic_South_Georgia = \"Atlantic/South_Georgia\"\n    Atlantic_St_Helena = \"Atlantic/St_Helena\"\n    Atlantic_Stanley = \"Atlantic/Stanley\"\n    Australia_ACT = \"Australia/ACT\"\n    Australia_Adelaide = \"Australia/Adelaide\"\n    Australia_Brisbane = \"Australia/Brisbane\"\n    Australia_Broken_Hill = \"Australia/Broken_Hill\"\n    Australia_Canberra = \"Australia/Canberra\"\n    Australia_Currie = \"Australia/Currie\"\n    Australia_Darwin = \"Australia/Darwin\"\n    Australia_Eucla = \"Australia/Eucla\"\n    Australia_Hobart = \"Australia/Hobart\"\n    Australia_LHI = \"Australia/LHI\"\n    Australia_Lindeman = \"Australia/Lindeman\"\n    Australia_Lord_Howe = \"Australia/Lord_Howe\"\n    Australia_Melbourne = \"Australia/Melbourne\"\n    Australia_NSW = \"Australia/NSW\"\n    Australia_North = \"Australia/North\"\n    Australia_Perth = \"Australia/Perth\"\n    Australia_Queensland = \"Australia/Queensland\"\n    Australia_South = \"Australia/South\"\n    Australia_Sydney = \"Australia/Sydney\"\n    Australia_Tasmania = \"Australia/Tasmania\"\n    Australia_Victoria = \"Australia/Victoria\"\n    Australia_West = \"Australia/West\"\n    Australia_Yancowinna = \"Australia/Yancowinna\"\n    Brazil_Acre = \"Brazil/Acre\"\n    Brazil_DeNoronha = \"Brazil/DeNoronha\"\n    Brazil_East = \"Brazil/East\"\n    Brazil_West = \"Brazil/West\"\n    CET = \"CET\"\n    CST6CDT = \"CST6CDT\"\n    Canada_Atlantic = \"Canada/Atlantic\"\n    Canada_Central = \"Canada/Central\"\n    Canada_Eastern = \"Canada/Eastern\"\n    Canada_Mountain = \"Canada/Mountain\"\n    Canada_Newfoundland = \"Canada/Newfoundland\"\n    Canada_Pacific = \"Canada/Pacific\"\n    Canada_Saskatchewan = \"Canada/Saskatchewan\"\n    Canada_Yukon = \"Canada/Yukon\"\n    Chile_Continental = \"Chile/Continental\"\n    Chile_EasterIsland = \"Chile/EasterIsland\"\n    Cuba = \"Cuba\"\n    EET = \"EET\"\n    EST = \"EST\"\n    EST5EDT = \"EST5EDT\"\n    Egypt = \"Egypt\"\n    Eire = \"Eire\"\n    Etc_GMT = \"Etc/GMT\"\n    Etc_GMT_0 = \"Etc/GMT+0\"\n    Etc_GMT_1 = \"Etc/GMT+1\"\n    Etc_GMT_10 = \"Etc/GMT+10\"\n    Etc_GMT_11 = \"Etc/GMT+11\"\n    Etc_GMT_12 = \"Etc/GMT+12\"\n    Etc_GMT_2 = \"Etc/GMT+2\"\n    Etc_GMT_3 = \"Etc/GMT+3\"\n    Etc_GMT_4 = \"Etc/GMT+4\"\n    Etc_GMT_5 = \"Etc/GMT+5\"\n    Etc_GMT_6 = \"Etc/GMT+6\"\n    Etc_GMT_7 = \"Etc/GMT+7\"\n    Etc_GMT_8 = \"Etc/GMT+8\"\n    Etc_GMT_9 = \"Etc/GMT+9\"\n    Etc_GMT_0_1 = \"Etc/GMT-0\"\n    Etc_GMT_1_1 = \"Etc/GMT-1\"\n    Etc_GMT_10_1 = \"Etc/GMT-10\"\n    Etc_GMT_11_1 = \"Etc/GMT-11\"\n    Etc_GMT_12_1 = \"Etc/GMT-12\"\n    Etc_GMT_13 = \"Etc/GMT-13\"\n    Etc_GMT_14 = \"Etc/GMT-14\"\n    Etc_GMT_2_1 = \"Etc/GMT-2\"\n    Etc_GMT_3_1 = \"Etc/GMT-3\"\n    Etc_GMT_4_1 = \"Etc/GMT-4\"\n    Etc_GMT_5_1 = \"Etc/GMT-5\"\n    Etc_GMT_6_1 = \"Etc/GMT-6\"\n    Etc_GMT_7_1 = \"Etc/GMT-7\"\n    Etc_GMT_8_1 = \"Etc/GMT-8\"\n    Etc_GMT_9_1 = \"Etc/GMT-9\"\n    Etc_GMT0 = \"Etc/GMT0\"\n    Etc_Greenwich = \"Etc/Greenwich\"\n    Etc_UCT = \"Etc/UCT\"\n    Etc_UTC = \"Etc/UTC\"\n    Etc_Universal = \"Etc/Universal\"\n    Etc_Zulu = \"Etc/Zulu\"\n    Europe_Amsterdam = \"Europe/Amsterdam\"\n    Europe_Andorra = \"Europe/Andorra\"\n    Europe_Astrakhan = \"Europe/Astrakhan\"\n    Europe_Athens = \"Europe/Athens\"\n    Europe_Belfast = \"Europe/Belfast\"\n    Europe_Belgrade = \"Europe/Belgrade\"\n    Europe_Berlin = \"Europe/Berlin\"\n    Europe_Bratislava = \"Europe/Bratislava\"\n    Europe_Brussels = \"Europe/Brussels\"\n    Europe_Bucharest = \"Europe/Bucharest\"\n    Europe_Budapest = \"Europe/Budapest\"\n    Europe_Busingen = \"Europe/Busingen\"\n    Europe_Chisinau = \"Europe/Chisinau\"\n    Europe_Copenhagen = \"Europe/Copenhagen\"\n    Europe_Dublin = \"Europe/Dublin\"\n    Europe_Gibraltar = \"Europe/Gibraltar\"\n    Europe_Guernsey = \"Europe/Guernsey\"\n    Europe_Helsinki = \"Europe/Helsinki\"\n    Europe_Isle_of_Man = \"Europe/Isle_of_Man\"\n    Europe_Istanbul = \"Europe/Istanbul\"\n    Europe_Jersey = \"Europe/Jersey\"\n    Europe_Kaliningrad = \"Europe/Kaliningrad\"\n    Europe_Kiev = \"Europe/Kiev\"\n    Europe_Kirov = \"Europe/Kirov\"\n    Europe_Kyiv = \"Europe/Kyiv\"\n    Europe_Lisbon = \"Europe/Lisbon\"\n    Europe_Ljubljana = \"Europe/Ljubljana\"\n    Europe_London = \"Europe/London\"\n    Europe_Luxembourg = \"Europe/Luxembourg\"\n    Europe_Madrid = \"Europe/Madrid\"\n    Europe_Malta = \"Europe/Malta\"\n    Europe_Mariehamn = \"Europe/Mariehamn\"\n    Europe_Minsk = \"Europe/Minsk\"\n    Europe_Monaco = \"Europe/Monaco\"\n    Europe_Moscow = \"Europe/Moscow\"\n    Europe_Nicosia = \"Europe/Nicosia\"\n    Europe_Oslo = \"Europe/Oslo\"\n    Europe_Paris = \"Europe/Paris\"\n    Europe_Podgorica = \"Europe/Podgorica\"\n    Europe_Prague = \"Europe/Prague\"\n    Europe_Riga = \"Europe/Riga\"\n    Europe_Rome = \"Europe/Rome\"\n    Europe_Samara = \"Europe/Samara\"\n    Europe_San_Marino = \"Europe/San_Marino\"\n    Europe_Sarajevo = \"Europe/Sarajevo\"\n    Europe_Saratov = \"Europe/Saratov\"\n    Europe_Simferopol = \"Europe/Simferopol\"\n    Europe_Skopje = \"Europe/Skopje\"\n    Europe_Sofia = \"Europe/Sofia\"\n    Europe_Stockholm = \"Europe/Stockholm\"\n    Europe_Tallinn = \"Europe/Tallinn\"\n    Europe_Tirane = \"Europe/Tirane\"\n    Europe_Tiraspol = \"Europe/Tiraspol\"\n    Europe_Ulyanovsk = \"Europe/Ulyanovsk\"\n    Europe_Uzhgorod = \"Europe/Uzhgorod\"\n    Europe_Vaduz = \"Europe/Vaduz\"\n    Europe_Vatican = \"Europe/Vatican\"\n    Europe_Vienna = \"Europe/Vienna\"\n    Europe_Vilnius = \"Europe/Vilnius\"\n    Europe_Volgograd = \"Europe/Volgograd\"\n    Europe_Warsaw = \"Europe/Warsaw\"\n    Europe_Zagreb = \"Europe/Zagreb\"\n    Europe_Zaporozhye = \"Europe/Zaporozhye\"\n    Europe_Zurich = \"Europe/Zurich\"\n    Factory = \"Factory\"\n    GB = \"GB\"\n    GB_Eire = \"GB-Eire\"\n    GMT = \"GMT\"\n    GMT_0 = \"GMT+0\"\n    GMT_0_1 = \"GMT-0\"\n    GMT0 = \"GMT0\"\n    Greenwich = \"Greenwich\"\n    HST = \"HST\"\n    Hongkong = \"Hongkong\"\n    Iceland = \"Iceland\"\n    Indian_Antananarivo = \"Indian/Antananarivo\"\n    Indian_Chagos = \"Indian/Chagos\"\n    Indian_Christmas = \"Indian/Christmas\"\n    Indian_Cocos = \"Indian/Cocos\"\n    Indian_Comoro = \"Indian/Comoro\"\n    Indian_Kerguelen = \"Indian/Kerguelen\"\n    Indian_Mahe = \"Indian/Mahe\"\n    Indian_Maldives = \"Indian/Maldives\"\n    Indian_Mauritius = \"Indian/Mauritius\"\n    Indian_Mayotte = \"Indian/Mayotte\"\n    Indian_Reunion = \"Indian/Reunion\"\n    Iran = \"Iran\"\n    Israel = \"Israel\"\n    Jamaica = \"Jamaica\"\n    Japan = \"Japan\"\n    Kwajalein = \"Kwajalein\"\n    Libya = \"Libya\"\n    MET = \"MET\"\n    MST = \"MST\"\n    MST7MDT = \"MST7MDT\"\n    Mexico_BajaNorte = \"Mexico/BajaNorte\"\n    Mexico_BajaSur = \"Mexico/BajaSur\"\n    Mexico_General = \"Mexico/General\"\n    NZ = \"NZ\"\n    NZ_CHAT = \"NZ-CHAT\"\n    Navajo = \"Navajo\"\n    PRC = \"PRC\"\n    PST8PDT = \"PST8PDT\"\n    Pacific_Apia = \"Pacific/Apia\"\n    Pacific_Auckland = \"Pacific/Auckland\"\n    Pacific_Bougainville = \"Pacific/Bougainville\"\n    Pacific_Chatham = \"Pacific/Chatham\"\n    Pacific_Chuuk = \"Pacific/Chuuk\"\n    Pacific_Easter = \"Pacific/Easter\"\n    Pacific_Efate = \"Pacific/Efate\"\n    Pacific_Enderbury = \"Pacific/Enderbury\"\n    Pacific_Fakaofo = \"Pacific/Fakaofo\"\n    Pacific_Fiji = \"Pacific/Fiji\"\n    Pacific_Funafuti = \"Pacific/Funafuti\"\n    Pacific_Galapagos = \"Pacific/Galapagos\"\n    Pacific_Gambier = \"Pacific/Gambier\"\n    Pacific_Guadalcanal = \"Pacific/Guadalcanal\"\n    Pacific_Guam = \"Pacific/Guam\"\n    Pacific_Honolulu = \"Pacific/Honolulu\"\n    Pacific_Johnston = \"Pacific/Johnston\"\n    Pacific_Kanton = \"Pacific/Kanton\"\n    Pacific_Kiritimati = \"Pacific/Kiritimati\"\n    Pacific_Kosrae = \"Pacific/Kosrae\"\n    Pacific_Kwajalein = \"Pacific/Kwajalein\"\n    Pacific_Majuro = \"Pacific/Majuro\"\n    Pacific_Marquesas = \"Pacific/Marquesas\"\n    Pacific_Midway = \"Pacific/Midway\"\n    Pacific_Nauru = \"Pacific/Nauru\"\n    Pacific_Niue = \"Pacific/Niue\"\n    Pacific_Norfolk = \"Pacific/Norfolk\"\n    Pacific_Noumea = \"Pacific/Noumea\"\n    Pacific_Pago_Pago = \"Pacific/Pago_Pago\"\n    Pacific_Palau = \"Pacific/Palau\"\n    Pacific_Pitcairn = \"Pacific/Pitcairn\"\n    Pacific_Pohnpei = \"Pacific/Pohnpei\"\n    Pacific_Ponape = \"Pacific/Ponape\"\n    Pacific_Port_Moresby = \"Pacific/Port_Moresby\"\n    Pacific_Rarotonga = \"Pacific/Rarotonga\"\n    Pacific_Saipan = \"Pacific/Saipan\"\n    Pacific_Samoa = \"Pacific/Samoa\"\n    Pacific_Tahiti = \"Pacific/Tahiti\"\n    Pacific_Tarawa = \"Pacific/Tarawa\"\n    Pacific_Tongatapu = \"Pacific/Tongatapu\"\n    Pacific_Truk = \"Pacific/Truk\"\n    Pacific_Wake = \"Pacific/Wake\"\n    Pacific_Wallis = \"Pacific/Wallis\"\n    Pacific_Yap = \"Pacific/Yap\"\n    Poland = \"Poland\"\n    Portugal = \"Portugal\"\n    ROC = \"ROC\"\n    ROK = \"ROK\"\n    Singapore = \"Singapore\"\n    Turkey = \"Turkey\"\n    UCT = \"UCT\"\n    US_Alaska = \"US/Alaska\"\n    US_Aleutian = \"US/Aleutian\"\n    US_Arizona = \"US/Arizona\"\n    US_Central = \"US/Central\"\n    US_East_Indiana = \"US/East-Indiana\"\n    US_Eastern = \"US/Eastern\"\n    US_Hawaii = \"US/Hawaii\"\n    US_Indiana_Starke = \"US/Indiana-Starke\"\n    US_Michigan = \"US/Michigan\"\n    US_Mountain = \"US/Mountain\"\n    US_Pacific = \"US/Pacific\"\n    US_Samoa = \"US/Samoa\"\n    UTC = \"UTC\"\n    Universal = \"Universal\"\n    W_SU = \"W-SU\"\n    WET = \"WET\"\n    Zulu = \"Zulu\"\n    localtime = \"localtime\"\n</code></pre>"},{"location":"api/models/#gcapi.models.TimezoneRequest","title":"TimezoneRequest","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass TimezoneRequest(BaseModel):\n    timezone: TimezoneEnum\n</code></pre>"},{"location":"api/models/#gcapi.models.User","title":"User","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass User(BaseModel):\n    username: str\n</code></pre>"},{"location":"api/models/#gcapi.models.UserProfile","title":"UserProfile","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass UserProfile(BaseModel):\n    user: User\n    mugshot: str\n    institution: str\n    department: str\n    location: LocationEnum\n    website: Optional[str]\n</code></pre>"},{"location":"api/models/#gcapi.models.UserRequest","title":"UserRequest","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass UserRequest(BaseModel):\n    username: str\n</code></pre>"},{"location":"api/models/#gcapi.models.UserUpload","title":"UserUpload","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass UserUpload(BaseModel):\n    pk: str\n    created: str\n    filename: str\n    key: str\n    s3_upload_id: str\n    status: str\n    api_url: str\n</code></pre>"},{"location":"api/models/#gcapi.models.UserUploadComplete","title":"UserUploadComplete","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass UserUploadComplete(BaseModel):\n    pk: str\n    created: str\n    filename: str\n    key: str\n    s3_upload_id: str\n    status: str\n    api_url: str\n</code></pre>"},{"location":"api/models/#gcapi.models.UserUploadCreate","title":"UserUploadCreate","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass UserUploadCreate(BaseModel):\n    pk: str\n    created: str\n    filename: str\n    key: str\n    s3_upload_id: str\n    status: str\n    api_url: str\n</code></pre>"},{"location":"api/models/#gcapi.models.UserUploadCreateRequest","title":"UserUploadCreateRequest","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass UserUploadCreateRequest(BaseModel):\n    filename: str\n</code></pre>"},{"location":"api/models/#gcapi.models.UserUploadParts","title":"UserUploadParts","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass UserUploadParts(BaseModel):\n    pk: str\n    created: str\n    filename: str\n    key: str\n    s3_upload_id: str\n    status: str\n    api_url: str\n    parts: list[Part]\n</code></pre>"},{"location":"api/models/#gcapi.models.UserUploadPresignedURLs","title":"UserUploadPresignedURLs","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass UserUploadPresignedURLs(BaseModel):\n    pk: str\n    created: str\n    filename: str\n    key: str\n    s3_upload_id: str\n    status: str\n    api_url: str\n    presigned_urls: dict[str, str]\n</code></pre>"},{"location":"api/models/#gcapi.models.WindowPreset","title":"WindowPreset","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass WindowPreset(BaseModel):\n    pk: int\n    slug: str\n    title: str\n    description: Optional[str]\n    center: Optional[int]\n    width: Optional[int]\n    lower_percentile: Optional[int]\n    upper_percentile: Optional[int]\n</code></pre>"},{"location":"api/models/#gcapi.models.Workstation","title":"Workstation","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass Workstation(BaseModel):\n    pk: str\n    title: str\n    slug: str\n    url: str\n</code></pre>"},{"location":"api/models/#gcapi.models.WorkstationConfig","title":"WorkstationConfig","text":"Source code in <code>gcapi/models.py</code> <pre><code>@dataclass\nclass WorkstationConfig(BaseModel):\n    pk: str\n    slug: str\n    title: str\n    description: Optional[str]\n    created: str\n    modified: str\n    creator: str\n    image_context: str\n    window_presets: list[WindowPreset]\n    default_window_preset: WindowPreset\n    default_slab_thickness_mm: float\n    default_slab_render_method: str\n    default_orientation: str\n    default_overlay_alpha: float\n    overlay_luts: list[LookUpTable]\n    default_overlay_lut: LookUpTable\n    default_overlay_interpolation: str\n    default_image_interpolation: str\n    default_limit_view_area_to_image_volume: Optional[bool]\n    ghosting_slice_depth: Optional[int]\n    overlay_segments: Optional[Any]\n    key_bindings: Optional[Any]\n    default_zoom_scale: float\n    default_brush_size: Optional[Decimal]\n    default_annotation_color: Optional[str]\n    default_annotation_line_width: Optional[int]\n    show_image_info_plugin: Optional[bool]\n    show_display_plugin: Optional[bool]\n    show_image_switcher_plugin: Optional[bool]\n    show_algorithm_output_plugin: Optional[bool]\n    show_overlay_plugin: Optional[bool]\n    show_annotation_statistics_plugin: Optional[bool]\n    show_swivel_tool: Optional[bool]\n    show_invert_tool: Optional[bool]\n    show_flip_tool: Optional[bool]\n    show_window_level_tool: Optional[bool]\n    show_reset_tool: Optional[bool]\n    show_overlay_selection_tool: Optional[bool]\n    show_lut_selection_tool: Optional[bool]\n    show_annotation_counter_tool: Optional[bool]\n    enabled_preprocessors: list[str]\n    auto_jump_center_of_gravity: Optional[bool]\n    link_images: Optional[bool]\n    link_panning: Optional[bool]\n    link_zooming: Optional[bool]\n    link_slicing: Optional[bool]\n    link_orienting: Optional[bool]\n    link_windowing: Optional[bool]\n    link_inverting: Optional[bool]\n    link_flipping: Optional[bool]\n    point_bounding_box_size_mm: float\n</code></pre>"},{"location":"api/raw_image_upload_sessions/","title":"<code>Client.raw_image_upload_sessions</code>","text":""},{"location":"api/raw_image_upload_sessions/#gcapi.client.UploadSessionsAPI.create","title":"create","text":"<pre><code>create(**kwargs: Any) -&gt; gcapi.models.RawImageUploadSession\n</code></pre> <p>Create a new resource via the API.</p> <p>Parameters:</p> <ul> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Field values for the new resource.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>RawImageUploadSession</code>           \u2013            <p>The created resource instance.</p> </li> </ul>"},{"location":"api/raw_image_upload_sessions/#gcapi.client.UploadSessionsAPI.delete","title":"delete","text":"<pre><code>delete(pk: str) -&gt; Any\n</code></pre> <p>Delete a resource from the API.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>str</code>)           \u2013            <p>Primary key of the resource to delete.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>           \u2013            <p>Response from the delete operation.</p> </li> </ul>"},{"location":"api/raw_image_upload_sessions/#gcapi.client.UploadSessionsAPI.detail","title":"detail","text":"<pre><code>detail(\n    pk: Optional[str] = None,\n    api_url: Optional[str] = None,\n    **params: Any\n) -&gt; gcapi.models.RawImageUploadSession\n</code></pre> <p>Retrieve a specific resource by primary key, URL, or search parameters.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Primary key of the resource to retrieve.</p> </li> <li> <code>api_url</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Direct API URL of the resource to retrieve.</p> </li> <li> <code>**params</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Search parameters to find a unique resource, such as <code>slug=\"your-slug\"</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>RawImageUploadSession</code>           \u2013            <p>The requested resource instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If more than one or none of pk, api_url, or params are specified.</p> </li> <li> <code>ObjectNotFound</code>             \u2013            <p>If no resource is found matching the criteria.</p> </li> <li> <code>MultipleObjectsReturned</code>             \u2013            <p>If multiple resources match the search parameters.</p> </li> </ul>"},{"location":"api/raw_image_upload_sessions/#gcapi.client.UploadSessionsAPI.iterate_all","title":"iterate_all","text":"<pre><code>iterate_all(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; Iterator[gcapi.models.RawImageUploadSession]\n</code></pre> <p>Iterate through all resources from the API endpoint across all pages.</p> <p>This method automatically handles pagination and yields individual resources from all pages until all resources have been retrieved.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API requests.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>RawImageUploadSession</code>           \u2013            <p>Individual resources from the API endpoint.</p> </li> </ul>"},{"location":"api/raw_image_upload_sessions/#gcapi.client.UploadSessionsAPI.list","title":"list","text":"<pre><code>list(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; list[gcapi.models.RawImageUploadSession]\n</code></pre> <p>Retrieve a raw list of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[RawImageUploadSession]</code>           \u2013            <p>Raw JSON response from the API containing the list of resources.</p> </li> </ul>"},{"location":"api/raw_image_upload_sessions/#gcapi.client.UploadSessionsAPI.page","title":"page","text":"<pre><code>page(\n    offset: int = 0,\n    limit: int = 100,\n    params: Optional[dict[str, Any]] = None,\n) -&gt; PageResult[gcapi.models.RawImageUploadSession]\n</code></pre> <p>Retrieve a paginated set of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>offset</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The starting index for pagination (zero-based).</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>100</code> )           \u2013            <p>The maximum number of results to return in this page.</p> </li> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Additional query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PageResult[RawImageUploadSession]</code>           \u2013            <p>A paginated result containing the requested resources and metadata.</p> </li> </ul>"},{"location":"api/raw_image_upload_sessions/#gcapi.client.UploadSessionsAPI.partial_update","title":"partial_update","text":"<pre><code>partial_update(\n    pk: str, **kwargs: Any\n) -&gt; gcapi.models.RawImageUploadSession\n</code></pre> <p>Partially update an existing resource with only specified fields.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>str</code>)           \u2013            <p>Primary key of the resource to update.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Partial field values for the resource update.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>RawImageUploadSession</code>           \u2013            <p>The updated resource instance.</p> </li> </ul>"},{"location":"api/raw_image_upload_sessions/#gcapi.client.UploadSessionsAPI.update","title":"update","text":"<pre><code>update(\n    pk: str, **kwargs: Any\n) -&gt; gcapi.models.RawImageUploadSession\n</code></pre> <p>Update an existing resource with a complete replacement.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>str</code>)           \u2013            <p>Primary key of the resource to update.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Complete field values for the resource update.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>RawImageUploadSession</code>           \u2013            <p>The updated resource instance.</p> </li> </ul>"},{"location":"api/reader_studies/","title":"<code>Client.reader_studies</code>","text":""},{"location":"api/reader_studies/#gcapi.client.ReaderStudiesAPI.detail","title":"detail","text":"<pre><code>detail(\n    pk: Optional[str] = None,\n    api_url: Optional[str] = None,\n    **params: Any\n) -&gt; gcapi.models.ReaderStudy\n</code></pre> <p>Retrieve a specific resource by primary key, URL, or search parameters.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Primary key of the resource to retrieve.</p> </li> <li> <code>api_url</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Direct API URL of the resource to retrieve.</p> </li> <li> <code>**params</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Search parameters to find a unique resource, such as <code>slug=\"your-slug\"</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ReaderStudy</code>           \u2013            <p>The requested resource instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If more than one or none of pk, api_url, or params are specified.</p> </li> <li> <code>ObjectNotFound</code>             \u2013            <p>If no resource is found matching the criteria.</p> </li> <li> <code>MultipleObjectsReturned</code>             \u2013            <p>If multiple resources match the search parameters.</p> </li> </ul>"},{"location":"api/reader_studies/#gcapi.client.ReaderStudiesAPI.ground_truth","title":"ground_truth","text":"<pre><code>ground_truth(pk: str, case_pk: str) -&gt; dict\n</code></pre> <p>Get ground truth data for a specific case in a reader study.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>str</code>)           \u2013            <p>Primary key of the reader study.</p> </li> <li> <code>case_pk</code>               (<code>str</code>)           \u2013            <p>Primary key of the case.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>Ground truth data for the specified case.</p> </li> </ul>"},{"location":"api/reader_studies/#gcapi.client.ReaderStudiesAPI.iterate_all","title":"iterate_all","text":"<pre><code>iterate_all(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; Iterator[gcapi.models.ReaderStudy]\n</code></pre> <p>Iterate through all resources from the API endpoint across all pages.</p> <p>This method automatically handles pagination and yields individual resources from all pages until all resources have been retrieved.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API requests.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>ReaderStudy</code>           \u2013            <p>Individual resources from the API endpoint.</p> </li> </ul>"},{"location":"api/reader_studies/#gcapi.client.ReaderStudiesAPI.list","title":"list","text":"<pre><code>list(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; list[gcapi.models.ReaderStudy]\n</code></pre> <p>Retrieve a raw list of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[ReaderStudy]</code>           \u2013            <p>Raw JSON response from the API containing the list of resources.</p> </li> </ul>"},{"location":"api/reader_studies/#gcapi.client.ReaderStudiesAPI.page","title":"page","text":"<pre><code>page(\n    offset: int = 0,\n    limit: int = 100,\n    params: Optional[dict[str, Any]] = None,\n) -&gt; PageResult[gcapi.models.ReaderStudy]\n</code></pre> <p>Retrieve a paginated set of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>offset</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The starting index for pagination (zero-based).</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>100</code> )           \u2013            <p>The maximum number of results to return in this page.</p> </li> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Additional query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PageResult[ReaderStudy]</code>           \u2013            <p>A paginated result containing the requested resources and metadata.</p> </li> </ul>"},{"location":"api/retries/","title":"Retries","text":"<p>Sometimes API requests fail because of intermediate problems between the client and the server. These can be retried.</p>"},{"location":"api/retries/#default","title":"Default","text":"<p>By default, these server-side errors (i.e. <code>5xx</code>) are retried with an exponential-backoff strategy. This entails the client waits progressively longer and longer when it encounters the same retriable error.</p> <p>If the server response specifies a <code>\"Retry-After\"</code> header it will take precedence over any delays.</p>"},{"location":"api/retries/#customize-the-backoff-strategy","title":"Customize the backoff strategy","text":"<p>The backoff strategy is customizable by providing a simple class when initializing the client.</p> <p>For instance, in this example we wait 10 seconds every time we get an error we can retry:</p> <pre><code>import gcapi\nimport httpx\n\nclass RetryAfterTenSeconds(gcapi.retries.BaseRetryStrategy):\n    def get_delay(self, latest_response: httpx.Response):\n        return 10\n\ntoken = 'my-personal-api-token'\nclient = gcapi.Client(\n            token=token,\n            retry_strategy=RetryAfterTenSeconds,\n        )\n</code></pre>"},{"location":"api/retries/#retries_1","title":"Retries","text":"<p>Sometimes API requests fail in because of intermediate problems between the client and the server. These can be retried.</p>"},{"location":"api/retries/#default_1","title":"Default","text":"<p>By default, these server-side errors (i.e. <code>5xx</code>) are retried with an exponential-backoff strategy. This entails the client waits progressively longer and longer when it encounters the same retriable error.</p> <p>If the server response specifies a <code>\"Retry-After\"</code> header it will take precedence over any delays.</p>"},{"location":"api/retries/#customize-the-backoff-strategy_1","title":"Customize the backoff strategy","text":"<p>The backoff strategy is customizable by providing a simple class when initializing the client.</p> <p>For instance, in this example we wait 10 seconds everytime we get an error we can retry:</p> <pre><code>import gcapi\nimport httpx\n\nclass RetryAfterTenSeconds(gcapi.retries.BaseRetryStrategy):\n    def get_delay(self, latest_response: httpx.Response):\n        return 10\n\ntoken = 'my-personal-api-token'\nclient = gcapi.Client(\n            token=token,\n            retry_strategy=RetryAfterTenSeconds,\n        )\n</code></pre>"},{"location":"api/sessions/","title":"<code>Client.sessions</code>","text":""},{"location":"api/sessions/#gcapi.client.WorkstationSessionsAPI.detail","title":"detail","text":"<pre><code>detail(\n    pk: Optional[str] = None,\n    api_url: Optional[str] = None,\n    **params: Any\n) -&gt; gcapi.models.Session\n</code></pre> <p>Retrieve a specific resource by primary key, URL, or search parameters.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Primary key of the resource to retrieve.</p> </li> <li> <code>api_url</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Direct API URL of the resource to retrieve.</p> </li> <li> <code>**params</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Search parameters to find a unique resource, such as <code>slug=\"your-slug\"</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Session</code>           \u2013            <p>The requested resource instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If more than one or none of pk, api_url, or params are specified.</p> </li> <li> <code>ObjectNotFound</code>             \u2013            <p>If no resource is found matching the criteria.</p> </li> <li> <code>MultipleObjectsReturned</code>             \u2013            <p>If multiple resources match the search parameters.</p> </li> </ul>"},{"location":"api/sessions/#gcapi.client.WorkstationSessionsAPI.iterate_all","title":"iterate_all","text":"<pre><code>iterate_all(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; Iterator[gcapi.models.Session]\n</code></pre> <p>Iterate through all resources from the API endpoint across all pages.</p> <p>This method automatically handles pagination and yields individual resources from all pages until all resources have been retrieved.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API requests.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>Session</code>           \u2013            <p>Individual resources from the API endpoint.</p> </li> </ul>"},{"location":"api/sessions/#gcapi.client.WorkstationSessionsAPI.list","title":"list","text":"<pre><code>list(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; list[gcapi.models.Session]\n</code></pre> <p>Retrieve a raw list of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Session]</code>           \u2013            <p>Raw JSON response from the API containing the list of resources.</p> </li> </ul>"},{"location":"api/sessions/#gcapi.client.WorkstationSessionsAPI.page","title":"page","text":"<pre><code>page(\n    offset: int = 0,\n    limit: int = 100,\n    params: Optional[dict[str, Any]] = None,\n) -&gt; PageResult[gcapi.models.Session]\n</code></pre> <p>Retrieve a paginated set of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>offset</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The starting index for pagination (zero-based).</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>100</code> )           \u2013            <p>The maximum number of results to return in this page.</p> </li> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Additional query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PageResult[Session]</code>           \u2013            <p>A paginated result containing the requested resources and metadata.</p> </li> </ul>"},{"location":"api/uploads/","title":"<code>Client.uploads</code>","text":""},{"location":"api/uploads/#gcapi.client.UploadSessionsAPI.create","title":"create","text":"<pre><code>create(**kwargs: Any) -&gt; gcapi.models.RawImageUploadSession\n</code></pre> <p>Create a new resource via the API.</p> <p>Parameters:</p> <ul> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Field values for the new resource.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>RawImageUploadSession</code>           \u2013            <p>The created resource instance.</p> </li> </ul>"},{"location":"api/uploads/#gcapi.client.UploadSessionsAPI.delete","title":"delete","text":"<pre><code>delete(pk: str) -&gt; Any\n</code></pre> <p>Delete a resource from the API.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>str</code>)           \u2013            <p>Primary key of the resource to delete.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>           \u2013            <p>Response from the delete operation.</p> </li> </ul>"},{"location":"api/uploads/#gcapi.client.UploadSessionsAPI.detail","title":"detail","text":"<pre><code>detail(\n    pk: Optional[str] = None,\n    api_url: Optional[str] = None,\n    **params: Any\n) -&gt; gcapi.models.RawImageUploadSession\n</code></pre> <p>Retrieve a specific resource by primary key, URL, or search parameters.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Primary key of the resource to retrieve.</p> </li> <li> <code>api_url</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Direct API URL of the resource to retrieve.</p> </li> <li> <code>**params</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Search parameters to find a unique resource, such as <code>slug=\"your-slug\"</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>RawImageUploadSession</code>           \u2013            <p>The requested resource instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If more than one or none of pk, api_url, or params are specified.</p> </li> <li> <code>ObjectNotFound</code>             \u2013            <p>If no resource is found matching the criteria.</p> </li> <li> <code>MultipleObjectsReturned</code>             \u2013            <p>If multiple resources match the search parameters.</p> </li> </ul>"},{"location":"api/uploads/#gcapi.client.UploadSessionsAPI.iterate_all","title":"iterate_all","text":"<pre><code>iterate_all(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; Iterator[gcapi.models.RawImageUploadSession]\n</code></pre> <p>Iterate through all resources from the API endpoint across all pages.</p> <p>This method automatically handles pagination and yields individual resources from all pages until all resources have been retrieved.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API requests.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>RawImageUploadSession</code>           \u2013            <p>Individual resources from the API endpoint.</p> </li> </ul>"},{"location":"api/uploads/#gcapi.client.UploadSessionsAPI.list","title":"list","text":"<pre><code>list(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; list[gcapi.models.RawImageUploadSession]\n</code></pre> <p>Retrieve a raw list of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[RawImageUploadSession]</code>           \u2013            <p>Raw JSON response from the API containing the list of resources.</p> </li> </ul>"},{"location":"api/uploads/#gcapi.client.UploadSessionsAPI.page","title":"page","text":"<pre><code>page(\n    offset: int = 0,\n    limit: int = 100,\n    params: Optional[dict[str, Any]] = None,\n) -&gt; PageResult[gcapi.models.RawImageUploadSession]\n</code></pre> <p>Retrieve a paginated set of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>offset</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The starting index for pagination (zero-based).</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>100</code> )           \u2013            <p>The maximum number of results to return in this page.</p> </li> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Additional query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PageResult[RawImageUploadSession]</code>           \u2013            <p>A paginated result containing the requested resources and metadata.</p> </li> </ul>"},{"location":"api/uploads/#gcapi.client.UploadSessionsAPI.partial_update","title":"partial_update","text":"<pre><code>partial_update(\n    pk: str, **kwargs: Any\n) -&gt; gcapi.models.RawImageUploadSession\n</code></pre> <p>Partially update an existing resource with only specified fields.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>str</code>)           \u2013            <p>Primary key of the resource to update.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Partial field values for the resource update.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>RawImageUploadSession</code>           \u2013            <p>The updated resource instance.</p> </li> </ul>"},{"location":"api/uploads/#gcapi.client.UploadSessionsAPI.update","title":"update","text":"<pre><code>update(\n    pk: str, **kwargs: Any\n) -&gt; gcapi.models.RawImageUploadSession\n</code></pre> <p>Update an existing resource with a complete replacement.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>str</code>)           \u2013            <p>Primary key of the resource to update.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Complete field values for the resource update.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>RawImageUploadSession</code>           \u2013            <p>The updated resource instance.</p> </li> </ul>"},{"location":"api/workstation_configs/","title":"<code>Client.workstation_configs</code>","text":""},{"location":"api/workstation_configs/#gcapi.client.WorkstationConfigsAPI.detail","title":"detail","text":"<pre><code>detail(\n    pk: Optional[str] = None,\n    api_url: Optional[str] = None,\n    **params: Any\n) -&gt; gcapi.models.WorkstationConfig\n</code></pre> <p>Retrieve a specific resource by primary key, URL, or search parameters.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Primary key of the resource to retrieve.</p> </li> <li> <code>api_url</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Direct API URL of the resource to retrieve.</p> </li> <li> <code>**params</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Search parameters to find a unique resource, such as <code>slug=\"your-slug\"</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>WorkstationConfig</code>           \u2013            <p>The requested resource instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If more than one or none of pk, api_url, or params are specified.</p> </li> <li> <code>ObjectNotFound</code>             \u2013            <p>If no resource is found matching the criteria.</p> </li> <li> <code>MultipleObjectsReturned</code>             \u2013            <p>If multiple resources match the search parameters.</p> </li> </ul>"},{"location":"api/workstation_configs/#gcapi.client.WorkstationConfigsAPI.iterate_all","title":"iterate_all","text":"<pre><code>iterate_all(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; Iterator[gcapi.models.WorkstationConfig]\n</code></pre> <p>Iterate through all resources from the API endpoint across all pages.</p> <p>This method automatically handles pagination and yields individual resources from all pages until all resources have been retrieved.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API requests.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>WorkstationConfig</code>           \u2013            <p>Individual resources from the API endpoint.</p> </li> </ul>"},{"location":"api/workstation_configs/#gcapi.client.WorkstationConfigsAPI.list","title":"list","text":"<pre><code>list(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; list[gcapi.models.WorkstationConfig]\n</code></pre> <p>Retrieve a raw list of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[WorkstationConfig]</code>           \u2013            <p>Raw JSON response from the API containing the list of resources.</p> </li> </ul>"},{"location":"api/workstation_configs/#gcapi.client.WorkstationConfigsAPI.page","title":"page","text":"<pre><code>page(\n    offset: int = 0,\n    limit: int = 100,\n    params: Optional[dict[str, Any]] = None,\n) -&gt; PageResult[gcapi.models.WorkstationConfig]\n</code></pre> <p>Retrieve a paginated set of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>offset</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The starting index for pagination (zero-based).</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>100</code> )           \u2013            <p>The maximum number of results to return in this page.</p> </li> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Additional query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PageResult[WorkstationConfig]</code>           \u2013            <p>A paginated result containing the requested resources and metadata.</p> </li> </ul>"},{"location":"api/reader_studies/answers/","title":"<code>Client.reader_studies.answers</code>","text":""},{"location":"api/reader_studies/answers/#gcapi.client.ReaderStudyAnswersAPI.create","title":"create","text":"<pre><code>create(**kwargs: Any) -&gt; gcapi.models.Answer\n</code></pre> <p>Create a new resource via the API.</p> <p>Parameters:</p> <ul> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Field values for the new resource.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Answer</code>           \u2013            <p>The created resource instance.</p> </li> </ul>"},{"location":"api/reader_studies/answers/#gcapi.client.ReaderStudyAnswersAPI.delete","title":"delete","text":"<pre><code>delete(pk: str) -&gt; Any\n</code></pre> <p>Delete a resource from the API.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>str</code>)           \u2013            <p>Primary key of the resource to delete.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>           \u2013            <p>Response from the delete operation.</p> </li> </ul>"},{"location":"api/reader_studies/answers/#gcapi.client.ReaderStudyAnswersAPI.detail","title":"detail","text":"<pre><code>detail(\n    pk: Optional[str] = None,\n    api_url: Optional[str] = None,\n    **params: Any\n) -&gt; gcapi.models.Answer\n</code></pre> <p>Retrieve a specific resource by primary key, URL, or search parameters.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Primary key of the resource to retrieve.</p> </li> <li> <code>api_url</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Direct API URL of the resource to retrieve.</p> </li> <li> <code>**params</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Search parameters to find a unique resource, such as <code>slug=\"your-slug\"</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Answer</code>           \u2013            <p>The requested resource instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If more than one or none of pk, api_url, or params are specified.</p> </li> <li> <code>ObjectNotFound</code>             \u2013            <p>If no resource is found matching the criteria.</p> </li> <li> <code>MultipleObjectsReturned</code>             \u2013            <p>If multiple resources match the search parameters.</p> </li> </ul>"},{"location":"api/reader_studies/answers/#gcapi.client.ReaderStudyAnswersAPI.iterate_all","title":"iterate_all","text":"<pre><code>iterate_all(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; Iterator[gcapi.models.Answer]\n</code></pre> <p>Iterate through all resources from the API endpoint across all pages.</p> <p>This method automatically handles pagination and yields individual resources from all pages until all resources have been retrieved.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API requests.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>Answer</code>           \u2013            <p>Individual resources from the API endpoint.</p> </li> </ul>"},{"location":"api/reader_studies/answers/#gcapi.client.ReaderStudyAnswersAPI.list","title":"list","text":"<pre><code>list(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; list[gcapi.models.Answer]\n</code></pre> <p>Retrieve a raw list of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Answer]</code>           \u2013            <p>Raw JSON response from the API containing the list of resources.</p> </li> </ul>"},{"location":"api/reader_studies/answers/#gcapi.client.ReaderStudyAnswersAPI.page","title":"page","text":"<pre><code>page(\n    offset: int = 0,\n    limit: int = 100,\n    params: Optional[dict[str, Any]] = None,\n) -&gt; PageResult[gcapi.models.Answer]\n</code></pre> <p>Retrieve a paginated set of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>offset</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The starting index for pagination (zero-based).</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>100</code> )           \u2013            <p>The maximum number of results to return in this page.</p> </li> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Additional query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PageResult[Answer]</code>           \u2013            <p>A paginated result containing the requested resources and metadata.</p> </li> </ul>"},{"location":"api/reader_studies/answers/#gcapi.client.ReaderStudyAnswersAPI.partial_update","title":"partial_update","text":"<pre><code>partial_update(\n    pk: str, **kwargs: Any\n) -&gt; gcapi.models.Answer\n</code></pre> <p>Partially update an existing resource with only specified fields.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>str</code>)           \u2013            <p>Primary key of the resource to update.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Partial field values for the resource update.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Answer</code>           \u2013            <p>The updated resource instance.</p> </li> </ul>"},{"location":"api/reader_studies/answers/#gcapi.client.ReaderStudyAnswersAPI.update","title":"update","text":"<pre><code>update(pk: str, **kwargs: Any) -&gt; gcapi.models.Answer\n</code></pre> <p>Update an existing resource with a complete replacement.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>str</code>)           \u2013            <p>Primary key of the resource to update.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Complete field values for the resource update.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Answer</code>           \u2013            <p>The updated resource instance.</p> </li> </ul>"},{"location":"api/reader_studies/answers_mine/","title":"<code>Client.reader_studies.answers.mine</code>","text":""},{"location":"api/reader_studies/answers_mine/#gcapi.client.ReaderStudyMineAnswersAPI.create","title":"create","text":"<pre><code>create(**kwargs: Any) -&gt; gcapi.models.Answer\n</code></pre> <p>Create a new resource via the API.</p> <p>Parameters:</p> <ul> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Field values for the new resource.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Answer</code>           \u2013            <p>The created resource instance.</p> </li> </ul>"},{"location":"api/reader_studies/answers_mine/#gcapi.client.ReaderStudyMineAnswersAPI.delete","title":"delete","text":"<pre><code>delete(pk: str) -&gt; Any\n</code></pre> <p>Delete a resource from the API.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>str</code>)           \u2013            <p>Primary key of the resource to delete.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>           \u2013            <p>Response from the delete operation.</p> </li> </ul>"},{"location":"api/reader_studies/answers_mine/#gcapi.client.ReaderStudyMineAnswersAPI.detail","title":"detail","text":"<pre><code>detail(\n    pk: Optional[str] = None,\n    api_url: Optional[str] = None,\n    **params: Any\n) -&gt; gcapi.models.Answer\n</code></pre> <p>Retrieve a specific resource by primary key, URL, or search parameters.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Primary key of the resource to retrieve.</p> </li> <li> <code>api_url</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Direct API URL of the resource to retrieve.</p> </li> <li> <code>**params</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Search parameters to find a unique resource, such as <code>slug=\"your-slug\"</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Answer</code>           \u2013            <p>The requested resource instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If more than one or none of pk, api_url, or params are specified.</p> </li> <li> <code>ObjectNotFound</code>             \u2013            <p>If no resource is found matching the criteria.</p> </li> <li> <code>MultipleObjectsReturned</code>             \u2013            <p>If multiple resources match the search parameters.</p> </li> </ul>"},{"location":"api/reader_studies/answers_mine/#gcapi.client.ReaderStudyMineAnswersAPI.iterate_all","title":"iterate_all","text":"<pre><code>iterate_all(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; Iterator[gcapi.models.Answer]\n</code></pre> <p>Iterate through all resources from the API endpoint across all pages.</p> <p>This method automatically handles pagination and yields individual resources from all pages until all resources have been retrieved.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API requests.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>Answer</code>           \u2013            <p>Individual resources from the API endpoint.</p> </li> </ul>"},{"location":"api/reader_studies/answers_mine/#gcapi.client.ReaderStudyMineAnswersAPI.list","title":"list","text":"<pre><code>list(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; list[gcapi.models.Answer]\n</code></pre> <p>Retrieve a raw list of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Answer]</code>           \u2013            <p>Raw JSON response from the API containing the list of resources.</p> </li> </ul>"},{"location":"api/reader_studies/answers_mine/#gcapi.client.ReaderStudyMineAnswersAPI.page","title":"page","text":"<pre><code>page(\n    offset: int = 0,\n    limit: int = 100,\n    params: Optional[dict[str, Any]] = None,\n) -&gt; PageResult[gcapi.models.Answer]\n</code></pre> <p>Retrieve a paginated set of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>offset</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The starting index for pagination (zero-based).</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>100</code> )           \u2013            <p>The maximum number of results to return in this page.</p> </li> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Additional query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PageResult[Answer]</code>           \u2013            <p>A paginated result containing the requested resources and metadata.</p> </li> </ul>"},{"location":"api/reader_studies/answers_mine/#gcapi.client.ReaderStudyMineAnswersAPI.partial_update","title":"partial_update","text":"<pre><code>partial_update(\n    pk: str, **kwargs: Any\n) -&gt; gcapi.models.Answer\n</code></pre> <p>Partially update an existing resource with only specified fields.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>str</code>)           \u2013            <p>Primary key of the resource to update.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Partial field values for the resource update.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Answer</code>           \u2013            <p>The updated resource instance.</p> </li> </ul>"},{"location":"api/reader_studies/answers_mine/#gcapi.client.ReaderStudyMineAnswersAPI.update","title":"update","text":"<pre><code>update(pk: str, **kwargs: Any) -&gt; gcapi.models.Answer\n</code></pre> <p>Update an existing resource with a complete replacement.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>str</code>)           \u2013            <p>Primary key of the resource to update.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Complete field values for the resource update.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Answer</code>           \u2013            <p>The updated resource instance.</p> </li> </ul>"},{"location":"api/reader_studies/display_sets/","title":"<code>Client.reader_studies.display_sets</code>","text":""},{"location":"api/reader_studies/display_sets/#gcapi.client.ReaderStudyDisplaySetsAPI.create","title":"create","text":"<pre><code>create(**kwargs: Any) -&gt; gcapi.models.DisplaySetPost\n</code></pre> <p>Create a new resource via the API.</p> <p>Parameters:</p> <ul> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Field values for the new resource.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DisplaySetPost</code>           \u2013            <p>The created resource instance.</p> </li> </ul>"},{"location":"api/reader_studies/display_sets/#gcapi.client.ReaderStudyDisplaySetsAPI.delete","title":"delete","text":"<pre><code>delete(pk: str) -&gt; Any\n</code></pre> <p>Delete a resource from the API.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>str</code>)           \u2013            <p>Primary key of the resource to delete.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>           \u2013            <p>Response from the delete operation.</p> </li> </ul>"},{"location":"api/reader_studies/display_sets/#gcapi.client.ReaderStudyDisplaySetsAPI.detail","title":"detail","text":"<pre><code>detail(\n    pk: Optional[str] = None,\n    api_url: Optional[str] = None,\n    **params: Any\n) -&gt; gcapi.models.DisplaySet\n</code></pre> <p>Retrieve a specific resource by primary key, URL, or search parameters.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Primary key of the resource to retrieve.</p> </li> <li> <code>api_url</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Direct API URL of the resource to retrieve.</p> </li> <li> <code>**params</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Search parameters to find a unique resource, such as <code>slug=\"your-slug\"</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DisplaySet</code>           \u2013            <p>The requested resource instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If more than one or none of pk, api_url, or params are specified.</p> </li> <li> <code>ObjectNotFound</code>             \u2013            <p>If no resource is found matching the criteria.</p> </li> <li> <code>MultipleObjectsReturned</code>             \u2013            <p>If multiple resources match the search parameters.</p> </li> </ul>"},{"location":"api/reader_studies/display_sets/#gcapi.client.ReaderStudyDisplaySetsAPI.iterate_all","title":"iterate_all","text":"<pre><code>iterate_all(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; Iterator[gcapi.models.DisplaySet]\n</code></pre> <p>Iterate through all resources from the API endpoint across all pages.</p> <p>This method automatically handles pagination and yields individual resources from all pages until all resources have been retrieved.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API requests.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>DisplaySet</code>           \u2013            <p>Individual resources from the API endpoint.</p> </li> </ul>"},{"location":"api/reader_studies/display_sets/#gcapi.client.ReaderStudyDisplaySetsAPI.list","title":"list","text":"<pre><code>list(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; list[gcapi.models.DisplaySet]\n</code></pre> <p>Retrieve a raw list of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[DisplaySet]</code>           \u2013            <p>Raw JSON response from the API containing the list of resources.</p> </li> </ul>"},{"location":"api/reader_studies/display_sets/#gcapi.client.ReaderStudyDisplaySetsAPI.page","title":"page","text":"<pre><code>page(\n    offset: int = 0,\n    limit: int = 100,\n    params: Optional[dict[str, Any]] = None,\n) -&gt; PageResult[gcapi.models.DisplaySet]\n</code></pre> <p>Retrieve a paginated set of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>offset</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The starting index for pagination (zero-based).</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>100</code> )           \u2013            <p>The maximum number of results to return in this page.</p> </li> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Additional query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PageResult[DisplaySet]</code>           \u2013            <p>A paginated result containing the requested resources and metadata.</p> </li> </ul>"},{"location":"api/reader_studies/display_sets/#gcapi.client.ReaderStudyDisplaySetsAPI.partial_update","title":"partial_update","text":"<pre><code>partial_update(\n    pk: str, **kwargs: Any\n) -&gt; gcapi.models.DisplaySetPost\n</code></pre> <p>Partially update an existing resource with only specified fields.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>str</code>)           \u2013            <p>Primary key of the resource to update.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Partial field values for the resource update.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DisplaySetPost</code>           \u2013            <p>The updated resource instance.</p> </li> </ul>"},{"location":"api/reader_studies/display_sets/#gcapi.client.ReaderStudyDisplaySetsAPI.update","title":"update","text":"<pre><code>update(\n    pk: str, **kwargs: Any\n) -&gt; gcapi.models.DisplaySetPost\n</code></pre> <p>Update an existing resource with a complete replacement.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>str</code>)           \u2013            <p>Primary key of the resource to update.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Complete field values for the resource update.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DisplaySetPost</code>           \u2013            <p>The updated resource instance.</p> </li> </ul>"},{"location":"api/reader_studies/questions/","title":"<code>Client.reader_study.questions</code>","text":""},{"location":"api/reader_studies/questions/#gcapi.client.ReaderStudyQuestionsAPI.detail","title":"detail","text":"<pre><code>detail(\n    pk: Optional[str] = None,\n    api_url: Optional[str] = None,\n    **params: Any\n) -&gt; gcapi.models.Question\n</code></pre> <p>Retrieve a specific resource by primary key, URL, or search parameters.</p> <p>Parameters:</p> <ul> <li> <code>pk</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Primary key of the resource to retrieve.</p> </li> <li> <code>api_url</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Direct API URL of the resource to retrieve.</p> </li> <li> <code>**params</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Search parameters to find a unique resource, such as <code>slug=\"your-slug\"</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Question</code>           \u2013            <p>The requested resource instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If more than one or none of pk, api_url, or params are specified.</p> </li> <li> <code>ObjectNotFound</code>             \u2013            <p>If no resource is found matching the criteria.</p> </li> <li> <code>MultipleObjectsReturned</code>             \u2013            <p>If multiple resources match the search parameters.</p> </li> </ul>"},{"location":"api/reader_studies/questions/#gcapi.client.ReaderStudyQuestionsAPI.iterate_all","title":"iterate_all","text":"<pre><code>iterate_all(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; Iterator[gcapi.models.Question]\n</code></pre> <p>Iterate through all resources from the API endpoint across all pages.</p> <p>This method automatically handles pagination and yields individual resources from all pages until all resources have been retrieved.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API requests.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>Question</code>           \u2013            <p>Individual resources from the API endpoint.</p> </li> </ul>"},{"location":"api/reader_studies/questions/#gcapi.client.ReaderStudyQuestionsAPI.list","title":"list","text":"<pre><code>list(\n    params: Optional[dict[str, Any]] = None,\n) -&gt; list[gcapi.models.Question]\n</code></pre> <p>Retrieve a raw list of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Question]</code>           \u2013            <p>Raw JSON response from the API containing the list of resources.</p> </li> </ul>"},{"location":"api/reader_studies/questions/#gcapi.client.ReaderStudyQuestionsAPI.page","title":"page","text":"<pre><code>page(\n    offset: int = 0,\n    limit: int = 100,\n    params: Optional[dict[str, Any]] = None,\n) -&gt; PageResult[gcapi.models.Question]\n</code></pre> <p>Retrieve a paginated set of resources from the API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>offset</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The starting index for pagination (zero-based).</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>100</code> )           \u2013            <p>The maximum number of results to return in this page.</p> </li> <li> <code>params</code>               (<code>Optional[dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Additional query parameters to include in the API request.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PageResult[Question]</code>           \u2013            <p>A paginated result containing the requested resources and metadata.</p> </li> </ul>"},{"location":"usage/algorithm/download_algorithm_outputs/","title":"Download Outputs","text":"<p>Once your Algorithm Job is in the <code>'Succeeded'</code> state you can proceed to download the outputs the algorithm has created.</p> <p>Make sure you have gotten started and have the algorithm object handy:</p> <pre><code>algorithm = client.algorithm.detail(slug=\"your-algorithm-slug\")\n</code></pre>"},{"location":"usage/algorithm/download_algorithm_outputs/#list-the-jobs","title":"List the jobs","text":"<p>If you've submitted all the jobs yourself, you'll likely have an array of jobs still in memory, use that:</p> <pre><code>job_pks = [\"618...\", \"5b3...\"]\njobs = [client.algorithm_jobs.detail(pk=pk) for pk in job_pks]\n</code></pre> <p>Alternatively, you might need to query all the jobs of the algorithm:</p> <pre><code>jobs = client.algorithm_jobs.iterate_all(\n        params={\"algorithm_image__algorithm\": algorithm.pk},\n    )\n</code></pre> <p>Filtering On Algorithm Image</p> <p>The algorithm image dictates exactly which algorithm version was used and using it ensures we only get results from this particular version of the algorithm. Use it to filter your jobs:</p> <pre><code>algorithm_image_pk = \"6185b379-e246-4ff3-90cf-2edc76ce0245\"\nalgorithm_image = client.algorithm_images.detail(pk=algorithm_image_pk)\n\nalgorithm = client.algorithms.detail(api_url=algorithm_image.algorithm)\n\njobs = client.algorithm_jobs.iterate_all(\n    params={\"algorithm_image__algorithm\": algorithm.pk},\n)\n\nfiltered_jobs = [job in jobs if job.algorithm_image == algorithm_image.api_url]\n</code></pre>"},{"location":"usage/algorithm/download_algorithm_outputs/#download-the-outputs","title":"Download the outputs","text":"<p>With a job list ready, download the outputs of the jobs by handling the socket values depending on the output socket.</p> <p>The snippet below will download all contents as files and place them under the <code>download/</code> directory, creating a subdirectory for each job that has ran.</p> <pre><code>from pathlib import Path\nimport json\n\noutput_path = Path(\"download/\")\n\nfor job in jobs:\n    assert job.status == \"Succeeded\"\n\n    item_path = output_path / job.pk\n\n    item_path.mkdir(parents=True, exist_ok=True)\n\n    for socket_value in job.outputs:\n        filename = item_path / socket_value.interface.relative_path\n        super_kind = socket_value.interface.super_kind.casefold()\n\n        if super_kind == \"image\":\n            # Image values\n            client.images.download(\n                url=socket_value.image,\n                filename=filename / socket_value.interface.slug\n            )\n        elif super_kind == \"value\":\n            # Direct values (e.g. '42')\n            with open(filename, \"w\") as f:\n                json.dump(socket_value.value, f, indent=2)\n        elif super_kind == \"file\":\n            # Values stored as files\n            resp = client(url=socket_value.file, follow_redirects=True)\n            resp.raise_for_status()\n            with open(filename, \"wb\") as f:\n                f.write(resp.content)\n        else:\n            raise ValueError(f\"Unexpected super_kind {socket_value.super_kind}\")\n</code></pre>"},{"location":"usage/algorithm/start_algorithm_jobs/","title":"Start Jobs","text":"<p>If you are working on an algorithm, you most likely want to automatically upload cases to an algorithm on the platform. This can be done via the API and most easily using the convienence method: Client.run_external_job.</p> <p>First things first, we need to get started and initiate the client:</p> <pre><code>import gcapi\nclient = gcapi.Client(token=\"your-personal-token\")\n</code></pre>"},{"location":"usage/algorithm/start_algorithm_jobs/#start-jobs","title":"Start jobs","text":"<p>Job limits</p> <p>The number of jobs running at the same time and the number jobs you are allowed to run in a set time period have limits. For large processing batches these exceptions will need to be handled.</p> <p>Start off by getting the algorithm details, making sure you have access rights:</p> <pre><code>algorithm_slug = \"your-algorithm-slug\"\nalgorithm = client.algorithms.detail(slug=algorithm_slug)\n</code></pre> <p>Explore the inputs that the algorithm expects by visiting the Try-Out page on Grand Challenge.</p> <p>Next, we will submit the inputs to the algorithm case-by-case. For this example we'll assume the algorithm requires an <code>ct-image</code> and a <code>lung-volume</code> as inputs.</p> <pre><code>job_1 = client.run_external_job(\n    algorithm=\"your-algorithm-slug\",\n    inputs={\n        \"ct-image\": [ \"0.dcm\", \"1.dcm\"],\n        \"lung-volume\": 42,\n    }\n)\n</code></pre> <p>As an alternative, let us source the <code>ct-image</code> from an archive and the <code>lung-volume</code> from a local JSON file for a second job:</p> <pre><code>archive_item_pk = \"09e38ccd...\"\narchive_item = client.archive_items.details(pk=archive_item_pk)\n\njob_2 =  client.run_external_job(\n    algorithm=\"your-algorithm-slug\",\n    inputs={\n        \"ct-image\": archive_item.values[0],\n        \"lung-volume\": \"path/to/lung-volume.json\",\n    }\n)\n</code></pre> <p>Tip: store the job identifiers</p> <p>Starting a lot of jobs in sequence might benefit from storing the job identifiers in an offline manner.</p> <p>Imagine you have a collection of local CT images you are inputting:</p> <pre><code>import glob\nct_images = glob.glob(\"*.mha\")\n</code></pre> <p>Storing the job identifiers in a local JSON file (e.g. <code>running_jobs.json</code>) means they can later be used to query state or download results:</p> <pre><code>jobs = []\nfor ct_image in ct_images:\n    job = client.run_external_job(\n        algorithm=\"your-algorithm-slug\",\n        inputs={\"ct-image\": ct_image}\n    )\n    jobs.append(job.pk)\n\n# Store the started jobs offline\nwith open(\"running_jobs.json\", \"w\") as f:\n    json.dump(jobs, f, indent=2)\n</code></pre>"},{"location":"usage/algorithm/start_algorithm_jobs/#inspect-jobs","title":"Inspect jobs","text":"<p>After a job has ended with the status <code>'Succeeded'</code>, you can download the outputs.</p> <p>Here is how to query their status:</p> <pre><code>jobs = [client.algorithm_jobs.detail(job.pk) for job in jobs]\nprint([job.status for job in jobs])\n</code></pre>"},{"location":"usage/archive/create_archive_items/","title":"Create Archive Items","text":"<p>If you are working on a challenge, you most likely need to upload cases to an archive on the platform. This can be done via the API and most easily using the convienence method: Client.add_cases_to_archive</p> <p>First things first, we need to get started and initiate the client:</p> <pre><code>import gcapi\nclient = gcapi.Client(token=\"your-personal-token\")\n</code></pre>"},{"location":"usage/archive/create_archive_items/#example","title":"Example","text":"<p>For this particular example, the data on your machine would be structured as follows:</p> <pre><code>mainfolder/\n\u251c\u2500\u2500 patient1_folder\n\u2502       \u251c\u2500\u2500file_for_a_single_series\n\u251c\u2500\u2500 patient2_folder\n\u2502       \u251c\u2500\u2500file_for_a_single_series\n\u251c\u2500\u2500patient3_folder\n\u2502       \u251c\u2500\u2500file_for_a_single_series\n          ...\n\u251c\u2500\u2500patientN_folder\n\u2502       \u251c\u2500\u2500file_for_a_single_series\n</code></pre> <p>Lets now list the files in the upload directory: <pre><code># Specify the directory path which you want to upload from.\nupload_from_dir = Path(r\"path/on/your/machine/with/data/for/archive\")\n\n# Create list of files in the specified directory.\nfiles = sorted(f for f in upload_from_dir.rglob(\"*.*\") if f.is_file())\nprint(\"Found\", len(files), \"cases for upload\")\n</code></pre></p>"},{"location":"usage/archive/create_archive_items/#create-archive-items","title":"Create archive items","text":"<p>An Archive contains Archive Items. An archive item consists of one or more socket values, which can be images, files or other data. To create archive items for the algorithms to predict on, you need to provide a socket slug for each socket value. Within an archive item, a socket slug needs to be unique. For example, one cannot have three <code>generic-medical-images</code> within a single archive item.</p> <p>In this example two archive items are created and each archive item contains three sockets, with slugs: a <code>ct-image</code>, an <code>airway-segmentation</code> and <code>some-score</code>.</p> <p>Challenge Sockets</p> <p>For archives that are linked to challenges, the sockets will need to correspond to the sockets that have been configured as input for the challenge algorithms. For an overview of these sockets, visit the submit page(s) of your challenge.</p> <pre><code>archive_items = [\n    {\n        \"ct-image\": files[0],\n        \"airway-segmentation\": files[1],\n        \"some-score\": 2.1,\n    },\n    {\n        \"ct-image\": files[2],\n        \"airway-segmentation\": files[3],\n        \"some-score\": 7.9,\n    },\n    ...\n]\n</code></pre> <p>To upload cases and create the archive items, you will need to know the slug of the particular archive you will work with.</p> <pre><code># Specify the \"slug\" of the archive you want to upload your data to.\nupload_archive_slug = \"my-archive-slug\"\n\narchive_item_pks = client.add_cases_to_archive(\n  archive=upload_reader_study_slug,\n  archive_items=archive_items\n)\nprint(\"Uploaded cases and created archive items: \" + archive_item_pks)\n</code></pre>"},{"location":"usage/archive/download_archive_items/","title":"Download Archive Items","text":"<p>First, start off by getting the archive object. For this you will need either the pk, slug or api url or the archive.</p> <pre><code>slug = \"my-archive-slug\"\narchive = client.archives.detail(slug=slug)\n</code></pre> <p>Then continue below to download the archive's content.</p> <p>Archive items allow you to store multiple related files together. For example, you can store: - A medical image with its segmentation mask - An image with associated metadata (e.g., disease likelihood scores) - Multiple images with their annotations - Any combination of images, files, and metadata</p> <p>This makes archives ideal for storing complex datasets where multiple files are logically grouped together. However, it makes downloading a bit more complex.</p>"},{"location":"usage/archive/download_archive_items/#download-image-only-archive-items","title":"Download image-only Archive Items","text":"<p>If your archive only contains images, getting them can best be done via the images API:</p> <pre><code># Get information about images in the archive from the API\nimages = client.images.iterate_all(\n    params={'archive': archive.pk}\n)\n\n# Download images\nfor image in images:\n    client.images.download(\n        files=image.files,\n        filename=Path(output_archive_dir, image.file)\n    )\n</code></pre>"},{"location":"usage/archive/download_archive_items/#download-complex-archive-items","title":"Download complex Archive Items","text":"<p>Complex archive items contain a combination of images, values and files. Downloading all these variants is more involved.</p> <p>First, get all the archive items that are in the archive:</p> <pre><code>archive_items = list(\n    client.archive_items.iterate_all(\n        params={\"archive\": archive.pk}\n    )\n)\n</code></pre> <p>Then one-by-one, download the values found within. The snippet below will download all the files to the <code>download/</code> directory: creating a subdirectory for each archive item.</p> <pre><code>from pathlib import Path\nimport json\n\noutput_path = Path(\"download/\")\n\nfor item in archive_items:\n    item_path = output_path / item.pk\n\n    item_path.mkdir(parents=True, exist_ok=True)\n\n    for socket_value in item.values:\n        filename = item_path / socket_value.interface.relative_path\n        super_kind = socket_value.interface.super_kind.casefold()\n\n        if super_kind == \"image\":\n            # Image values\n            client.images.download(\n                url=socket_value.image,\n                filename=filename\n            )\n        elif super_kind == \"value\":\n            # Direct values (e.g. '42')\n            with open(filename, \"w\") as f:\n                json.dump(socket_value.value, f, indent=2)\n        elif super_kind == \"file\":\n            # Values stored as files\n            resp = client(url=socket_value.file, follow_redirects=True)\n            resp.raise_for_status()\n            with open(filename, \"wb\") as f:\n                f.write(resp.content)\n        else:\n            raise ValueError(f\"Unexpected super_kind {socket_value.super_kind}\")\n</code></pre>"},{"location":"usage/archive/update_archive_items/","title":"Update Archive Items","text":""},{"location":"usage/archive/update_archive_items/#update-the-content-of-archive-items","title":"Update the content of archive items","text":"<p>To update the contents of a archive items you can use the convenience function: Client.update_archive_item.</p>"},{"location":"usage/archive/update_archive_items/#example","title":"Example","text":"<p>First, retrieve the archive items from your archive:</p> <pre><code>archive = client.archives.detail(slug=\"my-archive-slug\")\narchive_items = list(\n    client.archive_items.iterate_all(\n        params={\"archive\": archive.pk}\n    )\n)\n</code></pre> <p>To then add, for example, a PDF report and a lung volume value to the first archive item, provide the socket slugs together with the respective value or file path as follows:</p> <pre><code>client.update_archive_item(\n    archive_item_pk=archive_items[0].pk,\n    values={\n        \"report\": 'path/on/your/machine/to/the/report.pdf'],\n        \"lung-volume\": 1.9,\n    },\n)\n</code></pre> <p>Warning</p> <p>If you provide a value or file for an already existing socket value of the archive item, the old value will be overwritten by the new one.</p>"},{"location":"usage/reader_study/create_display_sets/","title":"Create Display Sets","text":"<p>If you are working on a reader study, you most likely need to upload the cases to the platform. This can be done via the API and most easily using the convienence method: Client.add_cases_to_reader_study.</p> <p>First things first, we need to get started and initiate the client:</p> <pre><code>import gcapi\nclient = gcapi.Client(token=\"your-personal-token\")\n</code></pre>"},{"location":"usage/reader_study/create_display_sets/#example","title":"Example","text":"<p>For this particular example, the data on your machine would be structured as follows:</p> <pre><code>mainfolder/\n\u251c\u2500\u2500 patient1_folder\n\u2502       \u251c\u2500\u2500file_for_a_single_series\n\u251c\u2500\u2500 patient2_folder\n\u2502       \u251c\u2500\u2500file_for_a_single_series\n\u251c\u2500\u2500patient3_folder\n\u2502       \u251c\u2500\u2500file_for_a_single_series\n          ...\n\u251c\u2500\u2500patientN_folder\n\u2502       \u251c\u2500\u2500file_for_a_single_series\n</code></pre> <p>Lets now list the files in the upload directory: <pre><code># Specify the directory path which you want to upload from.\nupload_from_dir = Path(r\"path/on/your/machine/with/data/for/reader/study\")\n\n# Create list of files in the specified directory.\nfiles = sorted(f for f in upload_from_dir.rglob(\"*.*\") if f.is_file())\nprint(\"Found\", len(files), \"cases for upload\")\n</code></pre></p>"},{"location":"usage/reader_study/create_display_sets/#create-display-sets","title":"Create display sets","text":"<p>To create display sets for the readers to view, you need to provide a socket for each image. Within a display set, a socket needs to be unique. For example, one cannot have three <code>ct-image</code> within a single display set.</p> <p>Tip</p> <p>If your desired socket does not yet exist, please email support@grand-challenge.org with a title and description to add it to the list.</p> <p>In this example two display sets are created and each display set contains three sockets: a <code>ct-image</code>, an <code>airway-segmentation</code> and <code>some-score</code>:</p> <pre><code>display_sets = [\n    {\n        \"ct-image\": files[0],\n        \"airway-segmentation\": files[1],\n        \"some-score\": 2.1,\n    },\n    {\n        \"ct-image\": files[2],\n        \"airway-segmentation\": files[3],\n        \"some-score\": 7.9,\n    },\n    ...\n]\n</code></pre> <p>To upload cases and create the display sets, you will need to know the slug of the particular reader study you will work with.</p> <pre><code># Specify the \"slug\" of the study you want to upload your data to.\nupload_reader_study_slug = \"my-reader-study-slug\"\n\ndisplay_set_pks = client.add_cases_to_reader_study(\n  reader_study=upload_reader_study_slug,\n  display_sets=display_sets\n)\nprint(\"Uploaded cases and created display sets: \" + display_set_pks)\n</code></pre>"},{"location":"usage/reader_study/create_display_sets/#setting-title-and-order","title":"Setting title and order","text":"<p>Titles and order can easiest be set by updating the display sets.</p>"},{"location":"usage/reader_study/download_answers/","title":"Download Answers","text":"<p>First, start off by getting the reader study object.  For this you will need either the pk, slug or api url of the reader study.</p> <pre><code>slug = \"my-reader-study-slug\"\nreader_study = client.reader_studies.detail(slug=slug)\n</code></pre> <p>Then download the answers, depending on what you need.</p>"},{"location":"usage/reader_study/download_answers/#download-all-answers","title":"Download all answers","text":"<pre><code>all_answers = reader_answers = list(\n    client.reader_studies.answers.iterate_all(\n        params={\"question__reader_study\": reader_study.pk}\n    )\n)\n</code></pre>"},{"location":"usage/reader_study/download_answers/#download-your-own-answers","title":"Download your own answers","text":"<pre><code>my_answers = list(\n    client.reader_studies.answers.mine.iterate_all(\n        params={\"question__reader_study\": reader_study.pk}\n    )\n)\n</code></pre>"},{"location":"usage/reader_study/download_answers/#download-a-readers-answers","title":"Download a reader's answers","text":"<p>If you for instance would like to download only the answers for user <code>'your-reader'</code>: <pre><code>reader_answers = list(\n    client.reader_studies.answers.iterate_all(\n        params={\n            \"question__reader_study\": reader_study.pk,\n            \"creator\": \"your-reader\",\n        }\n    )\n)\n</code></pre></p>"},{"location":"usage/reader_study/download_answers/#download-of-answers-per-display-set","title":"Download of answers per display set","text":"<p>If you would like to get the answers per display set, you can use the following code snippet.</p> <p>Firstly, get all the display sets:</p> <pre><code>display_sets = client.reader_studies.display_sets.iterate_all(\n        params={\"reader_study\": reader_study.pk}\n    )\n</code></pre> <p>Secondly, get the answers per display set:</p> <pre><code>answers_per_display_set = {}\nfor display_set in display_sets:\n    answers_per_display_set[display_set.pk] = list(\n        client.reader_studies.answers.iterate_all(\n            params={\"display_set\": display_set.pk}\n        )\n    )\n</code></pre>"},{"location":"usage/reader_study/download_answers/#download-choice-type-answers","title":"Download choice-type Answers","text":"<p>The answers for (multiple) choice type questions contain only the id of the chosen option, not the option title.</p> <p>If you would like to add the option title to the answers, you can do so by combining information from the reader study questions:</p> <pre><code># Create a dictionary of the multiple choice questions with the question's api_url\n# as the key, and the options for the question as the value.\n# The options contain the readable title.\nchoice_questions = {\n    question.api_url: question\n    for question in reader_study.questions\n    if question.answer_type in (\"Choice\", \"Multiple choice\")\n}\n\n\n# Local function that will add the readable answer to the answer dictionary\n# for (multiple) choice questions.\ndef add_answer_title(answer):\n    if answer.question not in choice_questions:\n        return answer\n    options = choice_questions[answer.question].options\n    if isinstance(answer.answer, list):\n        # multiple choice\n        answer.answer = list(\n            o.title for o in options if o.id in answer.answer\n        )\n    else:\n        # choice\n        answer.answer= list(\n            o.title for o in options if o.id == answer.answer\n        )[0]\n    return answer\n\n\n# You can create a list for just the (multiple) choice type questions.\nchoice_answers_readable = list(\n    add_answer_title(a) for a in answers if a.question in choice_questions\n)\n\n# Or create a list of readable items for all answers.\nanswers_readable = list(str(a.answer) for a in answers)\n</code></pre>"},{"location":"usage/reader_study/download_answers/#download-image-type-answers","title":"Download image-type Answers","text":"<p>For questions of type Mask the answers are provided as API URLS to images. You can download these as follows:</p> <pre><code>image_answers = list(a for a in answers if a.answer_image is not None)\nfor i in image_answers:\n    downloaded_files = client.images.download(\n        url=i.answer_image, filename=Path(\"path/to/output\")\n    )\n</code></pre>"},{"location":"usage/reader_study/reuse_images_in_display_sets/","title":"Re-use Display-Set Images","text":"<p>When creating display sets for a reader study, it is sometimes the case that the same image is being used multiple times in different display sets. There is no need to upload the image for each display set. Once uploaded, the image reference can be used when creating additional display sets. This reduces storage usage and optimizes performance.</p> <p>Speed Benefit</p> <p>Viewer applications such as CIRRUS need to download each image in the display set. If a display set correctly re-uses an image, CIRRUS can re-use a previous download. This generally speeds up the case loading.</p>"},{"location":"usage/reader_study/reuse_images_in_display_sets/#get-an-image-reference","title":"Get an image reference","text":"<p>Archives, Job results and other display sets have references to already uploaded images. If you have not yet uploaded the image, you can first create a display set.</p>"},{"location":"usage/reader_study/reuse_images_in_display_sets/#create-the-first-display-set","title":"Create the first display set","text":"<p>Create a display set roughly as follows:</p> <pre><code>reader_study_slug = \"my-reader-study-slug\"\n\ncase = {\n    \"ct-image\": \"/path/to/image/file/00.mhd\"\n}\n\n# Create a simple display set with one MHD image\ndisplay_sets = client.add_cases_to_reader_study(\n    reader_study=reader_study_slug,\n    values=[case]\n)\n</code></pre>"},{"location":"usage/reader_study/reuse_images_in_display_sets/#wait-for-processing","title":"Wait for processing","text":"<p>The postprocessing of images on Grand Challenge means that we have to wait a short while until all files are processed:</p> <pre><code>import time\n\nreader_study = client.reader_studies.detail(slug=slug)\n\nwhile True:\n    # Fetch the latest status of all display sets\n    display_sets = client.reader_studies.display_sets.iterate_all(params={\"reader_study\": reader_study.pk})\n\n    # Check if all display sets have their values processed\n    if all(len(ds.values) &gt; 0 for ds in display_sets):\n        break\n\n    # Wait a bit before checking again\n    time.sleep(60)\n</code></pre>"},{"location":"usage/reader_study/reuse_images_in_display_sets/#create-a-new-display-set","title":"Create a new display set","text":"<p>Finally, when the images have been processed you can reference them when creating a new display set:</p> <pre><code>image_reference = None\n\n# Reference the first display set, and the first value\nfor value in display_sets[0].values:\n    if value.interface.slug == \"ct-image\":\n        image_reference = display_sets[0].values[0].image\n\nassert image_reference\n\nnew_case = {\n    \"ct-image\": image_reference,\n}\nnew_display_sets = client.add_cases_to_reader_study(\n    reader_study=reader_study_slug,\n    values=[new_case]\n)\n</code></pre>"},{"location":"usage/reader_study/update_display_sets/","title":"Update Display Sets","text":""},{"location":"usage/reader_study/update_display_sets/#update-the-content-of-display-sets","title":"Update the content of display sets","text":"<p>To update the contents of a display set you can use the convenience function: Client.update_display_set.</p>"},{"location":"usage/reader_study/update_display_sets/#example","title":"Example","text":"<p>First, retrieve the display sets from your reader study:</p> <pre><code>reader_study = client.reader_studies.detail(slug=\"my-reader-study-slug\")\ndisplay_sets = list(\n    client.reader_studies.display_sets.iterate_all(\n        params={\"reader_study\": reader_study.pk}\n    )\n)\n</code></pre> <p>To then add, for example, a PDF report and a lung volume value to the first display set, provide the socket slugs together with the respective value or file path as follows:</p> <pre><code>client.update_display_set(\n    display_set_pk=display_sets[0].pk,\n    values={\n        \"report\": 'path/on/your/machine/to/the/report.pdf'],\n        \"lung-volume\": 1.9,\n    },\n)\n</code></pre> <p>Warning</p> <p>If you provide a value or file for an already existing socket value of the display set, the old value will be overwritten by the new one.</p>"},{"location":"usage/reader_study/update_display_sets/#update-the-ordering-of-display-sets","title":"Update the ordering of display sets","text":"<p>To update the order of a display set (in the example to 10), you can do the following:</p> <pre><code>display_set_pk = \"41b79371-7bdc-45df-8e00-add3982f16b9\"\nnew_order = 10\n\nclient.reader_studies.display_sets.partial_update(\n    pk=display_set_pk,\n    order=new_order,\n)\n</code></pre> <p>Warning</p> <p>Using <code>client.update</code> here instead of <code>client.partial_update</code> would unset the content and title of your display set!</p>"},{"location":"usage/reader_study/update_display_sets/#update-the-titles-of-display-sets","title":"Update the titles of display sets","text":"<p>To update the title of a display set (in the example to \"Case 10\"), you can do the following:</p> <pre><code>display_set_pk = \"41b79371-7bdc-45df-8e00-add3982f16b9\"\nnew_title = \"Case 10\"\n\nclient.reader_studies.display_sets.partial_update(\n    pk=display_set_pk,\n    title=new_title,\n)\n</code></pre> <p>Warning</p> <p>Using <code>client.update</code> here instead of <code>client.partial_update</code> would unset the content and order of your display set!</p>"}]}