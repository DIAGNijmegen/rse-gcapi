# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2023-03-17T11:36:57+00:00

from __future__ import annotations

from datetime import date, datetime
from decimal import Decimal
from enum import Enum
from typing import Any
from uuid import UUID

from pydantic import AnyUrl, BaseModel, Field

try:
    from typing import Annotated  # type: ignore[attr-defined]
except ImportError:
    from typing_extensions import Annotated


class AlgorithmImage(BaseModel):
    pk: Annotated[UUID, Field(readOnly=True, title="Id")]
    url: Annotated[AnyUrl, Field(readOnly=True)]
    api_url: Annotated[str, Field(readOnly=True)]
    algorithm: Annotated[AnyUrl, Field(readOnly=True)]
    created: Annotated[datetime, Field(readOnly=True)]
    requires_gpu: bool | None = None
    requires_memory_gb: Annotated[
        int | None, Field(ge=0, le=2147483647)
    ] = None
    import_status: Annotated[str, Field(readOnly=True)]


class Answer(BaseModel):
    answer: dict[str, Any] | None = None
    api_url: Annotated[
        str, Field(description="API url for this ``Answer``.", readOnly=True)
    ]
    created: Annotated[datetime, Field(readOnly=True)]
    creator: Annotated[
        str,
        Field(
            description="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
            readOnly=True,
        ),
    ]
    display_set: AnyUrl | None = None
    pk: Annotated[UUID, Field(readOnly=True, title="Id")]
    question: AnyUrl
    modified: Annotated[datetime, Field(readOnly=True)]
    answer_image: Annotated[AnyUrl, Field(readOnly=True)]
    last_edit_duration: str | None = None
    total_edit_duration: Annotated[str, Field(readOnly=True)]
    is_ground_truth: Annotated[bool, Field(readOnly=True)]


class Archive(BaseModel):
    pk: Annotated[UUID, Field(readOnly=True, title="Id")]
    name: Annotated[str, Field(readOnly=True)]
    title: Annotated[str, Field(max_length=255)]
    algorithms: Annotated[list[AnyUrl], Field(readOnly=True)]
    logo: Annotated[AnyUrl, Field(readOnly=True)]
    description: str | None = None
    api_url: Annotated[str, Field(readOnly=True)]
    url: Annotated[AnyUrl, Field(readOnly=True)]


class BlankEnum(Enum):
    field_ = ""


class BooleanClassificationAnnotation(BaseModel):
    id: Annotated[UUID, Field(readOnly=True)]
    image: UUID
    grader: int | None = None
    created: datetime | None = None
    name: Annotated[str, Field(max_length=255)]
    value: bool


class CategoricalOption(BaseModel):
    id: Annotated[int, Field(readOnly=True)]
    title: Annotated[str, Field(max_length=1024)]
    default: bool | None = None


class Challenge(BaseModel):
    title: Annotated[
        str | None,
        Field(
            description="The name of the challenge that is displayed on the All Challenges page. If this is blank the short name of the challenge will be used.",
            max_length=64,
        ),
    ] = None
    short_name: Annotated[
        str,
        Field(
            description="short name used in url, specific css, files etc. No spaces allowed",
            max_length=50,
            regex="^[-a-zA-Z0-9_]+$",
        ),
    ]


class ColorInterpolationEnum(Enum):
    RGB = "RGB"
    HLS = "HLS"
    HLSpos = "HLSpos"
    HLSneg = "HLSneg"
    Constant = "Constant"


class ColorSpaceEnum(Enum):
    GRAY = "GRAY"
    RGB = "RGB"
    RGBA = "RGBA"
    YCBCR = "YCBCR"


class ComponentInterfaceValuePost(BaseModel):
    interface: str
    value: dict[str, Any] | None = None
    file: AnyUrl | None = None
    image: AnyUrl | None = None
    pk: Annotated[int, Field(readOnly=True, title="Id")]
    upload_session: AnyUrl | None = None
    user_upload: AnyUrl | None = None


class ETDRSGridAnnotation(BaseModel):
    id: Annotated[UUID, Field(readOnly=True)]
    grader: int | None = None
    created: datetime | None = None
    image: UUID
    fovea: Annotated[list[float], Field(max_items=2)]
    optic_disk: Annotated[list[float] | None, Field(max_items=2)] = None


class EyeChoiceEnum(Enum):
    OD = "OD"
    OS = "OS"
    U = "U"
    NA = "NA"


class Feedback(BaseModel):
    session: AnyUrl
    screenshot: AnyUrl | None = None
    user_comment: str
    context: dict[str, Any] | None = None


class FieldOfViewEnum(Enum):
    F1M = "F1M"
    F2 = "F2"
    F3M = "F3M"
    F4 = "F4"
    F5 = "F5"
    F6 = "F6"
    F7 = "F7"
    U = "U"


class Follow(BaseModel):
    pk: Annotated[int, Field(readOnly=True, title="ID")]
    flag: Annotated[str | None, Field(max_length=255)] = None


class HangingProtocol(BaseModel):
    json_: Annotated[dict[str, Any], Field(alias="json")]


class ImageLevelAnnotationsForImage(BaseModel):
    quality: Annotated[UUID, Field(readOnly=True)]
    pathology: Annotated[UUID, Field(readOnly=True)]
    retina_pathology: Annotated[UUID, Field(readOnly=True)]
    oct_retina_pathology: Annotated[UUID, Field(readOnly=True)]
    text: Annotated[UUID, Field(readOnly=True)]


class ImageTextAnnotation(BaseModel):
    id: Annotated[UUID, Field(readOnly=True)]
    created: datetime | None = None
    grader: int | None = None
    image: UUID
    text: str


class ImageTypeEnum(Enum):
    MHD = "MHD"
    TIFF = "TIFF"
    DZI = "DZI"


class ImagingModality(BaseModel):
    modality: Annotated[str, Field(max_length=16)]


class JobPost(BaseModel):
    pk: Annotated[UUID, Field(readOnly=True, title="Id")]
    algorithm: AnyUrl
    inputs: list[ComponentInterfaceValuePost]
    status: Annotated[str, Field(readOnly=True)]


class LocationEnum(Enum):
    AF = "AF"
    AX = "AX"
    AL = "AL"
    DZ = "DZ"
    AS = "AS"
    AD = "AD"
    AO = "AO"
    AI = "AI"
    AQ = "AQ"
    AG = "AG"
    AR = "AR"
    AM = "AM"
    AW = "AW"
    AU = "AU"
    AT = "AT"
    AZ = "AZ"
    BS = "BS"
    BH = "BH"
    BD = "BD"
    BB = "BB"
    BY = "BY"
    BE = "BE"
    BZ = "BZ"
    BJ = "BJ"
    BM = "BM"
    BT = "BT"
    BO = "BO"
    BQ = "BQ"
    BA = "BA"
    BW = "BW"
    BV = "BV"
    BR = "BR"
    IO = "IO"
    BN = "BN"
    BG = "BG"
    BF = "BF"
    BI = "BI"
    CV = "CV"
    KH = "KH"
    CM = "CM"
    CA = "CA"
    KY = "KY"
    CF = "CF"
    TD = "TD"
    CL = "CL"
    CN = "CN"
    CX = "CX"
    CC = "CC"
    CO = "CO"
    KM = "KM"
    CG = "CG"
    CD = "CD"
    CK = "CK"
    CR = "CR"
    CI = "CI"
    HR = "HR"
    CU = "CU"
    CW = "CW"
    CY = "CY"
    CZ = "CZ"
    DK = "DK"
    DJ = "DJ"
    DM = "DM"
    DO = "DO"
    EC = "EC"
    EG = "EG"
    SV = "SV"
    GQ = "GQ"
    ER = "ER"
    EE = "EE"
    SZ = "SZ"
    ET = "ET"
    FK = "FK"
    FO = "FO"
    FJ = "FJ"
    FI = "FI"
    FR = "FR"
    GF = "GF"
    PF = "PF"
    TF = "TF"
    GA = "GA"
    GM = "GM"
    GE = "GE"
    DE = "DE"
    GH = "GH"
    GI = "GI"
    GR = "GR"
    GL = "GL"
    GD = "GD"
    GP = "GP"
    GU = "GU"
    GT = "GT"
    GG = "GG"
    GN = "GN"
    GW = "GW"
    GY = "GY"
    HT = "HT"
    HM = "HM"
    VA = "VA"
    HN = "HN"
    HK = "HK"
    HU = "HU"
    IS = "IS"
    IN = "IN"
    ID = "ID"
    IR = "IR"
    IQ = "IQ"
    IE = "IE"
    IM = "IM"
    IL = "IL"
    IT = "IT"
    JM = "JM"
    JP = "JP"
    JE = "JE"
    JO = "JO"
    KZ = "KZ"
    KE = "KE"
    KI = "KI"
    KW = "KW"
    KG = "KG"
    LA = "LA"
    LV = "LV"
    LB = "LB"
    LS = "LS"
    LR = "LR"
    LY = "LY"
    LI = "LI"
    LT = "LT"
    LU = "LU"
    MO = "MO"
    MG = "MG"
    MW = "MW"
    MY = "MY"
    MV = "MV"
    ML = "ML"
    MT = "MT"
    MH = "MH"
    MQ = "MQ"
    MR = "MR"
    MU = "MU"
    YT = "YT"
    MX = "MX"
    FM = "FM"
    MD = "MD"
    MC = "MC"
    MN = "MN"
    ME = "ME"
    MS = "MS"
    MA = "MA"
    MZ = "MZ"
    MM = "MM"
    NA = "NA"
    NR = "NR"
    NP = "NP"
    NL = "NL"
    NC = "NC"
    NZ = "NZ"
    NI = "NI"
    NE = "NE"
    NG = "NG"
    NU = "NU"
    NF = "NF"
    KP = "KP"
    MK = "MK"
    MP = "MP"
    NO = "NO"
    OM = "OM"
    PK = "PK"
    PW = "PW"
    PS = "PS"
    PA = "PA"
    PG = "PG"
    PY = "PY"
    PE = "PE"
    PH = "PH"
    PN = "PN"
    PL = "PL"
    PT = "PT"
    PR = "PR"
    QA = "QA"
    RE = "RE"
    RO = "RO"
    RU = "RU"
    RW = "RW"
    BL = "BL"
    SH = "SH"
    KN = "KN"
    LC = "LC"
    MF = "MF"
    PM = "PM"
    VC = "VC"
    WS = "WS"
    SM = "SM"
    ST = "ST"
    SA = "SA"
    SN = "SN"
    RS = "RS"
    SC = "SC"
    SL = "SL"
    SG = "SG"
    SX = "SX"
    SK = "SK"
    SI = "SI"
    SB = "SB"
    SO = "SO"
    ZA = "ZA"
    GS = "GS"
    KR = "KR"
    SS = "SS"
    ES = "ES"
    LK = "LK"
    SD = "SD"
    SR = "SR"
    SJ = "SJ"
    SE = "SE"
    CH = "CH"
    SY = "SY"
    TW = "TW"
    TJ = "TJ"
    TZ = "TZ"
    TH = "TH"
    TL = "TL"
    TG = "TG"
    TK = "TK"
    TO = "TO"
    TT = "TT"
    TN = "TN"
    TR = "TR"
    TM = "TM"
    TC = "TC"
    TV = "TV"
    UG = "UG"
    UA = "UA"
    AE = "AE"
    GB = "GB"
    UM = "UM"
    US = "US"
    UY = "UY"
    UZ = "UZ"
    VU = "VU"
    VE = "VE"
    VN = "VN"
    VG = "VG"
    VI = "VI"
    WF = "WF"
    EH = "EH"
    YE = "YE"
    ZM = "ZM"
    ZW = "ZW"


class LookUpTable(BaseModel):
    pk: Annotated[int, Field(readOnly=True, title="ID")]
    slug: Annotated[str, Field(readOnly=True, regex="^[-a-zA-Z0-9_]+$")]
    title: Annotated[str, Field(max_length=255)]
    description: str | None = None
    color: Annotated[
        str,
        Field(
            regex="^\\[(?:((?: ?-?\\d*(?:\\.\\d+)? ){3}(?:-?\\d*(?:\\.\\d+)?)) ?, ?)+((?:-?\\d*(?:\\.\\d+)? ){3}(?:\\d*(:?\\.\\d+)? ?))\\]$"
        ),
    ]
    alpha: Annotated[
        str,
        Field(
            regex="^\\[(?:((?: ?-?\\d*(?:\\.\\d+)? ){1}(?:-?\\d*(?:\\.\\d+)?)) ?, ?)+((?:-?\\d*(?:\\.\\d+)? ){1}(?:\\d*(:?\\.\\d+)? ?))\\]$"
        ),
    ]
    color_invert: Annotated[
        str | None,
        Field(
            regex="^\\[(?:((?: ?-?\\d*(?:\\.\\d+)? ){3}(?:-?\\d*(?:\\.\\d+)?)) ?, ?)+((?:-?\\d*(?:\\.\\d+)? ){3}(?:\\d*(:?\\.\\d+)? ?))\\]$"
        ),
    ] = None
    alpha_invert: Annotated[
        str | None,
        Field(
            regex="^\\[(?:((?: ?-?\\d*(?:\\.\\d+)? ){1}(?:-?\\d*(?:\\.\\d+)?)) ?, ?)+((?:-?\\d*(?:\\.\\d+)? ){1}(?:\\d*(:?\\.\\d+)? ?))\\]$"
        ),
    ] = None
    range_min: Annotated[int | None, Field(ge=-32768, le=32767)] = None
    range_max: Annotated[int | None, Field(ge=-32768, le=32767)] = None
    relative: bool | None = None
    color_interpolation: ColorInterpolationEnum | None = None
    color_interpolation_invert: ColorInterpolationEnum | None = None


class Notification(BaseModel):
    read: bool | None = None


class NullEnum(Enum):
    NoneType_None = None


class OctRetinaImagePathologyAnnotation(BaseModel):
    id: Annotated[UUID, Field(readOnly=True)]
    created: datetime | None = None
    grader: int | None = None
    image: UUID
    macular: Annotated[
        bool | None,
        Field(description="Are pathologies present in macular OCT?"),
    ] = None
    myopia: Annotated[
        bool | None,
        Field(description="Are myopia related pathologies present?"),
    ] = None
    optic_disc: Annotated[
        bool | None,
        Field(description="Are pathologies present in optic disc OCT?"),
    ] = None
    other: Annotated[
        bool | None,
        Field(description="Are other pathologies present in this image?"),
    ] = None
    layers: Annotated[
        bool | None, Field(description="Are retinal layers annotated?")
    ] = None


class PaginatedAlgorithmImageList(BaseModel):
    count: Annotated[int | None, Field(example=123)] = None
    next: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=400&limit=100"),
    ] = None
    previous: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=200&limit=100"),
    ] = None
    results: list[AlgorithmImage] | None = None


class PaginatedAnswerList(BaseModel):
    count: Annotated[int | None, Field(example=123)] = None
    next: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=400&limit=100"),
    ] = None
    previous: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=200&limit=100"),
    ] = None
    results: list[Answer] | None = None


class PaginatedArchiveList(BaseModel):
    count: Annotated[int | None, Field(example=123)] = None
    next: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=400&limit=100"),
    ] = None
    previous: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=200&limit=100"),
    ] = None
    results: list[Archive] | None = None


class PaginatedFeedbackList(BaseModel):
    count: Annotated[int | None, Field(example=123)] = None
    next: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=400&limit=100"),
    ] = None
    previous: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=200&limit=100"),
    ] = None
    results: list[Feedback] | None = None


class PaginatedFollowList(BaseModel):
    count: Annotated[int | None, Field(example=123)] = None
    next: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=400&limit=100"),
    ] = None
    previous: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=200&limit=100"),
    ] = None
    results: list[Follow] | None = None


class PaginatedNotificationList(BaseModel):
    count: Annotated[int | None, Field(example=123)] = None
    next: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=400&limit=100"),
    ] = None
    previous: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=200&limit=100"),
    ] = None
    results: list[Notification] | None = None


class Part(BaseModel):
    ETag: str
    PartNumber: Annotated[int, Field(ge=1, le=10000)]
    LastModified: datetime
    Size: Annotated[int, Field(ge=0)]


class PatchedAnswer(BaseModel):
    answer: dict[str, Any] | None = None
    api_url: Annotated[
        str | None,
        Field(description="API url for this ``Answer``.", readOnly=True),
    ] = None
    created: Annotated[datetime | None, Field(readOnly=True)] = None
    creator: Annotated[
        str | None,
        Field(
            description="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
            readOnly=True,
        ),
    ] = None
    display_set: AnyUrl | None = None
    pk: Annotated[UUID | None, Field(readOnly=True, title="Id")] = None
    question: AnyUrl | None = None
    modified: Annotated[datetime | None, Field(readOnly=True)] = None
    answer_image: Annotated[AnyUrl | None, Field(readOnly=True)] = None
    last_edit_duration: str | None = None
    total_edit_duration: Annotated[str | None, Field(readOnly=True)] = None
    is_ground_truth: Annotated[bool | None, Field(readOnly=True)] = None


class PatchedArchiveItemPost(BaseModel):
    pk: Annotated[UUID | None, Field(readOnly=True, title="Id")] = None
    archive: AnyUrl | None = None
    values: list[ComponentInterfaceValuePost] | None = None
    hanging_protocol: Annotated[
        HangingProtocol | None, Field(readOnly=True)
    ] = None
    view_content: Annotated[dict[str, Any] | None, Field(readOnly=True)] = None


class PatchedBooleanClassificationAnnotation(BaseModel):
    id: Annotated[UUID | None, Field(readOnly=True)] = None
    image: UUID | None = None
    grader: int | None = None
    created: datetime | None = None
    name: Annotated[str | None, Field(max_length=255)] = None
    value: bool | None = None


class PatchedDisplaySetPost(BaseModel):
    pk: Annotated[UUID | None, Field(readOnly=True, title="Id")] = None
    reader_study: str | None = None
    values: list[ComponentInterfaceValuePost] | None = None
    order: Annotated[int | None, Field(ge=0, le=32767)] = None
    api_url: Annotated[
        str | None,
        Field(description="API url for this ``DisplaySet``.", readOnly=True),
    ] = None
    hanging_protocol: Annotated[
        HangingProtocol | None, Field(readOnly=True)
    ] = None
    view_content: Annotated[dict[str, Any] | None, Field(readOnly=True)] = None
    description: Annotated[str | None, Field(readOnly=True)] = None
    index: Annotated[int | None, Field(readOnly=True)] = None


class PatchedETDRSGridAnnotation(BaseModel):
    id: Annotated[UUID | None, Field(readOnly=True)] = None
    grader: int | None = None
    created: datetime | None = None
    image: UUID | None = None
    fovea: Annotated[list[float] | None, Field(max_items=2)] = None
    optic_disk: Annotated[list[float] | None, Field(max_items=2)] = None


class PatchedFollow(BaseModel):
    pk: Annotated[int | None, Field(readOnly=True, title="ID")] = None
    flag: Annotated[str | None, Field(max_length=255)] = None


class PatchedImageTextAnnotation(BaseModel):
    id: Annotated[UUID | None, Field(readOnly=True)] = None
    created: datetime | None = None
    grader: int | None = None
    image: UUID | None = None
    text: str | None = None


class PatchedNotification(BaseModel):
    read: bool | None = None


class PatchedOctRetinaImagePathologyAnnotation(BaseModel):
    id: Annotated[UUID | None, Field(readOnly=True)] = None
    created: datetime | None = None
    grader: int | None = None
    image: UUID | None = None
    macular: Annotated[
        bool | None,
        Field(description="Are pathologies present in macular OCT?"),
    ] = None
    myopia: Annotated[
        bool | None,
        Field(description="Are myopia related pathologies present?"),
    ] = None
    optic_disc: Annotated[
        bool | None,
        Field(description="Are pathologies present in optic disc OCT?"),
    ] = None
    other: Annotated[
        bool | None,
        Field(description="Are other pathologies present in this image?"),
    ] = None
    layers: Annotated[
        bool | None, Field(description="Are retinal layers annotated?")
    ] = None


class PatchedRetinaImagePathologyAnnotation(BaseModel):
    id: Annotated[UUID | None, Field(readOnly=True)] = None
    created: datetime | None = None
    grader: int | None = None
    image: UUID | None = None
    oda_present: Annotated[
        bool | None,
        Field(
            description="Are optic disc abnormalitites present in this image?"
        ),
    ] = None
    myopia_present: Annotated[
        bool | None, Field(description="Is myopia present in this image?")
    ] = None
    other_present: Annotated[
        bool | None,
        Field(description="Are other findings present in this image?"),
    ] = None
    rf_present: Annotated[
        bool | None,
        Field(description="Are retinal pathologies present in this image?"),
    ] = None


class PatchedSession(BaseModel):
    pk: Annotated[UUID | None, Field(readOnly=True, title="Id")] = None
    status: Annotated[str | None, Field(readOnly=True)] = None


class ValueItem(BaseModel):
    __root__: Annotated[list[Any], Field(max_items=2)]


class PatchedSinglePolygonAnnotation(BaseModel):
    id: Annotated[UUID | None, Field(readOnly=True)] = None
    value: list[ValueItem] | None = None
    annotation_set: UUID | None = None
    created: Annotated[datetime | None, Field(readOnly=True)] = None
    z: float | None = None
    interpolated: bool | None = None


class PatchedUserUpload(BaseModel):
    pk: Annotated[UUID | None, Field(readOnly=True, title="Id")] = None
    created: Annotated[datetime | None, Field(readOnly=True)] = None
    filename: Annotated[str | None, Field(readOnly=True)] = None
    key: Annotated[str | None, Field(readOnly=True)] = None
    s3_upload_id: Annotated[str | None, Field(readOnly=True)] = None
    status: Annotated[str | None, Field(readOnly=True)] = None
    api_url: Annotated[str | None, Field(readOnly=True)] = None


class PatchedUserUploadComplete(BaseModel):
    pk: Annotated[UUID | None, Field(readOnly=True, title="Id")] = None
    created: Annotated[datetime | None, Field(readOnly=True)] = None
    filename: Annotated[str | None, Field(readOnly=True)] = None
    key: Annotated[str | None, Field(readOnly=True)] = None
    s3_upload_id: Annotated[str | None, Field(readOnly=True)] = None
    status: Annotated[str | None, Field(readOnly=True)] = None
    api_url: Annotated[str | None, Field(readOnly=True)] = None
    parts: list[Part] | None = None


class PartNumber(BaseModel):
    __root__: Annotated[int, Field(ge=1, le=10000)]


class PatchedUserUploadPresignedURLs(BaseModel):
    pk: Annotated[UUID | None, Field(readOnly=True, title="Id")] = None
    created: Annotated[datetime | None, Field(readOnly=True)] = None
    filename: Annotated[str | None, Field(readOnly=True)] = None
    key: Annotated[str | None, Field(readOnly=True)] = None
    s3_upload_id: Annotated[str | None, Field(readOnly=True)] = None
    status: Annotated[str | None, Field(readOnly=True)] = None
    api_url: Annotated[str | None, Field(readOnly=True)] = None
    part_numbers: list[PartNumber] | None = None
    presigned_urls: Annotated[
        dict[str, str] | None, Field(readOnly=True)
    ] = None


class PathologyEnum(Enum):
    C = "C"
    A = "A"
    Q = "Q"
    P = "P"


class PatientSexEnum(Enum):
    M = "M"
    F = "F"
    O = "O"


class Phase(BaseModel):
    challenge: Challenge
    title: Annotated[
        str | None,
        Field(description="The title of this phase.", max_length=64),
    ] = "Challenge"
    slug: Annotated[str, Field(readOnly=True, regex="^[-a-zA-Z0-9_]+$")]


class QualityEnum(Enum):
    U = "U"
    F = "F"
    G = "G"


class QualityReasonEnum(Enum):
    BP = "BP"
    CA = "CA"
    PM = "PM"


class RawImageUploadSession(BaseModel):
    pk: Annotated[UUID, Field(readOnly=True, title="Id")]
    creator: int | None = None
    status: Annotated[str, Field(readOnly=True)]
    error_message: str | None = None
    image_set: Annotated[list[AnyUrl], Field(readOnly=True)]
    api_url: Annotated[str, Field(readOnly=True)]
    user_uploads: list[UUID] | None = None
    archive: str | None = None
    answer: UUID | None = None
    interface: str | None = None
    archive_item: UUID | None = None
    display_set: UUID | None = None
    uploads: list[AnyUrl]


class RetinaImagePathologyAnnotation(BaseModel):
    id: Annotated[UUID, Field(readOnly=True)]
    created: datetime | None = None
    grader: int | None = None
    image: UUID
    oda_present: Annotated[
        bool,
        Field(
            description="Are optic disc abnormalitites present in this image?"
        ),
    ]
    myopia_present: Annotated[
        bool, Field(description="Is myopia present in this image?")
    ]
    other_present: Annotated[
        bool, Field(description="Are other findings present in this image?")
    ]
    rf_present: Annotated[
        bool | None,
        Field(description="Are retinal pathologies present in this image?"),
    ] = None


class Session(BaseModel):
    pk: Annotated[UUID, Field(readOnly=True, title="Id")]
    status: Annotated[str, Field(readOnly=True)]


class SimpleImage(BaseModel):
    pk: Annotated[UUID, Field(readOnly=True, title="Id")]
    name: Annotated[str, Field(max_length=4096)]


class Landmark(BaseModel):
    __root__: Annotated[list[Any], Field(max_items=2)]


class SingleLandmarkAnnotationSerializerNoParent(BaseModel):
    id: Annotated[UUID, Field(readOnly=True)]
    image: UUID
    landmarks: list[Landmark]


class SinglePolygonAnnotation(BaseModel):
    id: Annotated[UUID, Field(readOnly=True)]
    value: list[ValueItem]
    annotation_set: UUID
    created: Annotated[datetime, Field(readOnly=True)]
    z: float | None = None
    interpolated: bool | None = None


class SinglePolygonAnnotationSerializerNoParent(BaseModel):
    id: UUID | None = None
    value: list[ValueItem]
    z: float | None = None
    interpolated: bool | None = None


class StereoscopicChoiceEnum(Enum):
    L = "L"
    R = "R"
    U = "U"


class TimezoneEnum(Enum):
    Africa_Abidjan = "Africa/Abidjan"
    Africa_Accra = "Africa/Accra"
    Africa_Addis_Ababa = "Africa/Addis_Ababa"
    Africa_Algiers = "Africa/Algiers"
    Africa_Asmara = "Africa/Asmara"
    Africa_Asmera = "Africa/Asmera"
    Africa_Bamako = "Africa/Bamako"
    Africa_Bangui = "Africa/Bangui"
    Africa_Banjul = "Africa/Banjul"
    Africa_Bissau = "Africa/Bissau"
    Africa_Blantyre = "Africa/Blantyre"
    Africa_Brazzaville = "Africa/Brazzaville"
    Africa_Bujumbura = "Africa/Bujumbura"
    Africa_Cairo = "Africa/Cairo"
    Africa_Casablanca = "Africa/Casablanca"
    Africa_Ceuta = "Africa/Ceuta"
    Africa_Conakry = "Africa/Conakry"
    Africa_Dakar = "Africa/Dakar"
    Africa_Dar_es_Salaam = "Africa/Dar_es_Salaam"
    Africa_Djibouti = "Africa/Djibouti"
    Africa_Douala = "Africa/Douala"
    Africa_El_Aaiun = "Africa/El_Aaiun"
    Africa_Freetown = "Africa/Freetown"
    Africa_Gaborone = "Africa/Gaborone"
    Africa_Harare = "Africa/Harare"
    Africa_Johannesburg = "Africa/Johannesburg"
    Africa_Juba = "Africa/Juba"
    Africa_Kampala = "Africa/Kampala"
    Africa_Khartoum = "Africa/Khartoum"
    Africa_Kigali = "Africa/Kigali"
    Africa_Kinshasa = "Africa/Kinshasa"
    Africa_Lagos = "Africa/Lagos"
    Africa_Libreville = "Africa/Libreville"
    Africa_Lome = "Africa/Lome"
    Africa_Luanda = "Africa/Luanda"
    Africa_Lubumbashi = "Africa/Lubumbashi"
    Africa_Lusaka = "Africa/Lusaka"
    Africa_Malabo = "Africa/Malabo"
    Africa_Maputo = "Africa/Maputo"
    Africa_Maseru = "Africa/Maseru"
    Africa_Mbabane = "Africa/Mbabane"
    Africa_Mogadishu = "Africa/Mogadishu"
    Africa_Monrovia = "Africa/Monrovia"
    Africa_Nairobi = "Africa/Nairobi"
    Africa_Ndjamena = "Africa/Ndjamena"
    Africa_Niamey = "Africa/Niamey"
    Africa_Nouakchott = "Africa/Nouakchott"
    Africa_Ouagadougou = "Africa/Ouagadougou"
    Africa_Porto_Novo = "Africa/Porto-Novo"
    Africa_Sao_Tome = "Africa/Sao_Tome"
    Africa_Timbuktu = "Africa/Timbuktu"
    Africa_Tripoli = "Africa/Tripoli"
    Africa_Tunis = "Africa/Tunis"
    Africa_Windhoek = "Africa/Windhoek"
    America_Adak = "America/Adak"
    America_Anchorage = "America/Anchorage"
    America_Anguilla = "America/Anguilla"
    America_Antigua = "America/Antigua"
    America_Araguaina = "America/Araguaina"
    America_Argentina_Buenos_Aires = "America/Argentina/Buenos_Aires"
    America_Argentina_Catamarca = "America/Argentina/Catamarca"
    America_Argentina_ComodRivadavia = "America/Argentina/ComodRivadavia"
    America_Argentina_Cordoba = "America/Argentina/Cordoba"
    America_Argentina_Jujuy = "America/Argentina/Jujuy"
    America_Argentina_La_Rioja = "America/Argentina/La_Rioja"
    America_Argentina_Mendoza = "America/Argentina/Mendoza"
    America_Argentina_Rio_Gallegos = "America/Argentina/Rio_Gallegos"
    America_Argentina_Salta = "America/Argentina/Salta"
    America_Argentina_San_Juan = "America/Argentina/San_Juan"
    America_Argentina_San_Luis = "America/Argentina/San_Luis"
    America_Argentina_Tucuman = "America/Argentina/Tucuman"
    America_Argentina_Ushuaia = "America/Argentina/Ushuaia"
    America_Aruba = "America/Aruba"
    America_Asuncion = "America/Asuncion"
    America_Atikokan = "America/Atikokan"
    America_Atka = "America/Atka"
    America_Bahia = "America/Bahia"
    America_Bahia_Banderas = "America/Bahia_Banderas"
    America_Barbados = "America/Barbados"
    America_Belem = "America/Belem"
    America_Belize = "America/Belize"
    America_Blanc_Sablon = "America/Blanc-Sablon"
    America_Boa_Vista = "America/Boa_Vista"
    America_Bogota = "America/Bogota"
    America_Boise = "America/Boise"
    America_Buenos_Aires = "America/Buenos_Aires"
    America_Cambridge_Bay = "America/Cambridge_Bay"
    America_Campo_Grande = "America/Campo_Grande"
    America_Cancun = "America/Cancun"
    America_Caracas = "America/Caracas"
    America_Catamarca = "America/Catamarca"
    America_Cayenne = "America/Cayenne"
    America_Cayman = "America/Cayman"
    America_Chicago = "America/Chicago"
    America_Chihuahua = "America/Chihuahua"
    America_Ciudad_Juarez = "America/Ciudad_Juarez"
    America_Coral_Harbour = "America/Coral_Harbour"
    America_Cordoba = "America/Cordoba"
    America_Costa_Rica = "America/Costa_Rica"
    America_Creston = "America/Creston"
    America_Cuiaba = "America/Cuiaba"
    America_Curacao = "America/Curacao"
    America_Danmarkshavn = "America/Danmarkshavn"
    America_Dawson = "America/Dawson"
    America_Dawson_Creek = "America/Dawson_Creek"
    America_Denver = "America/Denver"
    America_Detroit = "America/Detroit"
    America_Dominica = "America/Dominica"
    America_Edmonton = "America/Edmonton"
    America_Eirunepe = "America/Eirunepe"
    America_El_Salvador = "America/El_Salvador"
    America_Ensenada = "America/Ensenada"
    America_Fort_Nelson = "America/Fort_Nelson"
    America_Fort_Wayne = "America/Fort_Wayne"
    America_Fortaleza = "America/Fortaleza"
    America_Glace_Bay = "America/Glace_Bay"
    America_Godthab = "America/Godthab"
    America_Goose_Bay = "America/Goose_Bay"
    America_Grand_Turk = "America/Grand_Turk"
    America_Grenada = "America/Grenada"
    America_Guadeloupe = "America/Guadeloupe"
    America_Guatemala = "America/Guatemala"
    America_Guayaquil = "America/Guayaquil"
    America_Guyana = "America/Guyana"
    America_Halifax = "America/Halifax"
    America_Havana = "America/Havana"
    America_Hermosillo = "America/Hermosillo"
    America_Indiana_Indianapolis = "America/Indiana/Indianapolis"
    America_Indiana_Knox = "America/Indiana/Knox"
    America_Indiana_Marengo = "America/Indiana/Marengo"
    America_Indiana_Petersburg = "America/Indiana/Petersburg"
    America_Indiana_Tell_City = "America/Indiana/Tell_City"
    America_Indiana_Vevay = "America/Indiana/Vevay"
    America_Indiana_Vincennes = "America/Indiana/Vincennes"
    America_Indiana_Winamac = "America/Indiana/Winamac"
    America_Indianapolis = "America/Indianapolis"
    America_Inuvik = "America/Inuvik"
    America_Iqaluit = "America/Iqaluit"
    America_Jamaica = "America/Jamaica"
    America_Jujuy = "America/Jujuy"
    America_Juneau = "America/Juneau"
    America_Kentucky_Louisville = "America/Kentucky/Louisville"
    America_Kentucky_Monticello = "America/Kentucky/Monticello"
    America_Knox_IN = "America/Knox_IN"
    America_Kralendijk = "America/Kralendijk"
    America_La_Paz = "America/La_Paz"
    America_Lima = "America/Lima"
    America_Los_Angeles = "America/Los_Angeles"
    America_Louisville = "America/Louisville"
    America_Lower_Princes = "America/Lower_Princes"
    America_Maceio = "America/Maceio"
    America_Managua = "America/Managua"
    America_Manaus = "America/Manaus"
    America_Marigot = "America/Marigot"
    America_Martinique = "America/Martinique"
    America_Matamoros = "America/Matamoros"
    America_Mazatlan = "America/Mazatlan"
    America_Mendoza = "America/Mendoza"
    America_Menominee = "America/Menominee"
    America_Merida = "America/Merida"
    America_Metlakatla = "America/Metlakatla"
    America_Mexico_City = "America/Mexico_City"
    America_Miquelon = "America/Miquelon"
    America_Moncton = "America/Moncton"
    America_Monterrey = "America/Monterrey"
    America_Montevideo = "America/Montevideo"
    America_Montreal = "America/Montreal"
    America_Montserrat = "America/Montserrat"
    America_Nassau = "America/Nassau"
    America_New_York = "America/New_York"
    America_Nipigon = "America/Nipigon"
    America_Nome = "America/Nome"
    America_Noronha = "America/Noronha"
    America_North_Dakota_Beulah = "America/North_Dakota/Beulah"
    America_North_Dakota_Center = "America/North_Dakota/Center"
    America_North_Dakota_New_Salem = "America/North_Dakota/New_Salem"
    America_Nuuk = "America/Nuuk"
    America_Ojinaga = "America/Ojinaga"
    America_Panama = "America/Panama"
    America_Pangnirtung = "America/Pangnirtung"
    America_Paramaribo = "America/Paramaribo"
    America_Phoenix = "America/Phoenix"
    America_Port_au_Prince = "America/Port-au-Prince"
    America_Port_of_Spain = "America/Port_of_Spain"
    America_Porto_Acre = "America/Porto_Acre"
    America_Porto_Velho = "America/Porto_Velho"
    America_Puerto_Rico = "America/Puerto_Rico"
    America_Punta_Arenas = "America/Punta_Arenas"
    America_Rainy_River = "America/Rainy_River"
    America_Rankin_Inlet = "America/Rankin_Inlet"
    America_Recife = "America/Recife"
    America_Regina = "America/Regina"
    America_Resolute = "America/Resolute"
    America_Rio_Branco = "America/Rio_Branco"
    America_Rosario = "America/Rosario"
    America_Santa_Isabel = "America/Santa_Isabel"
    America_Santarem = "America/Santarem"
    America_Santiago = "America/Santiago"
    America_Santo_Domingo = "America/Santo_Domingo"
    America_Sao_Paulo = "America/Sao_Paulo"
    America_Scoresbysund = "America/Scoresbysund"
    America_Shiprock = "America/Shiprock"
    America_Sitka = "America/Sitka"
    America_St_Barthelemy = "America/St_Barthelemy"
    America_St_Johns = "America/St_Johns"
    America_St_Kitts = "America/St_Kitts"
    America_St_Lucia = "America/St_Lucia"
    America_St_Thomas = "America/St_Thomas"
    America_St_Vincent = "America/St_Vincent"
    America_Swift_Current = "America/Swift_Current"
    America_Tegucigalpa = "America/Tegucigalpa"
    America_Thule = "America/Thule"
    America_Thunder_Bay = "America/Thunder_Bay"
    America_Tijuana = "America/Tijuana"
    America_Toronto = "America/Toronto"
    America_Tortola = "America/Tortola"
    America_Vancouver = "America/Vancouver"
    America_Virgin = "America/Virgin"
    America_Whitehorse = "America/Whitehorse"
    America_Winnipeg = "America/Winnipeg"
    America_Yakutat = "America/Yakutat"
    America_Yellowknife = "America/Yellowknife"
    Antarctica_Casey = "Antarctica/Casey"
    Antarctica_Davis = "Antarctica/Davis"
    Antarctica_DumontDUrville = "Antarctica/DumontDUrville"
    Antarctica_Macquarie = "Antarctica/Macquarie"
    Antarctica_Mawson = "Antarctica/Mawson"
    Antarctica_McMurdo = "Antarctica/McMurdo"
    Antarctica_Palmer = "Antarctica/Palmer"
    Antarctica_Rothera = "Antarctica/Rothera"
    Antarctica_South_Pole = "Antarctica/South_Pole"
    Antarctica_Syowa = "Antarctica/Syowa"
    Antarctica_Troll = "Antarctica/Troll"
    Antarctica_Vostok = "Antarctica/Vostok"
    Arctic_Longyearbyen = "Arctic/Longyearbyen"
    Asia_Aden = "Asia/Aden"
    Asia_Almaty = "Asia/Almaty"
    Asia_Amman = "Asia/Amman"
    Asia_Anadyr = "Asia/Anadyr"
    Asia_Aqtau = "Asia/Aqtau"
    Asia_Aqtobe = "Asia/Aqtobe"
    Asia_Ashgabat = "Asia/Ashgabat"
    Asia_Ashkhabad = "Asia/Ashkhabad"
    Asia_Atyrau = "Asia/Atyrau"
    Asia_Baghdad = "Asia/Baghdad"
    Asia_Bahrain = "Asia/Bahrain"
    Asia_Baku = "Asia/Baku"
    Asia_Bangkok = "Asia/Bangkok"
    Asia_Barnaul = "Asia/Barnaul"
    Asia_Beirut = "Asia/Beirut"
    Asia_Bishkek = "Asia/Bishkek"
    Asia_Brunei = "Asia/Brunei"
    Asia_Calcutta = "Asia/Calcutta"
    Asia_Chita = "Asia/Chita"
    Asia_Choibalsan = "Asia/Choibalsan"
    Asia_Chongqing = "Asia/Chongqing"
    Asia_Chungking = "Asia/Chungking"
    Asia_Colombo = "Asia/Colombo"
    Asia_Dacca = "Asia/Dacca"
    Asia_Damascus = "Asia/Damascus"
    Asia_Dhaka = "Asia/Dhaka"
    Asia_Dili = "Asia/Dili"
    Asia_Dubai = "Asia/Dubai"
    Asia_Dushanbe = "Asia/Dushanbe"
    Asia_Famagusta = "Asia/Famagusta"
    Asia_Gaza = "Asia/Gaza"
    Asia_Harbin = "Asia/Harbin"
    Asia_Hebron = "Asia/Hebron"
    Asia_Ho_Chi_Minh = "Asia/Ho_Chi_Minh"
    Asia_Hong_Kong = "Asia/Hong_Kong"
    Asia_Hovd = "Asia/Hovd"
    Asia_Irkutsk = "Asia/Irkutsk"
    Asia_Istanbul = "Asia/Istanbul"
    Asia_Jakarta = "Asia/Jakarta"
    Asia_Jayapura = "Asia/Jayapura"
    Asia_Jerusalem = "Asia/Jerusalem"
    Asia_Kabul = "Asia/Kabul"
    Asia_Kamchatka = "Asia/Kamchatka"
    Asia_Karachi = "Asia/Karachi"
    Asia_Kashgar = "Asia/Kashgar"
    Asia_Kathmandu = "Asia/Kathmandu"
    Asia_Katmandu = "Asia/Katmandu"
    Asia_Khandyga = "Asia/Khandyga"
    Asia_Kolkata = "Asia/Kolkata"
    Asia_Krasnoyarsk = "Asia/Krasnoyarsk"
    Asia_Kuala_Lumpur = "Asia/Kuala_Lumpur"
    Asia_Kuching = "Asia/Kuching"
    Asia_Kuwait = "Asia/Kuwait"
    Asia_Macao = "Asia/Macao"
    Asia_Macau = "Asia/Macau"
    Asia_Magadan = "Asia/Magadan"
    Asia_Makassar = "Asia/Makassar"
    Asia_Manila = "Asia/Manila"
    Asia_Muscat = "Asia/Muscat"
    Asia_Nicosia = "Asia/Nicosia"
    Asia_Novokuznetsk = "Asia/Novokuznetsk"
    Asia_Novosibirsk = "Asia/Novosibirsk"
    Asia_Omsk = "Asia/Omsk"
    Asia_Oral = "Asia/Oral"
    Asia_Phnom_Penh = "Asia/Phnom_Penh"
    Asia_Pontianak = "Asia/Pontianak"
    Asia_Pyongyang = "Asia/Pyongyang"
    Asia_Qatar = "Asia/Qatar"
    Asia_Qostanay = "Asia/Qostanay"
    Asia_Qyzylorda = "Asia/Qyzylorda"
    Asia_Rangoon = "Asia/Rangoon"
    Asia_Riyadh = "Asia/Riyadh"
    Asia_Saigon = "Asia/Saigon"
    Asia_Sakhalin = "Asia/Sakhalin"
    Asia_Samarkand = "Asia/Samarkand"
    Asia_Seoul = "Asia/Seoul"
    Asia_Shanghai = "Asia/Shanghai"
    Asia_Singapore = "Asia/Singapore"
    Asia_Srednekolymsk = "Asia/Srednekolymsk"
    Asia_Taipei = "Asia/Taipei"
    Asia_Tashkent = "Asia/Tashkent"
    Asia_Tbilisi = "Asia/Tbilisi"
    Asia_Tehran = "Asia/Tehran"
    Asia_Tel_Aviv = "Asia/Tel_Aviv"
    Asia_Thimbu = "Asia/Thimbu"
    Asia_Thimphu = "Asia/Thimphu"
    Asia_Tokyo = "Asia/Tokyo"
    Asia_Tomsk = "Asia/Tomsk"
    Asia_Ujung_Pandang = "Asia/Ujung_Pandang"
    Asia_Ulaanbaatar = "Asia/Ulaanbaatar"
    Asia_Ulan_Bator = "Asia/Ulan_Bator"
    Asia_Urumqi = "Asia/Urumqi"
    Asia_Ust_Nera = "Asia/Ust-Nera"
    Asia_Vientiane = "Asia/Vientiane"
    Asia_Vladivostok = "Asia/Vladivostok"
    Asia_Yakutsk = "Asia/Yakutsk"
    Asia_Yangon = "Asia/Yangon"
    Asia_Yekaterinburg = "Asia/Yekaterinburg"
    Asia_Yerevan = "Asia/Yerevan"
    Atlantic_Azores = "Atlantic/Azores"
    Atlantic_Bermuda = "Atlantic/Bermuda"
    Atlantic_Canary = "Atlantic/Canary"
    Atlantic_Cape_Verde = "Atlantic/Cape_Verde"
    Atlantic_Faeroe = "Atlantic/Faeroe"
    Atlantic_Faroe = "Atlantic/Faroe"
    Atlantic_Jan_Mayen = "Atlantic/Jan_Mayen"
    Atlantic_Madeira = "Atlantic/Madeira"
    Atlantic_Reykjavik = "Atlantic/Reykjavik"
    Atlantic_South_Georgia = "Atlantic/South_Georgia"
    Atlantic_St_Helena = "Atlantic/St_Helena"
    Atlantic_Stanley = "Atlantic/Stanley"
    Australia_ACT = "Australia/ACT"
    Australia_Adelaide = "Australia/Adelaide"
    Australia_Brisbane = "Australia/Brisbane"
    Australia_Broken_Hill = "Australia/Broken_Hill"
    Australia_Canberra = "Australia/Canberra"
    Australia_Currie = "Australia/Currie"
    Australia_Darwin = "Australia/Darwin"
    Australia_Eucla = "Australia/Eucla"
    Australia_Hobart = "Australia/Hobart"
    Australia_LHI = "Australia/LHI"
    Australia_Lindeman = "Australia/Lindeman"
    Australia_Lord_Howe = "Australia/Lord_Howe"
    Australia_Melbourne = "Australia/Melbourne"
    Australia_NSW = "Australia/NSW"
    Australia_North = "Australia/North"
    Australia_Perth = "Australia/Perth"
    Australia_Queensland = "Australia/Queensland"
    Australia_South = "Australia/South"
    Australia_Sydney = "Australia/Sydney"
    Australia_Tasmania = "Australia/Tasmania"
    Australia_Victoria = "Australia/Victoria"
    Australia_West = "Australia/West"
    Australia_Yancowinna = "Australia/Yancowinna"
    Brazil_Acre = "Brazil/Acre"
    Brazil_DeNoronha = "Brazil/DeNoronha"
    Brazil_East = "Brazil/East"
    Brazil_West = "Brazil/West"
    CET = "CET"
    CST6CDT = "CST6CDT"
    Canada_Atlantic = "Canada/Atlantic"
    Canada_Central = "Canada/Central"
    Canada_Eastern = "Canada/Eastern"
    Canada_Mountain = "Canada/Mountain"
    Canada_Newfoundland = "Canada/Newfoundland"
    Canada_Pacific = "Canada/Pacific"
    Canada_Saskatchewan = "Canada/Saskatchewan"
    Canada_Yukon = "Canada/Yukon"
    Chile_Continental = "Chile/Continental"
    Chile_EasterIsland = "Chile/EasterIsland"
    Cuba = "Cuba"
    EET = "EET"
    EST = "EST"
    EST5EDT = "EST5EDT"
    Egypt = "Egypt"
    Eire = "Eire"
    Etc_GMT = "Etc/GMT"
    Etc_GMT_0 = "Etc/GMT+0"
    Etc_GMT_1 = "Etc/GMT+1"
    Etc_GMT_10 = "Etc/GMT+10"
    Etc_GMT_11 = "Etc/GMT+11"
    Etc_GMT_12 = "Etc/GMT+12"
    Etc_GMT_2 = "Etc/GMT+2"
    Etc_GMT_3 = "Etc/GMT+3"
    Etc_GMT_4 = "Etc/GMT+4"
    Etc_GMT_5 = "Etc/GMT+5"
    Etc_GMT_6 = "Etc/GMT+6"
    Etc_GMT_7 = "Etc/GMT+7"
    Etc_GMT_8 = "Etc/GMT+8"
    Etc_GMT_9 = "Etc/GMT+9"
    Etc_GMT_0_1 = "Etc/GMT-0"
    Etc_GMT_1_1 = "Etc/GMT-1"
    Etc_GMT_10_1 = "Etc/GMT-10"
    Etc_GMT_11_1 = "Etc/GMT-11"
    Etc_GMT_12_1 = "Etc/GMT-12"
    Etc_GMT_13 = "Etc/GMT-13"
    Etc_GMT_14 = "Etc/GMT-14"
    Etc_GMT_2_1 = "Etc/GMT-2"
    Etc_GMT_3_1 = "Etc/GMT-3"
    Etc_GMT_4_1 = "Etc/GMT-4"
    Etc_GMT_5_1 = "Etc/GMT-5"
    Etc_GMT_6_1 = "Etc/GMT-6"
    Etc_GMT_7_1 = "Etc/GMT-7"
    Etc_GMT_8_1 = "Etc/GMT-8"
    Etc_GMT_9_1 = "Etc/GMT-9"
    Etc_GMT0 = "Etc/GMT0"
    Etc_Greenwich = "Etc/Greenwich"
    Etc_UCT = "Etc/UCT"
    Etc_UTC = "Etc/UTC"
    Etc_Universal = "Etc/Universal"
    Etc_Zulu = "Etc/Zulu"
    Europe_Amsterdam = "Europe/Amsterdam"
    Europe_Andorra = "Europe/Andorra"
    Europe_Astrakhan = "Europe/Astrakhan"
    Europe_Athens = "Europe/Athens"
    Europe_Belfast = "Europe/Belfast"
    Europe_Belgrade = "Europe/Belgrade"
    Europe_Berlin = "Europe/Berlin"
    Europe_Bratislava = "Europe/Bratislava"
    Europe_Brussels = "Europe/Brussels"
    Europe_Bucharest = "Europe/Bucharest"
    Europe_Budapest = "Europe/Budapest"
    Europe_Busingen = "Europe/Busingen"
    Europe_Chisinau = "Europe/Chisinau"
    Europe_Copenhagen = "Europe/Copenhagen"
    Europe_Dublin = "Europe/Dublin"
    Europe_Gibraltar = "Europe/Gibraltar"
    Europe_Guernsey = "Europe/Guernsey"
    Europe_Helsinki = "Europe/Helsinki"
    Europe_Isle_of_Man = "Europe/Isle_of_Man"
    Europe_Istanbul = "Europe/Istanbul"
    Europe_Jersey = "Europe/Jersey"
    Europe_Kaliningrad = "Europe/Kaliningrad"
    Europe_Kiev = "Europe/Kiev"
    Europe_Kirov = "Europe/Kirov"
    Europe_Kyiv = "Europe/Kyiv"
    Europe_Lisbon = "Europe/Lisbon"
    Europe_Ljubljana = "Europe/Ljubljana"
    Europe_London = "Europe/London"
    Europe_Luxembourg = "Europe/Luxembourg"
    Europe_Madrid = "Europe/Madrid"
    Europe_Malta = "Europe/Malta"
    Europe_Mariehamn = "Europe/Mariehamn"
    Europe_Minsk = "Europe/Minsk"
    Europe_Monaco = "Europe/Monaco"
    Europe_Moscow = "Europe/Moscow"
    Europe_Nicosia = "Europe/Nicosia"
    Europe_Oslo = "Europe/Oslo"
    Europe_Paris = "Europe/Paris"
    Europe_Podgorica = "Europe/Podgorica"
    Europe_Prague = "Europe/Prague"
    Europe_Riga = "Europe/Riga"
    Europe_Rome = "Europe/Rome"
    Europe_Samara = "Europe/Samara"
    Europe_San_Marino = "Europe/San_Marino"
    Europe_Sarajevo = "Europe/Sarajevo"
    Europe_Saratov = "Europe/Saratov"
    Europe_Simferopol = "Europe/Simferopol"
    Europe_Skopje = "Europe/Skopje"
    Europe_Sofia = "Europe/Sofia"
    Europe_Stockholm = "Europe/Stockholm"
    Europe_Tallinn = "Europe/Tallinn"
    Europe_Tirane = "Europe/Tirane"
    Europe_Tiraspol = "Europe/Tiraspol"
    Europe_Ulyanovsk = "Europe/Ulyanovsk"
    Europe_Uzhgorod = "Europe/Uzhgorod"
    Europe_Vaduz = "Europe/Vaduz"
    Europe_Vatican = "Europe/Vatican"
    Europe_Vienna = "Europe/Vienna"
    Europe_Vilnius = "Europe/Vilnius"
    Europe_Volgograd = "Europe/Volgograd"
    Europe_Warsaw = "Europe/Warsaw"
    Europe_Zagreb = "Europe/Zagreb"
    Europe_Zaporozhye = "Europe/Zaporozhye"
    Europe_Zurich = "Europe/Zurich"
    GB = "GB"
    GB_Eire = "GB-Eire"
    GMT = "GMT"
    GMT_0 = "GMT+0"
    GMT_0_1 = "GMT-0"
    GMT0 = "GMT0"
    Greenwich = "Greenwich"
    HST = "HST"
    Hongkong = "Hongkong"
    Iceland = "Iceland"
    Indian_Antananarivo = "Indian/Antananarivo"
    Indian_Chagos = "Indian/Chagos"
    Indian_Christmas = "Indian/Christmas"
    Indian_Cocos = "Indian/Cocos"
    Indian_Comoro = "Indian/Comoro"
    Indian_Kerguelen = "Indian/Kerguelen"
    Indian_Mahe = "Indian/Mahe"
    Indian_Maldives = "Indian/Maldives"
    Indian_Mauritius = "Indian/Mauritius"
    Indian_Mayotte = "Indian/Mayotte"
    Indian_Reunion = "Indian/Reunion"
    Iran = "Iran"
    Israel = "Israel"
    Jamaica = "Jamaica"
    Japan = "Japan"
    Kwajalein = "Kwajalein"
    Libya = "Libya"
    MET = "MET"
    MST = "MST"
    MST7MDT = "MST7MDT"
    Mexico_BajaNorte = "Mexico/BajaNorte"
    Mexico_BajaSur = "Mexico/BajaSur"
    Mexico_General = "Mexico/General"
    NZ = "NZ"
    NZ_CHAT = "NZ-CHAT"
    Navajo = "Navajo"
    PRC = "PRC"
    PST8PDT = "PST8PDT"
    Pacific_Apia = "Pacific/Apia"
    Pacific_Auckland = "Pacific/Auckland"
    Pacific_Bougainville = "Pacific/Bougainville"
    Pacific_Chatham = "Pacific/Chatham"
    Pacific_Chuuk = "Pacific/Chuuk"
    Pacific_Easter = "Pacific/Easter"
    Pacific_Efate = "Pacific/Efate"
    Pacific_Enderbury = "Pacific/Enderbury"
    Pacific_Fakaofo = "Pacific/Fakaofo"
    Pacific_Fiji = "Pacific/Fiji"
    Pacific_Funafuti = "Pacific/Funafuti"
    Pacific_Galapagos = "Pacific/Galapagos"
    Pacific_Gambier = "Pacific/Gambier"
    Pacific_Guadalcanal = "Pacific/Guadalcanal"
    Pacific_Guam = "Pacific/Guam"
    Pacific_Honolulu = "Pacific/Honolulu"
    Pacific_Johnston = "Pacific/Johnston"
    Pacific_Kanton = "Pacific/Kanton"
    Pacific_Kiritimati = "Pacific/Kiritimati"
    Pacific_Kosrae = "Pacific/Kosrae"
    Pacific_Kwajalein = "Pacific/Kwajalein"
    Pacific_Majuro = "Pacific/Majuro"
    Pacific_Marquesas = "Pacific/Marquesas"
    Pacific_Midway = "Pacific/Midway"
    Pacific_Nauru = "Pacific/Nauru"
    Pacific_Niue = "Pacific/Niue"
    Pacific_Norfolk = "Pacific/Norfolk"
    Pacific_Noumea = "Pacific/Noumea"
    Pacific_Pago_Pago = "Pacific/Pago_Pago"
    Pacific_Palau = "Pacific/Palau"
    Pacific_Pitcairn = "Pacific/Pitcairn"
    Pacific_Pohnpei = "Pacific/Pohnpei"
    Pacific_Ponape = "Pacific/Ponape"
    Pacific_Port_Moresby = "Pacific/Port_Moresby"
    Pacific_Rarotonga = "Pacific/Rarotonga"
    Pacific_Saipan = "Pacific/Saipan"
    Pacific_Samoa = "Pacific/Samoa"
    Pacific_Tahiti = "Pacific/Tahiti"
    Pacific_Tarawa = "Pacific/Tarawa"
    Pacific_Tongatapu = "Pacific/Tongatapu"
    Pacific_Truk = "Pacific/Truk"
    Pacific_Wake = "Pacific/Wake"
    Pacific_Wallis = "Pacific/Wallis"
    Pacific_Yap = "Pacific/Yap"
    Poland = "Poland"
    Portugal = "Portugal"
    ROC = "ROC"
    ROK = "ROK"
    Singapore = "Singapore"
    Turkey = "Turkey"
    UCT = "UCT"
    US_Alaska = "US/Alaska"
    US_Aleutian = "US/Aleutian"
    US_Arizona = "US/Arizona"
    US_Central = "US/Central"
    US_East_Indiana = "US/East-Indiana"
    US_Eastern = "US/Eastern"
    US_Hawaii = "US/Hawaii"
    US_Indiana_Starke = "US/Indiana-Starke"
    US_Michigan = "US/Michigan"
    US_Mountain = "US/Mountain"
    US_Pacific = "US/Pacific"
    US_Samoa = "US/Samoa"
    UTC = "UTC"
    Universal = "Universal"
    W_SU = "W-SU"
    WET = "WET"
    Zulu = "Zulu"


class User(BaseModel):
    username: Annotated[
        str,
        Field(
            description="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
            max_length=150,
            regex="^[\\w.@+-]+$",
        ),
    ]


class UserProfile(BaseModel):
    user: User
    mugshot: Annotated[AnyUrl, Field(readOnly=True)]
    institution: Annotated[str, Field(max_length=100)]
    department: Annotated[str, Field(max_length=100)]
    location: LocationEnum
    website: Annotated[str | None, Field(max_length=150)] = None


class UserUpload(BaseModel):
    pk: Annotated[UUID, Field(readOnly=True, title="Id")]
    created: Annotated[datetime, Field(readOnly=True)]
    filename: Annotated[str, Field(readOnly=True)]
    key: Annotated[str, Field(readOnly=True)]
    s3_upload_id: Annotated[str, Field(readOnly=True)]
    status: Annotated[str, Field(readOnly=True)]
    api_url: Annotated[str, Field(readOnly=True)]


class UserUploadComplete(BaseModel):
    pk: Annotated[UUID, Field(readOnly=True, title="Id")]
    created: Annotated[datetime, Field(readOnly=True)]
    filename: Annotated[str, Field(readOnly=True)]
    key: Annotated[str, Field(readOnly=True)]
    s3_upload_id: Annotated[str, Field(readOnly=True)]
    status: Annotated[str, Field(readOnly=True)]
    api_url: Annotated[str, Field(readOnly=True)]
    parts: list[Part]


class UserUploadCreate(BaseModel):
    pk: Annotated[UUID, Field(readOnly=True, title="Id")]
    created: Annotated[datetime, Field(readOnly=True)]
    filename: Annotated[str, Field(max_length=128)]
    key: Annotated[str, Field(readOnly=True)]
    s3_upload_id: Annotated[str, Field(readOnly=True)]
    status: Annotated[str, Field(readOnly=True)]
    api_url: Annotated[str, Field(readOnly=True)]


class UserUploadParts(BaseModel):
    pk: Annotated[UUID, Field(readOnly=True, title="Id")]
    created: Annotated[datetime, Field(readOnly=True)]
    filename: Annotated[str, Field(readOnly=True)]
    key: Annotated[str, Field(readOnly=True)]
    s3_upload_id: Annotated[str, Field(readOnly=True)]
    status: Annotated[str, Field(readOnly=True)]
    api_url: Annotated[str, Field(readOnly=True)]
    parts: Annotated[list[Part], Field(readOnly=True)]


class UserUploadPresignedURLs(BaseModel):
    pk: Annotated[UUID, Field(readOnly=True, title="Id")]
    created: Annotated[datetime, Field(readOnly=True)]
    filename: Annotated[str, Field(readOnly=True)]
    key: Annotated[str, Field(readOnly=True)]
    s3_upload_id: Annotated[str, Field(readOnly=True)]
    status: Annotated[str, Field(readOnly=True)]
    api_url: Annotated[str, Field(readOnly=True)]
    part_numbers: list[PartNumber]
    presigned_urls: Annotated[dict[str, str], Field(readOnly=True)]


class WindowPreset(BaseModel):
    pk: Annotated[int, Field(readOnly=True, title="ID")]
    slug: Annotated[str, Field(readOnly=True, regex="^[-a-zA-Z0-9_]+$")]
    title: Annotated[str, Field(max_length=255)]
    description: str | None = None
    center: Annotated[int | None, Field(ge=-2147483648, le=2147483647)] = None
    width: Annotated[int | None, Field(ge=1, le=2147483647)] = None
    lower_percentile: Annotated[int | None, Field(ge=0, le=100)] = None
    upper_percentile: Annotated[int | None, Field(ge=0, le=100)] = None


class Workstation(BaseModel):
    pk: Annotated[UUID, Field(readOnly=True, title="Id")]
    title: Annotated[str, Field(max_length=255)]
    slug: Annotated[str, Field(readOnly=True, regex="^[-a-zA-Z0-9_]+$")]
    url: Annotated[AnyUrl, Field(readOnly=True)]


class WorkstationConfig(BaseModel):
    pk: Annotated[UUID, Field(readOnly=True, title="Id")]
    slug: Annotated[str, Field(readOnly=True, regex="^[-a-zA-Z0-9_]+$")]
    title: Annotated[str, Field(max_length=255)]
    description: str | None = None
    created: Annotated[datetime, Field(readOnly=True)]
    modified: Annotated[datetime, Field(readOnly=True)]
    creator: Annotated[
        str,
        Field(
            description="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
            readOnly=True,
        ),
    ]
    image_context: Annotated[str, Field(readOnly=True)]
    window_presets: Annotated[list[WindowPreset], Field(readOnly=True)]
    default_window_preset: WindowPreset
    default_slab_thickness_mm: float
    default_slab_render_method: Annotated[str, Field(readOnly=True)]
    default_orientation: Annotated[str, Field(readOnly=True)]
    default_overlay_alpha: float
    overlay_luts: Annotated[list[LookUpTable], Field(readOnly=True)]
    default_overlay_lut: LookUpTable
    default_overlay_interpolation: Annotated[str, Field(readOnly=True)]
    default_image_interpolation: Annotated[str, Field(readOnly=True)]
    overlay_segments: Annotated[
        dict[str, Any] | None,
        Field(
            description="The schema that defines how categories of values in the overlay images are differentiated"
        ),
    ] = None
    key_bindings: Annotated[
        dict[str, Any] | None,
        Field(
            description="The schema that overwrites the mapping between keyboard shortcuts and viewer actions"
        ),
    ] = None
    default_zoom_scale: float
    default_brush_size: Annotated[
        Decimal | None,
        Field(
            description="Default brush diameter in millimeters for creating annotations",
            # regex='^-?\\d{0,9}(?:\\.\\d{0,7})?$',
        ),
    ] = None
    default_annotation_color: Annotated[
        str | None,
        Field(
            description="Default color for displaying and creating annotations",
            max_length=7,
            regex="^#[a-fA-F0-9]{6}$",
        ),
    ] = None
    show_image_info_plugin: Annotated[
        bool | None,
        Field(
            description="A plugin that shows meta-data information derived from image headers as well as any configured case text for reader studies"
        ),
    ] = None
    show_display_plugin: Annotated[
        bool | None,
        Field(
            description="A plugin that allows control over display properties such as window preset, slab thickness, or orientation"
        ),
    ] = None
    show_image_switcher_plugin: Annotated[
        bool | None,
        Field(
            description="A plugin that allows switching images when viewing algorithm outputs"
        ),
    ] = None
    show_algorithm_output_plugin: Annotated[
        bool | None,
        Field(
            description="A plugin that shows algorithm outputs, including navigation controls"
        ),
    ] = None
    show_overlay_plugin: Annotated[
        bool | None,
        Field(
            description="A plugin that contains overlay-related controls, such as the overlay-selection tool and overlay-segmentation visibility"
        ),
    ] = None
    show_annotation_statistics_plugin: Annotated[
        bool | None,
        Field(
            description="A plugin that allows analysis of segmentations. It shows voxel value statistics of annotated areas."
        ),
    ] = None
    show_swivel_tool: Annotated[
        bool | None,
        Field(
            description="A tool that allows swiveling the image around axes to view a custom orientation"
        ),
    ] = None
    show_invert_tool: Annotated[
        bool | None,
        Field(
            description="A tool/button that allows inverting the displayed pixel colors of an image"
        ),
    ] = None
    show_flip_tool: Annotated[
        bool | None,
        Field(
            description="A tool/button that allows vertical flipping/mirroring of an image"
        ),
    ] = None
    show_window_level_tool: Annotated[
        bool | None,
        Field(
            description="A tool that allows selection of window presets and changing the window width/center"
        ),
    ] = None
    show_reset_tool: Annotated[
        bool | None,
        Field(
            description="A tool/button that resets all display properties of the images to defaults"
        ),
    ] = None
    show_overlay_selection_tool: Annotated[
        bool | None,
        Field(
            description="A tool that allows switching overlay images when viewing algorithm outputs"
        ),
    ] = None
    show_lut_selection_tool: Annotated[
        bool | None,
        Field(
            description="A tool that allows switching between the overlay-lut presets",
            title="Show overlay-lut selection tool",
        ),
    ] = None
    show_annotation_counter_tool: Annotated[
        bool | None,
        Field(
            description="A tool that can be used to show summary statistics of annotations within an area"
        ),
    ] = None
    enabled_preprocessors: Annotated[list[str], Field(readOnly=True)]
    auto_jump_center_of_gravity: Annotated[
        bool | None,
        Field(
            description="Enables a jump to center of gravity of the first output when viewing algorithm outputs or the first overlay segment when viewing a reader study"
        ),
    ] = None
    link_images: Annotated[
        bool | None, Field(description="Start with the images linked")
    ] = None
    link_panning: Annotated[
        bool | None,
        Field(
            description="When panning and the images are linked, they share any new position"
        ),
    ] = None
    link_zooming: Annotated[
        bool | None,
        Field(
            description="When zooming and the images are linked, they share any new zoom level"
        ),
    ] = None
    link_slicing: Annotated[
        bool | None,
        Field(
            description="When scrolling and the images are linked, they share any slice changes"
        ),
    ] = None
    link_orienting: Annotated[
        bool | None,
        Field(
            description="When orienting and the images are linked, they share any new orientation"
        ),
    ] = None
    link_windowing: Annotated[
        bool | None,
        Field(
            description="When changing window setting and the images are linked, they share any new window width/center"
        ),
    ] = None
    link_inverting: Annotated[
        bool | None,
        Field(
            description="When inverting images and the images are linked, they share any new invert state"
        ),
    ] = None
    link_flipping: Annotated[
        bool | None,
        Field(
            description="When flipping images and the images are linked, they share any new flip state"
        ),
    ] = None


class ArchiveItemPost(BaseModel):
    pk: Annotated[UUID, Field(readOnly=True, title="Id")]
    archive: AnyUrl
    values: list[ComponentInterfaceValuePost]
    hanging_protocol: Annotated[HangingProtocol, Field(readOnly=True)]
    view_content: Annotated[dict[str, Any], Field(readOnly=True)]


class ComponentInterface(BaseModel):
    title: Annotated[
        str,
        Field(
            description="Human readable name of this input/output field.",
            max_length=255,
        ),
    ]
    description: Annotated[
        str | None,
        Field(description="Description of this input/output field."),
    ] = None
    slug: Annotated[str, Field(readOnly=True, regex="^[-a-zA-Z0-9_]+$")]
    kind: Annotated[str, Field(readOnly=True)]
    pk: Annotated[int, Field(readOnly=True, title="ID")]
    default_value: Annotated[
        dict[str, Any] | None,
        Field(
            description="Default value for this field, only valid for inputs."
        ),
    ] = None
    super_kind: Annotated[str, Field(readOnly=True)]
    relative_path: Annotated[
        str,
        Field(
            description="The path to the entity that implements this interface relative to the input or output directory.",
            max_length=255,
            regex=".*[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}.*",
        ),
    ]
    overlay_segments: Annotated[
        dict[str, Any] | None,
        Field(
            description="The schema that defines how categories of values in the overlay images are differentiated."
        ),
    ] = None
    look_up_table: Annotated[LookUpTable, Field(readOnly=True)]


class ComponentInterfaceValue(BaseModel):
    interface: ComponentInterface
    value: dict[str, Any] | None = None
    file: AnyUrl | None = None
    image: SimpleImage | None = None
    pk: Annotated[int, Field(readOnly=True, title="Id")]


class DisplaySetPost(BaseModel):
    pk: Annotated[UUID, Field(readOnly=True, title="Id")]
    reader_study: str | None = None
    values: list[ComponentInterfaceValuePost] | None = None
    order: Annotated[int | None, Field(ge=0, le=32767)] = None
    api_url: Annotated[
        str,
        Field(description="API url for this ``DisplaySet``.", readOnly=True),
    ]
    hanging_protocol: Annotated[HangingProtocol, Field(readOnly=True)]
    view_content: Annotated[dict[str, Any], Field(readOnly=True)]
    description: Annotated[str, Field(readOnly=True)]
    index: Annotated[int, Field(readOnly=True)]


class HyperlinkedComponentInterfaceValue(BaseModel):
    interface: ComponentInterface
    value: dict[str, Any] | None = None
    file: AnyUrl | None = None
    image: AnyUrl
    pk: Annotated[int, Field(readOnly=True, title="Id")]


class HyperlinkedJob(BaseModel):
    pk: Annotated[UUID, Field(readOnly=True, title="Id")]
    api_url: Annotated[str, Field(readOnly=True)]
    algorithm_image: AnyUrl
    inputs: list[HyperlinkedComponentInterfaceValue]
    outputs: list[HyperlinkedComponentInterfaceValue]
    status: Annotated[str, Field(readOnly=True)]
    rendered_result_text: Annotated[str, Field(readOnly=True)]
    algorithm_title: Annotated[str, Field(readOnly=True)]
    started_at: datetime | None = None
    completed_at: datetime | None = None
    hanging_protocol: Annotated[HangingProtocol, Field(readOnly=True)]
    view_content: Annotated[dict[str, Any], Field(readOnly=True)]


class ImageFile(BaseModel):
    pk: Annotated[UUID, Field(readOnly=True, title="Id")]
    image: UUID | None = None
    file: AnyUrl
    image_type: ImageTypeEnum | None = None


class ImagePathologyAnnotation(BaseModel):
    id: Annotated[UUID, Field(readOnly=True)]
    created: datetime | None = None
    grader: int | None = None
    image: UUID
    pathology: Annotated[
        PathologyEnum,
        Field(
            description="Is there a pathology present in the image?\n\n* `C` - Cannot grade\n* `A` - Absent\n* `Q` - Questionable\n* `P` - Present"
        ),
    ]


class ImageQualityAnnotation(BaseModel):
    id: Annotated[UUID, Field(readOnly=True)]
    created: datetime | None = None
    grader: int | None = None
    image: UUID
    quality: Annotated[
        QualityEnum,
        Field(
            description="How do you rate the quality of the image?\n\n* `U` - Cannot grade\n* `F` - Fair\n* `G` - Good"
        ),
    ]
    quality_reason: Annotated[
        QualityReasonEnum | BlankEnum | NullEnum | None,
        Field(
            description="If the quality is not good, why not?\n\n* `BP` - Bad photo\n* `CA` - Cataract\n* `PM` - Poor mydriasis"
        ),
    ] = None


class LandmarkAnnotationSet(BaseModel):
    id: Annotated[UUID, Field(readOnly=True)]
    grader: int | None = None
    created: datetime | None = None
    singlelandmarkannotation_set: list[
        SingleLandmarkAnnotationSerializerNoParent
    ]


class NestedPolygonAnnotationSet(BaseModel):
    id: Annotated[UUID, Field(readOnly=True)]
    image: UUID
    grader: int | None = None
    created: datetime | None = None
    name: Annotated[str, Field(max_length=255)]
    singlepolygonannotation_set: list[
        SinglePolygonAnnotationSerializerNoParent
    ]


class PaginatedComponentInterfaceList(BaseModel):
    count: Annotated[int | None, Field(example=123)] = None
    next: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=400&limit=100"),
    ] = None
    previous: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=200&limit=100"),
    ] = None
    results: list[ComponentInterface] | None = None


class PaginatedHyperlinkedJobList(BaseModel):
    count: Annotated[int | None, Field(example=123)] = None
    next: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=400&limit=100"),
    ] = None
    previous: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=200&limit=100"),
    ] = None
    results: list[HyperlinkedJob] | None = None


class PaginatedRawImageUploadSessionList(BaseModel):
    count: Annotated[int | None, Field(example=123)] = None
    next: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=400&limit=100"),
    ] = None
    previous: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=200&limit=100"),
    ] = None
    results: list[RawImageUploadSession] | None = None


class PaginatedSessionList(BaseModel):
    count: Annotated[int | None, Field(example=123)] = None
    next: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=400&limit=100"),
    ] = None
    previous: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=200&limit=100"),
    ] = None
    results: list[Session] | None = None


class PaginatedUserUploadList(BaseModel):
    count: Annotated[int | None, Field(example=123)] = None
    next: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=400&limit=100"),
    ] = None
    previous: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=200&limit=100"),
    ] = None
    results: list[UserUpload] | None = None


class PaginatedWorkstationConfigList(BaseModel):
    count: Annotated[int | None, Field(example=123)] = None
    next: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=400&limit=100"),
    ] = None
    previous: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=200&limit=100"),
    ] = None
    results: list[WorkstationConfig] | None = None


class PaginatedWorkstationList(BaseModel):
    count: Annotated[int | None, Field(example=123)] = None
    next: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=400&limit=100"),
    ] = None
    previous: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=200&limit=100"),
    ] = None
    results: list[Workstation] | None = None


class PatchedImagePathologyAnnotation(BaseModel):
    id: Annotated[UUID | None, Field(readOnly=True)] = None
    created: datetime | None = None
    grader: int | None = None
    image: UUID | None = None
    pathology: Annotated[
        PathologyEnum | None,
        Field(
            description="Is there a pathology present in the image?\n\n* `C` - Cannot grade\n* `A` - Absent\n* `Q` - Questionable\n* `P` - Present"
        ),
    ] = None


class PatchedImageQualityAnnotation(BaseModel):
    id: Annotated[UUID | None, Field(readOnly=True)] = None
    created: datetime | None = None
    grader: int | None = None
    image: UUID | None = None
    quality: Annotated[
        QualityEnum | None,
        Field(
            description="How do you rate the quality of the image?\n\n* `U` - Cannot grade\n* `F` - Fair\n* `G` - Good"
        ),
    ] = None
    quality_reason: Annotated[
        QualityReasonEnum | BlankEnum | NullEnum | None,
        Field(
            description="If the quality is not good, why not?\n\n* `BP` - Bad photo\n* `CA` - Cataract\n* `PM` - Poor mydriasis"
        ),
    ] = None


class PatchedLandmarkAnnotationSet(BaseModel):
    id: Annotated[UUID | None, Field(readOnly=True)] = None
    grader: int | None = None
    created: datetime | None = None
    singlelandmarkannotation_set: None | (
        list[SingleLandmarkAnnotationSerializerNoParent]
    ) = None


class PatchedNestedPolygonAnnotationSet(BaseModel):
    id: Annotated[UUID | None, Field(readOnly=True)] = None
    image: UUID | None = None
    grader: int | None = None
    created: datetime | None = None
    name: Annotated[str | None, Field(max_length=255)] = None
    singlepolygonannotation_set: None | (
        list[SinglePolygonAnnotationSerializerNoParent]
    ) = None


class Question(BaseModel):
    answer_type: Annotated[str, Field(readOnly=True)]
    api_url: Annotated[
        str, Field(description="API url for this ``Question``.", readOnly=True)
    ]
    form_direction: Annotated[str, Field(readOnly=True)]
    help_text: str | None = None
    image_port: Annotated[str, Field(readOnly=True)]
    pk: Annotated[UUID, Field(readOnly=True, title="Id")]
    question_text: str
    reader_study: Annotated[AnyUrl, Field(readOnly=True)]
    required: bool | None = None
    options: Annotated[list[CategoricalOption], Field(readOnly=True)]
    interface: Annotated[ComponentInterface, Field(readOnly=True)]
    overlay_segments: Annotated[
        dict[str, Any] | None,
        Field(
            description="The schema that defines how categories of values in the overlay images are differentiated."
        ),
    ] = None
    look_up_table: Annotated[LookUpTable, Field(readOnly=True)]
    widget: Annotated[str, Field(readOnly=True)]


class ReaderStudy(BaseModel):
    api_url: Annotated[str, Field(readOnly=True)]
    url: Annotated[AnyUrl, Field(readOnly=True)]
    slug: Annotated[str, Field(readOnly=True, regex="^[-a-zA-Z0-9_]+$")]
    logo: Annotated[AnyUrl, Field(readOnly=True)]
    description: str | None = None
    help_text: Annotated[
        str,
        Field(
            description="The cleaned help text from the markdown sources",
            readOnly=True,
        ),
    ]
    pk: Annotated[UUID, Field(readOnly=True, title="Id")]
    questions: Annotated[list[Question], Field(readOnly=True)]
    title: Annotated[str, Field(max_length=255)]
    is_educational: Annotated[
        bool | None,
        Field(
            description="If checked, readers get the option to verify their answers against the uploaded ground truth. This also means that the uploaded ground truth will be readily available to the readers."
        ),
    ] = None
    has_ground_truth: Annotated[bool, Field(readOnly=True)]
    allow_answer_modification: Annotated[
        bool | None,
        Field(
            description="If true, readers are allowed to modify their answers for a case by navigating back to previous cases. 'Allow case navigation' must be checked as well to enable this setting."
        ),
    ] = None
    allow_case_navigation: Annotated[
        bool | None,
        Field(
            description="If true, readers are allowed to navigate back and forth between cases in this reader study."
        ),
    ] = None
    allow_show_all_annotations: Annotated[
        bool | None,
        Field(
            description="If true, readers are allowed to show/hide all annotations for a case."
        ),
    ] = None
    roll_over_answers_for_n_cases: Annotated[
        int | None,
        Field(
            description="The number of cases for which answers should roll over. It can be used for repeated readings with slightly different hangings. For instance, if set to 1. Case 2 will start with the answers from case 1; whereas case 3 starts anew but its answers will rollover to case 4.",
            ge=0,
            le=32767,
        ),
    ] = None


class RetinaImage(BaseModel):
    pk: Annotated[UUID, Field(readOnly=True, title="Id")]
    name: Annotated[str, Field(max_length=4096)]
    files: Annotated[list[ImageFile], Field(readOnly=True)]
    width: Annotated[int, Field(ge=-2147483648, le=2147483647)]
    height: Annotated[int, Field(ge=-2147483648, le=2147483647)]
    depth: Annotated[int | None, Field(ge=-2147483648, le=2147483647)] = None
    color_space: ColorSpaceEnum
    modality: Annotated[ImagingModality, Field(readOnly=True)]
    eye_choice: Annotated[
        EyeChoiceEnum | None,
        Field(
            description="Is this (retina) image from the right or left eye?\n\n* `OD` - Oculus Dexter (right eye)\n* `OS` - Oculus Sinister (left eye)\n* `U` - Unknown\n* `NA` - Not applicable"
        ),
    ] = None
    stereoscopic_choice: Annotated[
        StereoscopicChoiceEnum | BlankEnum | NullEnum | None,
        Field(
            description="Is this the left or right image of a stereoscopic pair?\n\n* `L` - Left\n* `R` - Right\n* `U` - Unknown\n* `None` - Not applicable"
        ),
    ] = None
    field_of_view: Annotated[
        FieldOfViewEnum | BlankEnum | NullEnum | None,
        Field(
            description="What is the field of view of this image?\n\n* `F1M` - F1M\n* `F2` - F2\n* `F3M` - F3M\n* `F4` - F4\n* `F5` - F5\n* `F6` - F6\n* `F7` - F7\n* `U` - Unknown\n* `None` - Not applicable"
        ),
    ] = None
    shape_without_color: Annotated[
        list[int],
        Field(
            description="Return the shape of the image without the color channel.\n\nReturns\n-------\n    The shape of the image in NumPy ordering [(t), (z), y, x]",
            readOnly=True,
        ),
    ]
    shape: Annotated[
        list[int],
        Field(
            description="Return the shape of the image with the color channel.\n\nReturns\n-------\n    The shape of the image in NumPy ordering [(t), (z), y, x, (c)]",
            readOnly=True,
        ),
    ]
    voxel_width_mm: float | None = None
    voxel_height_mm: float | None = None
    voxel_depth_mm: float | None = None
    api_url: Annotated[str, Field(readOnly=True)]
    patient_id: Annotated[str | None, Field(max_length=64)] = None
    patient_name: Annotated[str | None, Field(max_length=324)] = None
    patient_birth_date: date | None = None
    patient_age: Annotated[str | None, Field(max_length=4)] = None
    patient_sex: PatientSexEnum | BlankEnum | None = None
    study_date: date | None = None
    study_instance_uid: Annotated[str | None, Field(max_length=64)] = None
    series_instance_uid: Annotated[str | None, Field(max_length=64)] = None
    study_description: Annotated[str | None, Field(max_length=64)] = None
    series_description: Annotated[str | None, Field(max_length=64)] = None
    window_center: float | None = None
    window_width: float | None = None
    landmark_annotations: Annotated[list[UUID], Field(readOnly=True)]


class Submission(BaseModel):
    pk: Annotated[UUID, Field(readOnly=True, title="Id")]
    phase: Phase
    created: Annotated[datetime, Field(readOnly=True)]
    creator: User
    comment: Annotated[
        str | None,
        Field(
            description="You can add a comment here to help you keep track of your submissions.",
            max_length=128,
        ),
    ] = None
    predictions_file: AnyUrl
    supplementary_file: AnyUrl | None = None
    supplementary_url: Annotated[
        AnyUrl | None,
        Field(
            description="A URL associated with this submission.",
            max_length=200,
        ),
    ] = None
    algorithm_image: Annotated[AnyUrl, Field(readOnly=True)]


class Timezone(BaseModel):
    timezone: TimezoneEnum


class Algorithm(BaseModel):
    api_url: Annotated[str, Field(readOnly=True)]
    url: Annotated[AnyUrl, Field(readOnly=True)]
    description: str | None = None
    pk: Annotated[UUID, Field(readOnly=True, title="Id")]
    title: Annotated[str, Field(max_length=255)]
    logo: Annotated[AnyUrl, Field(readOnly=True)]
    slug: Annotated[str, Field(readOnly=True, regex="^[-a-zA-Z0-9_]+$")]
    average_duration: Annotated[
        float,
        Field(
            description="The average duration of successful jobs in seconds",
            readOnly=True,
        ),
    ]
    inputs: Annotated[list[ComponentInterface], Field(readOnly=True)]
    outputs: Annotated[list[ComponentInterface], Field(readOnly=True)]


class ArchiveItem(BaseModel):
    pk: Annotated[UUID, Field(readOnly=True, title="Id")]
    archive: Annotated[AnyUrl, Field(readOnly=True)]
    values: list[HyperlinkedComponentInterfaceValue]
    hanging_protocol: Annotated[HangingProtocol, Field(readOnly=True)]
    view_content: Annotated[dict[str, Any], Field(readOnly=True)]


class DisplaySet(BaseModel):
    pk: Annotated[UUID, Field(readOnly=True, title="Id")]
    reader_study: Annotated[AnyUrl, Field(readOnly=True)]
    values: list[HyperlinkedComponentInterfaceValue]
    order: Annotated[int | None, Field(ge=0, le=32767)] = None
    api_url: Annotated[
        str,
        Field(description="API url for this ``DisplaySet``.", readOnly=True),
    ]
    hanging_protocol: Annotated[HangingProtocol, Field(readOnly=True)]
    view_content: Annotated[dict[str, Any], Field(readOnly=True)]
    description: Annotated[str, Field(readOnly=True)]
    index: Annotated[int, Field(readOnly=True)]


class Evaluation(BaseModel):
    pk: Annotated[UUID, Field(readOnly=True, title="Id")]
    method: UUID
    submission: Submission
    created: Annotated[datetime, Field(readOnly=True)]
    published: bool | None = None
    outputs: list[ComponentInterfaceValue]
    rank: Annotated[
        int | None,
        Field(
            description="The position of this result on the leaderboard. If the value is zero, then the result is unranked.",
            ge=0,
            le=2147483647,
        ),
    ] = None
    rank_score: float | None = None
    rank_per_metric: dict[str, Any] | None = None
    status: Annotated[str, Field(readOnly=True)]
    title: Annotated[str, Field(readOnly=True)]


class HyperlinkedImage(BaseModel):
    pk: Annotated[UUID, Field(readOnly=True, title="Id")]
    name: Annotated[str, Field(max_length=4096)]
    files: Annotated[list[ImageFile], Field(readOnly=True)]
    width: Annotated[int, Field(ge=-2147483648, le=2147483647)]
    height: Annotated[int, Field(ge=-2147483648, le=2147483647)]
    depth: Annotated[int | None, Field(ge=-2147483648, le=2147483647)] = None
    color_space: ColorSpaceEnum
    modality: Annotated[ImagingModality, Field(readOnly=True)]
    eye_choice: Annotated[
        EyeChoiceEnum | None,
        Field(
            description="Is this (retina) image from the right or left eye?\n\n* `OD` - Oculus Dexter (right eye)\n* `OS` - Oculus Sinister (left eye)\n* `U` - Unknown\n* `NA` - Not applicable"
        ),
    ] = None
    stereoscopic_choice: Annotated[
        StereoscopicChoiceEnum | BlankEnum | NullEnum | None,
        Field(
            description="Is this the left or right image of a stereoscopic pair?\n\n* `L` - Left\n* `R` - Right\n* `U` - Unknown\n* `None` - Not applicable"
        ),
    ] = None
    field_of_view: Annotated[
        FieldOfViewEnum | BlankEnum | NullEnum | None,
        Field(
            description="What is the field of view of this image?\n\n* `F1M` - F1M\n* `F2` - F2\n* `F3M` - F3M\n* `F4` - F4\n* `F5` - F5\n* `F6` - F6\n* `F7` - F7\n* `U` - Unknown\n* `None` - Not applicable"
        ),
    ] = None
    shape_without_color: Annotated[
        list[int],
        Field(
            description="Return the shape of the image without the color channel.\n\nReturns\n-------\n    The shape of the image in NumPy ordering [(t), (z), y, x]",
            readOnly=True,
        ),
    ]
    shape: Annotated[
        list[int],
        Field(
            description="Return the shape of the image with the color channel.\n\nReturns\n-------\n    The shape of the image in NumPy ordering [(t), (z), y, x, (c)]",
            readOnly=True,
        ),
    ]
    voxel_width_mm: float | None = None
    voxel_height_mm: float | None = None
    voxel_depth_mm: float | None = None
    api_url: Annotated[str, Field(readOnly=True)]
    patient_id: Annotated[str | None, Field(max_length=64)] = None
    patient_name: Annotated[str | None, Field(max_length=324)] = None
    patient_birth_date: date | None = None
    patient_age: Annotated[str | None, Field(max_length=4)] = None
    patient_sex: PatientSexEnum | BlankEnum | None = None
    study_date: date | None = None
    study_instance_uid: Annotated[str | None, Field(max_length=64)] = None
    series_instance_uid: Annotated[str | None, Field(max_length=64)] = None
    study_description: Annotated[str | None, Field(max_length=64)] = None
    series_description: Annotated[str | None, Field(max_length=64)] = None
    window_center: float | None = None
    window_width: float | None = None


class PaginatedAlgorithmList(BaseModel):
    count: Annotated[int | None, Field(example=123)] = None
    next: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=400&limit=100"),
    ] = None
    previous: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=200&limit=100"),
    ] = None
    results: list[Algorithm] | None = None


class PaginatedArchiveItemList(BaseModel):
    count: Annotated[int | None, Field(example=123)] = None
    next: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=400&limit=100"),
    ] = None
    previous: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=200&limit=100"),
    ] = None
    results: list[ArchiveItem] | None = None


class PaginatedDisplaySetList(BaseModel):
    count: Annotated[int | None, Field(example=123)] = None
    next: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=400&limit=100"),
    ] = None
    previous: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=200&limit=100"),
    ] = None
    results: list[DisplaySet] | None = None


class PaginatedEvaluationList(BaseModel):
    count: Annotated[int | None, Field(example=123)] = None
    next: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=400&limit=100"),
    ] = None
    previous: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=200&limit=100"),
    ] = None
    results: list[Evaluation] | None = None


class PaginatedHyperlinkedImageList(BaseModel):
    count: Annotated[int | None, Field(example=123)] = None
    next: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=400&limit=100"),
    ] = None
    previous: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=200&limit=100"),
    ] = None
    results: list[HyperlinkedImage] | None = None


class PaginatedQuestionList(BaseModel):
    count: Annotated[int | None, Field(example=123)] = None
    next: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=400&limit=100"),
    ] = None
    previous: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=200&limit=100"),
    ] = None
    results: list[Question] | None = None


class PaginatedReaderStudyList(BaseModel):
    count: Annotated[int | None, Field(example=123)] = None
    next: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=400&limit=100"),
    ] = None
    previous: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=200&limit=100"),
    ] = None
    results: list[ReaderStudy] | None = None


class PaginatedRetinaImageList(BaseModel):
    count: Annotated[int | None, Field(example=123)] = None
    next: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=400&limit=100"),
    ] = None
    previous: Annotated[
        AnyUrl | None,
        Field(example="http://api.example.org/accounts/?offset=200&limit=100"),
    ] = None
    results: list[RetinaImage] | None = None
